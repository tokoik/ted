//
// 姿勢情報
//
#include "Attitude.h"

// 標準ライブラリ
#include <fstream>

// 姿勢データ
Attitude attitude;

// カメラ方向の補正ステップ
GgQuaternion Attitude::eyeOrientationStep[2];

//
// コンストラクタ
//
Attitude::Attitude()
  : position{ 0.0f, 0.0f, 0.0f, 1.0f }
  , initialPosition{ 0.0f, 0.0f, 0.0f, 1.0f }
  , parallax{ 0 }
  , initialParallax{ 0 }
  , foreAdjust{ 0, 0, 0, 0 }
  , initialForeAdjust{ 0, 0, 0, 0 }
  , backAdjust{ 0, 0, 0, 0 }
  , initialBackAdjust{ 0, 0, 0, 0 }
  , circleAdjust{ 0, 0, 0, 0 }
  , initialCircleAdjust{ 0, 0, 0, 0 }
  , offset{ 0 }
  , initialOffset{ 0 }
{
  // カメラごとの姿勢の補正値
  for (auto &o : eyeOrientation)
  {
    o[0] = o[1] = o[2] = 0.0f;
    o[3] = 1.0f;
  }

  // カメラごとの姿勢の補正値の初期値
  for (auto &o : initialEyeOrientation)
  {
    o[0] = o[1] = o[2] = 0.0f;
    o[3] = 1.0f;
  }

  // カメラ方向の補正ステップ
  static bool firstTime{ true };
  if (firstTime)
  {
    // カメラ方向の調整ステップを求める
    eyeOrientationStep[0].loadRotate(0.0f, 1.0f, 0.0f, 0.001f);
    eyeOrientationStep[1].loadRotate(1.0f, 0.0f, 0.0f, 0.001f);
  }
}

//
// 姿勢の JSON データの読み取り
//
bool Attitude::read(picojson::value &v)
{
  // 設定内容のパース
  picojson::object &o(v.get<picojson::object>());
  if (o.empty()) return false;

  // 初期位置
  getVector(initialPosition, o, "position");

  // 初期姿勢
  getVector(initialOrientation, o, "orientation");

  // カメラ方向の補正値
  const auto &v_parallax_offset{ o.find("parallax_offset") };
  if (v_parallax_offset != o.end() && v_parallax_offset->second.is<picojson::array>())
  {
    picojson::array &a(v_parallax_offset->second.get<picojson::array>());
    for (int eye = 0; eye < camCount; ++eye)
    {
      std::size_t count{std::min(a.size(), initialEyeOrientation[eye].size()) };
      for (std::size_t i = 0; i < count; ++i)
        initialEyeOrientation[eye][i] = static_cast<GLfloat>(a[eye * 4 + i].get<double>());
    }
  }

  // 視差の初期値
  getValue(initialParallax, o, "parallax");

  // 前景の焦点距離・縦横比・中心位置の初期値
  getVector(initialForeAdjust, o, "fore_intrinsic");

  // 背景の焦点距離・縦横比・中心位置の初期値
  getVector(initialBackAdjust, o, "back_intrinsic");

  // 背景テクスチャの半径と中心位置の初期値
  getVector(initialCircleAdjust, o, "circle");

  // スクリーンの間隔の初期値
  getValue(initialOffset, o, "offset");

  return true;
}

//
// 姿勢の設定ファイルの読み込み
//
bool Attitude::load(const std::string &file)
{
  // 読み込んだ設定ファイル名を覚えておく
  attitude_file = file;

  // 設定ファイルを開く
  std::ifstream attitude(file);
  if (!attitude) return false;

  // 設定ファイルを読み込む
  picojson::value v;
  attitude >> v;
  attitude.close();

  // 設定を解析する
  return read(v);
}

// 姿勢の設定ファイルの書き込み
bool Attitude::save(const std::string &file) const
{
  // 設定値を保存する
  std::ofstream attitude(file);
  if (!attitude) return false;

  // オブジェクト
  picojson::object o;

  // 位置
  setVector(position, o, "position");

  // 姿勢
  setVector(initialOrientation, o, "orientation");

  // 前景に対する焦点距離と中心位置
  setVector(foreAdjust, o, "fore_intrinsic");

  // 背景に対する焦点距離と中心位置
  setVector(backAdjust, o, "back_intrinsic");

  // 視差
  setValue(parallax, o, "parallax");

  // カメラ方向の補正値
  picojson::array e;
  for (int eye = 0; eye < camCount; ++eye)
    for (int i = 0; i < 4; ++i)
      e.push_back(picojson::value(static_cast<double>(initialEyeOrientation[eye].data()[i])));
  o.insert(std::make_pair("parallax_offset", picojson::value(e)));

  // 背景テクスチャの半径と中心位置
  setVector(circleAdjust, o, "circle");

  // スクリーンの間隔
  setValue(offset, o, "offset");

  // 設定内容をシリアライズして保存
  picojson::value v(o);
  attitude << v.serialize(true);
  attitude.close();

  return true;
}

//
// デストラクタ
//
Attitude::~Attitude()
{
}
