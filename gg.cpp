/*
** ゲームグラフィックス特論用補助プログラム GLFW3 版
**

Copyright (c) 2011-2017 Kohe Tokoi. All Rights Reserved.

Permission is hereby granted, free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction,  including without limitation the rights
to use, copy,  modify, merge,  publish, distribute,  sublicense,  and/or sell
copies or substantial portions of the Software.

The above  copyright notice  and this permission notice  shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE  IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY KIND,  EXPRESS OR
IMPLIED,  INCLUDING  BUT  NOT LIMITED  TO THE WARRANTIES  OF MERCHANTABILITY,
FITNESS  FOR  A PARTICULAR PURPOSE  AND NONINFRINGEMENT.  IN  NO EVENT  SHALL
KOHE TOKOI  BE LIABLE FOR ANY CLAIM,  DAMAGES OR OTHER LIABILITY,  WHETHER IN
AN ACTION  OF CONTRACT,  TORT  OR  OTHERWISE,  ARISING  FROM,  OUT OF  OR  IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**
*/

// クラス定義
#include "gg.h"

// 標準ライブラリ
#include <cmath>
#include <cfloat>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <memory>
#include <map>

// Alias OBJ ファイルからテクスチャ座標も読み込むなら 1
#define READ_TEXTURE_COORDINATE_FROM_OBJ 0

#if defined(_WIN32)
#  if !defined(_DEBUG)
#    pragma comment(linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"")
#  endif
#  pragma comment(lib, "glfw3.lib")
PFNGLACTIVEPROGRAMEXTPROC glActiveProgramEXT;
PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
PFNGLACTIVETEXTUREPROC glActiveTexture;
PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC glApplyFramebufferAttachmentCMAAINTEL;
PFNGLATTACHSHADERPROC glAttachShader;
PFNGLBEGINCONDITIONALRENDERNVPROC glBeginConditionalRenderNV;
PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
PFNGLBEGINPERFMONITORAMDPROC glBeginPerfMonitorAMD;
PFNGLBEGINPERFQUERYINTELPROC glBeginPerfQueryINTEL;
PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
PFNGLBEGINQUERYPROC glBeginQuery;
PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
PFNGLBINDBUFFERBASEPROC glBindBufferBase;
PFNGLBINDBUFFERPROC glBindBuffer;
PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
PFNGLBINDBUFFERSBASEPROC glBindBuffersBase;
PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
PFNGLBINDIMAGETEXTURESPROC glBindImageTextures;
PFNGLBINDMULTITEXTUREEXTPROC glBindMultiTextureEXT;
PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
PFNGLBINDSAMPLERPROC glBindSampler;
PFNGLBINDSAMPLERSPROC glBindSamplers;
PFNGLBINDTEXTUREPROC glBindTexture;
PFNGLBINDTEXTURESPROC glBindTextures;
PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers;
PFNGLBLENDBARRIERKHRPROC glBlendBarrierKHR;
PFNGLBLENDBARRIERNVPROC glBlendBarrierNV;
PFNGLBLENDCOLORPROC glBlendColor;
PFNGLBLENDEQUATIONIARBPROC glBlendEquationiARB;
PFNGLBLENDEQUATIONIPROC glBlendEquationi;
PFNGLBLENDEQUATIONPROC glBlendEquation;
PFNGLBLENDEQUATIONSEPARATEIARBPROC glBlendEquationSeparateiARB;
PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
PFNGLBLENDFUNCIARBPROC glBlendFunciARB;
PFNGLBLENDFUNCIPROC glBlendFunci;
PFNGLBLENDFUNCPROC glBlendFunc;
PFNGLBLENDFUNCSEPARATEIARBPROC glBlendFuncSeparateiARB;
PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
PFNGLBLENDPARAMETERINVPROC glBlendParameteriNV;
PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
PFNGLBUFFERADDRESSRANGENVPROC glBufferAddressRangeNV;
PFNGLBUFFERDATAPROC glBufferData;
PFNGLBUFFERPAGECOMMITMENTARBPROC glBufferPageCommitmentARB;
PFNGLBUFFERSTORAGEPROC glBufferStorage;
PFNGLBUFFERSUBDATAPROC glBufferSubData;
PFNGLCALLCOMMANDLISTNVPROC glCallCommandListNV;
PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glCheckNamedFramebufferStatusEXT;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
PFNGLCLAMPCOLORPROC glClampColor;
PFNGLCLEARBUFFERDATAPROC glClearBufferData;
PFNGLCLEARBUFFERFIPROC glClearBufferfi;
PFNGLCLEARBUFFERFVPROC glClearBufferfv;
PFNGLCLEARBUFFERIVPROC glClearBufferiv;
PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
PFNGLCLEARCOLORPROC glClearColor;
PFNGLCLEARDEPTHFPROC glClearDepthf;
PFNGLCLEARDEPTHPROC glClearDepth;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC glClearNamedBufferDataEXT;
PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT;
PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
PFNGLCLEARPROC glClear;
PFNGLCLEARSTENCILPROC glClearStencil;
PFNGLCLEARTEXIMAGEPROC glClearTexImage;
PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage;
PFNGLCLIENTATTRIBDEFAULTEXTPROC glClientAttribDefaultEXT;
PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
PFNGLCLIPCONTROLPROC glClipControl;
PFNGLCOLORFORMATNVPROC glColorFormatNV;
PFNGLCOLORMASKIPROC glColorMaski;
PFNGLCOLORMASKPROC glColorMask;
PFNGLCOMMANDLISTSEGMENTSNVPROC glCommandListSegmentsNV;
PFNGLCOMPILECOMMANDLISTNVPROC glCompileCommandListNV;
PFNGLCOMPILESHADERINCLUDEARBPROC glCompileShaderIncludeARB;
PFNGLCOMPILESHADERPROC glCompileShader;
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glCompressedMultiTexImage1DEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glCompressedMultiTexImage2DEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glCompressedMultiTexImage3DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glCompressedMultiTexSubImage1DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glCompressedMultiTexSubImage2DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glCompressedMultiTexSubImage3DEXT;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glCompressedTextureImage1DEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glCompressedTextureImage2DEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glCompressedTextureImage3DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glCompressedTextureSubImage1DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glCompressedTextureSubImage2DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glCompressedTextureSubImage3DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glConservativeRasterParameterfNV;
PFNGLCONSERVATIVERASTERPARAMETERINVPROC glConservativeRasterParameteriNV;
PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
PFNGLCOPYMULTITEXIMAGE1DEXTPROC glCopyMultiTexImage1DEXT;
PFNGLCOPYMULTITEXIMAGE2DEXTPROC glCopyMultiTexImage2DEXT;
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glCopyMultiTexSubImage1DEXT;
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glCopyMultiTexSubImage2DEXT;
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glCopyMultiTexSubImage3DEXT;
PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
PFNGLCOPYPATHNVPROC glCopyPathNV;
PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D;
PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D;
PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D;
PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D;
PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;
PFNGLCOPYTEXTUREIMAGE1DEXTPROC glCopyTextureImage1DEXT;
PFNGLCOPYTEXTUREIMAGE2DEXTPROC glCopyTextureImage2DEXT;
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glCopyTextureSubImage1DEXT;
PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glCopyTextureSubImage2DEXT;
PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glCopyTextureSubImage3DEXT;
PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
PFNGLCOVERAGEMODULATIONNVPROC glCoverageModulationNV;
PFNGLCOVERAGEMODULATIONTABLENVPROC glCoverageModulationTableNV;
PFNGLCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
PFNGLCOVERFILLPATHNVPROC glCoverFillPathNV;
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
PFNGLCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
PFNGLCREATEBUFFERSPROC glCreateBuffers;
PFNGLCREATECOMMANDLISTSNVPROC glCreateCommandListsNV;
PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
PFNGLCREATEPERFQUERYINTELPROC glCreatePerfQueryINTEL;
PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
PFNGLCREATEPROGRAMPROC glCreateProgram;
PFNGLCREATEQUERIESPROC glCreateQueries;
PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
PFNGLCREATESAMPLERSPROC glCreateSamplers;
PFNGLCREATESHADERPROC glCreateShader;
PFNGLCREATESHADERPROGRAMEXTPROC glCreateShaderProgramEXT;
PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
PFNGLCREATESTATESNVPROC glCreateStatesNV;
PFNGLCREATESYNCFROMCLEVENTARBPROC glCreateSyncFromCLeventARB;
PFNGLCREATETEXTURESPROC glCreateTextures;
PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
PFNGLCULLFACEPROC glCullFace;
PFNGLDEBUGMESSAGECALLBACKARBPROC glDebugMessageCallbackARB;
PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
PFNGLDEBUGMESSAGECONTROLARBPROC glDebugMessageControlARB;
PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
PFNGLDEBUGMESSAGEINSERTARBPROC glDebugMessageInsertARB;
PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
PFNGLDELETEBUFFERSPROC glDeleteBuffers;
PFNGLDELETECOMMANDLISTSNVPROC glDeleteCommandListsNV;
PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
PFNGLDELETENAMEDSTRINGARBPROC glDeleteNamedStringARB;
PFNGLDELETEPATHSNVPROC glDeletePathsNV;
PFNGLDELETEPERFMONITORSAMDPROC glDeletePerfMonitorsAMD;
PFNGLDELETEPERFQUERYINTELPROC glDeletePerfQueryINTEL;
PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
PFNGLDELETEPROGRAMPROC glDeleteProgram;
PFNGLDELETEQUERIESPROC glDeleteQueries;
PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
PFNGLDELETESAMPLERSPROC glDeleteSamplers;
PFNGLDELETESHADERPROC glDeleteShader;
PFNGLDELETESTATESNVPROC glDeleteStatesNV;
PFNGLDELETESYNCPROC glDeleteSync;
PFNGLDELETETEXTURESPROC glDeleteTextures;
PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
PFNGLDEPTHFUNCPROC glDepthFunc;
PFNGLDEPTHMASKPROC glDepthMask;
PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
PFNGLDEPTHRANGEFPROC glDepthRangef;
PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
PFNGLDEPTHRANGEPROC glDepthRange;
PFNGLDETACHSHADERPROC glDetachShader;
PFNGLDISABLECLIENTSTATEIEXTPROC glDisableClientStateiEXT;
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glDisableClientStateIndexedEXT;
PFNGLDISABLEINDEXEDEXTPROC glDisableIndexedEXT;
PFNGLDISABLEIPROC glDisablei;
PFNGLDISABLEPROC glDisable;
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glDisableVertexArrayAttribEXT;
PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
PFNGLDISABLEVERTEXARRAYEXTPROC glDisableVertexArrayEXT;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glDispatchComputeGroupSizeARB;
PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
PFNGLDRAWARRAYSINSTANCEDARBPROC glDrawArraysInstancedARB;
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
PFNGLDRAWARRAYSPROC glDrawArrays;
PFNGLDRAWBUFFERPROC glDrawBuffer;
PFNGLDRAWBUFFERSPROC glDrawBuffers;
PFNGLDRAWCOMMANDSADDRESSNVPROC glDrawCommandsAddressNV;
PFNGLDRAWCOMMANDSNVPROC glDrawCommandsNV;
PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glDrawCommandsStatesAddressNV;
PFNGLDRAWCOMMANDSSTATESNVPROC glDrawCommandsStatesNV;
PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
PFNGLDRAWELEMENTSINSTANCEDARBPROC glDrawElementsInstancedARB;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
PFNGLDRAWELEMENTSPROC glDrawElements;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
PFNGLDRAWVKIMAGENVPROC glDrawVkImageNV;
PFNGLEDGEFLAGFORMATNVPROC glEdgeFlagFormatNV;
PFNGLENABLECLIENTSTATEIEXTPROC glEnableClientStateiEXT;
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glEnableClientStateIndexedEXT;
PFNGLENABLEINDEXEDEXTPROC glEnableIndexedEXT;
PFNGLENABLEIPROC glEnablei;
PFNGLENABLEPROC glEnable;
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glEnableVertexArrayAttribEXT;
PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
PFNGLENABLEVERTEXARRAYEXTPROC glEnableVertexArrayEXT;
PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
PFNGLENDCONDITIONALRENDERNVPROC glEndConditionalRenderNV;
PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
PFNGLENDPERFMONITORAMDPROC glEndPerfMonitorAMD;
PFNGLENDPERFQUERYINTELPROC glEndPerfQueryINTEL;
PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
PFNGLENDQUERYPROC glEndQuery;
PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
PFNGLEVALUATEDEPTHVALUESARBPROC glEvaluateDepthValuesARB;
PFNGLFENCESYNCPROC glFenceSync;
PFNGLFINISHPROC glFinish;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glFlushMappedNamedBufferRangeEXT;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
PFNGLFLUSHPROC glFlush;
PFNGLFOGCOORDFORMATNVPROC glFogCoordFormatNV;
PFNGLFRAGMENTCOVERAGECOLORNVPROC glFragmentCoverageColorNV;
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glFramebufferDrawBufferEXT;
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glFramebufferDrawBuffersEXT;
PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
PFNGLFRAMEBUFFERREADBUFFEREXTPROC glFramebufferReadBufferEXT;
PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glFramebufferSampleLocationsfvARB;
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glFramebufferSampleLocationsfvNV;
PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
PFNGLFRAMEBUFFERTEXTUREARBPROC glFramebufferTextureARB;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glFramebufferTextureFaceARB;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glFramebufferTextureLayerARB;
PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glFramebufferTextureMultiviewOVR;
PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
PFNGLFRONTFACEPROC glFrontFace;
PFNGLGENBUFFERSPROC glGenBuffers;
PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
PFNGLGENERATEMULTITEXMIPMAPEXTPROC glGenerateMultiTexMipmapEXT;
PFNGLGENERATETEXTUREMIPMAPEXTPROC glGenerateTextureMipmapEXT;
PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
PFNGLGENPATHSNVPROC glGenPathsNV;
PFNGLGENPERFMONITORSAMDPROC glGenPerfMonitorsAMD;
PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
PFNGLGENQUERIESPROC glGenQueries;
PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
PFNGLGENSAMPLERSPROC glGenSamplers;
PFNGLGENTEXTURESPROC glGenTextures;
PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
PFNGLGETBOOLEANINDEXEDVEXTPROC glGetBooleanIndexedvEXT;
PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
PFNGLGETBOOLEANVPROC glGetBooleanv;
PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
PFNGLGETBUFFERPARAMETERUI64VNVPROC glGetBufferParameterui64vNV;
PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;
PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
PFNGLGETCOMMANDHEADERNVPROC glGetCommandHeaderNV;
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glGetCompressedMultiTexImageEXT;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glGetCompressedTextureImageEXT;
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
PFNGLGETCOVERAGEMODULATIONTABLENVPROC glGetCoverageModulationTableNV;
PFNGLGETDEBUGMESSAGELOGARBPROC glGetDebugMessageLogARB;
PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
PFNGLGETDOUBLEINDEXEDVEXTPROC glGetDoubleIndexedvEXT;
PFNGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
PFNGLGETDOUBLEVPROC glGetDoublev;
PFNGLGETERRORPROC glGetError;
PFNGLGETFIRSTPERFQUERYIDINTELPROC glGetFirstPerfQueryIdINTEL;
PFNGLGETFLOATINDEXEDVEXTPROC glGetFloatIndexedvEXT;
PFNGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
PFNGLGETFLOATI_VPROC glGetFloati_v;
PFNGLGETFLOATVPROC glGetFloatv;
PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glGetFramebufferParameterivEXT;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
PFNGLGETGRAPHICSRESETSTATUSARBPROC glGetGraphicsResetStatusARB;
PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus;
PFNGLGETIMAGEHANDLEARBPROC glGetImageHandleARB;
PFNGLGETIMAGEHANDLENVPROC glGetImageHandleNV;
PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
PFNGLGETINTEGER64VPROC glGetInteger64v;
PFNGLGETINTEGERINDEXEDVEXTPROC glGetIntegerIndexedvEXT;
PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
PFNGLGETINTEGERUI64I_VNVPROC glGetIntegerui64i_vNV;
PFNGLGETINTEGERUI64VNVPROC glGetIntegerui64vNV;
PFNGLGETINTEGERVPROC glGetIntegerv;
PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glGetInternalformatSampleivNV;
PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
PFNGLGETMULTITEXGENDVEXTPROC glGetMultiTexGendvEXT;
PFNGLGETMULTITEXGENFVEXTPROC glGetMultiTexGenfvEXT;
PFNGLGETMULTITEXGENIVEXTPROC glGetMultiTexGenivEXT;
PFNGLGETMULTITEXIMAGEEXTPROC glGetMultiTexImageEXT;
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glGetMultiTexLevelParameterfvEXT;
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glGetMultiTexLevelParameterivEXT;
PFNGLGETMULTITEXPARAMETERFVEXTPROC glGetMultiTexParameterfvEXT;
PFNGLGETMULTITEXPARAMETERIIVEXTPROC glGetMultiTexParameterIivEXT;
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glGetMultiTexParameterIuivEXT;
PFNGLGETMULTITEXPARAMETERIVEXTPROC glGetMultiTexParameterivEXT;
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glGetNamedBufferParameterivEXT;
PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glGetNamedBufferParameterui64vNV;
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glGetNamedBufferPointervEXT;
PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glGetNamedBufferSubDataEXT;
PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetNamedFramebufferAttachmentParameterivEXT;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glGetNamedFramebufferParameterivEXT;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
PFNGLGETNAMEDPROGRAMIVEXTPROC glGetNamedProgramivEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glGetNamedProgramLocalParameterdvEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glGetNamedProgramLocalParameterfvEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glGetNamedProgramLocalParameterIivEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glGetNamedProgramLocalParameterIuivEXT;
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glGetNamedProgramStringEXT;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glGetNamedRenderbufferParameterivEXT;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
PFNGLGETNAMEDSTRINGARBPROC glGetNamedStringARB;
PFNGLGETNAMEDSTRINGIVARBPROC glGetNamedStringivARB;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glGetnCompressedTexImageARB;
PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage;
PFNGLGETNEXTPERFQUERYIDINTELPROC glGetNextPerfQueryIdINTEL;
PFNGLGETNTEXIMAGEARBPROC glGetnTexImageARB;
PFNGLGETNTEXIMAGEPROC glGetnTexImage;
PFNGLGETNUNIFORMDVARBPROC glGetnUniformdvARB;
PFNGLGETNUNIFORMDVPROC glGetnUniformdv;
PFNGLGETNUNIFORMFVARBPROC glGetnUniformfvARB;
PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
PFNGLGETNUNIFORMI64VARBPROC glGetnUniformi64vARB;
PFNGLGETNUNIFORMIVARBPROC glGetnUniformivARB;
PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
PFNGLGETNUNIFORMUI64VARBPROC glGetnUniformui64vARB;
PFNGLGETNUNIFORMUIVARBPROC glGetnUniformuivARB;
PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
PFNGLGETOBJECTLABELEXTPROC glGetObjectLabelEXT;
PFNGLGETOBJECTLABELPROC glGetObjectLabel;
PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
PFNGLGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
PFNGLGETPATHCOORDSNVPROC glGetPathCoordsNV;
PFNGLGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
PFNGLGETPATHLENGTHNVPROC glGetPathLengthNV;
PFNGLGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
PFNGLGETPATHMETRICSNVPROC glGetPathMetricsNV;
PFNGLGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
PFNGLGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
PFNGLGETPATHSPACINGNVPROC glGetPathSpacingNV;
PFNGLGETPERFCOUNTERINFOINTELPROC glGetPerfCounterInfoINTEL;
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glGetPerfMonitorCounterDataAMD;
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glGetPerfMonitorCounterInfoAMD;
PFNGLGETPERFMONITORCOUNTERSAMDPROC glGetPerfMonitorCountersAMD;
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glGetPerfMonitorCounterStringAMD;
PFNGLGETPERFMONITORGROUPSAMDPROC glGetPerfMonitorGroupsAMD;
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glGetPerfMonitorGroupStringAMD;
PFNGLGETPERFQUERYDATAINTELPROC glGetPerfQueryDataINTEL;
PFNGLGETPERFQUERYIDBYNAMEINTELPROC glGetPerfQueryIdByNameINTEL;
PFNGLGETPERFQUERYINFOINTELPROC glGetPerfQueryInfoINTEL;
PFNGLGETPOINTERINDEXEDVEXTPROC glGetPointerIndexedvEXT;
PFNGLGETPOINTERI_VEXTPROC glGetPointeri_vEXT;
PFNGLGETPOINTERVPROC glGetPointerv;
PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
PFNGLGETPROGRAMIVPROC glGetProgramiv;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
PFNGLGETPROGRAMRESOURCEFVNVPROC glGetProgramResourcefvNV;
PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
PFNGLGETQUERYIVPROC glGetQueryiv;
PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
PFNGLGETSHADERIVPROC glGetShaderiv;
PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
PFNGLGETSHADERSOURCEPROC glGetShaderSource;
PFNGLGETSTAGEINDEXNVPROC glGetStageIndexNV;
PFNGLGETSTRINGIPROC glGetStringi;
PFNGLGETSTRINGPROC glGetString;
PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
PFNGLGETSYNCIVPROC glGetSynciv;
PFNGLGETTEXIMAGEPROC glGetTexImage;
PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
PFNGLGETTEXTUREHANDLEARBPROC glGetTextureHandleARB;
PFNGLGETTEXTUREHANDLENVPROC glGetTextureHandleNV;
PFNGLGETTEXTUREIMAGEEXTPROC glGetTextureImageEXT;
PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
PFNGLGETTEXTUREPARAMETERIIVEXTPROC glGetTextureParameterIivEXT;
PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glGetTextureParameterIuivEXT;
PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
PFNGLGETTEXTURESAMPLERHANDLEARBPROC glGetTextureSamplerHandleARB;
PFNGLGETTEXTURESAMPLERHANDLENVPROC glGetTextureSamplerHandleNV;
PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
PFNGLGETUNIFORMDVPROC glGetUniformdv;
PFNGLGETUNIFORMFVPROC glGetUniformfv;
PFNGLGETUNIFORMI64VARBPROC glGetUniformi64vARB;
PFNGLGETUNIFORMI64VNVPROC glGetUniformi64vNV;
PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
PFNGLGETUNIFORMIVPROC glGetUniformiv;
PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
PFNGLGETUNIFORMUI64VARBPROC glGetUniformui64vARB;
PFNGLGETUNIFORMUI64VNVPROC glGetUniformui64vNV;
PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glGetVertexArrayIntegeri_vEXT;
PFNGLGETVERTEXARRAYINTEGERVEXTPROC glGetVertexArrayIntegervEXT;
PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glGetVertexArrayPointeri_vEXT;
PFNGLGETVERTEXARRAYPOINTERVEXTPROC glGetVertexArrayPointervEXT;
PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
PFNGLGETVERTEXATTRIBLI64VNVPROC glGetVertexAttribLi64vNV;
PFNGLGETVERTEXATTRIBLUI64VARBPROC glGetVertexAttribLui64vARB;
PFNGLGETVERTEXATTRIBLUI64VNVPROC glGetVertexAttribLui64vNV;
PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
PFNGLGETVKPROCADDRNVPROC glGetVkProcAddrNV;
PFNGLHINTPROC glHint;
PFNGLINDEXFORMATNVPROC glIndexFormatNV;
PFNGLINSERTEVENTMARKEREXTPROC glInsertEventMarkerEXT;
PFNGLINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
PFNGLISBUFFERPROC glIsBuffer;
PFNGLISBUFFERRESIDENTNVPROC glIsBufferResidentNV;
PFNGLISCOMMANDLISTNVPROC glIsCommandListNV;
PFNGLISENABLEDINDEXEDEXTPROC glIsEnabledIndexedEXT;
PFNGLISENABLEDIPROC glIsEnabledi;
PFNGLISENABLEDPROC glIsEnabled;
PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
PFNGLISIMAGEHANDLERESIDENTARBPROC glIsImageHandleResidentARB;
PFNGLISIMAGEHANDLERESIDENTNVPROC glIsImageHandleResidentNV;
PFNGLISNAMEDBUFFERRESIDENTNVPROC glIsNamedBufferResidentNV;
PFNGLISNAMEDSTRINGARBPROC glIsNamedStringARB;
PFNGLISPATHNVPROC glIsPathNV;
PFNGLISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
PFNGLISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
PFNGLISPROGRAMPROC glIsProgram;
PFNGLISQUERYPROC glIsQuery;
PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
PFNGLISSAMPLERPROC glIsSampler;
PFNGLISSHADERPROC glIsShader;
PFNGLISSTATENVPROC glIsStateNV;
PFNGLISSYNCPROC glIsSync;
PFNGLISTEXTUREHANDLERESIDENTARBPROC glIsTextureHandleResidentARB;
PFNGLISTEXTUREHANDLERESIDENTNVPROC glIsTextureHandleResidentNV;
PFNGLISTEXTUREPROC glIsTexture;
PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
PFNGLISVERTEXARRAYPROC glIsVertexArray;
PFNGLLABELOBJECTEXTPROC glLabelObjectEXT;
PFNGLLINEWIDTHPROC glLineWidth;
PFNGLLINKPROGRAMPROC glLinkProgram;
PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glListDrawCommandsStatesClientNV;
PFNGLLOGICOPPROC glLogicOp;
PFNGLMAKEBUFFERNONRESIDENTNVPROC glMakeBufferNonResidentNV;
PFNGLMAKEBUFFERRESIDENTNVPROC glMakeBufferResidentNV;
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glMakeImageHandleNonResidentARB;
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glMakeImageHandleNonResidentNV;
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glMakeImageHandleResidentARB;
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glMakeImageHandleResidentNV;
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glMakeNamedBufferNonResidentNV;
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glMakeNamedBufferResidentNV;
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glMakeTextureHandleNonResidentARB;
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glMakeTextureHandleNonResidentNV;
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glMakeTextureHandleResidentARB;
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glMakeTextureHandleResidentNV;
PFNGLMAPBUFFERPROC glMapBuffer;
PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
PFNGLMAPNAMEDBUFFEREXTPROC glMapNamedBufferEXT;
PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
PFNGLMAPNAMEDBUFFERRANGEEXTPROC glMapNamedBufferRangeEXT;
PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
PFNGLMATRIXFRUSTUMEXTPROC glMatrixFrustumEXT;
PFNGLMATRIXLOAD3X2FNVPROC glMatrixLoad3x2fNV;
PFNGLMATRIXLOAD3X3FNVPROC glMatrixLoad3x3fNV;
PFNGLMATRIXLOADDEXTPROC glMatrixLoaddEXT;
PFNGLMATRIXLOADFEXTPROC glMatrixLoadfEXT;
PFNGLMATRIXLOADIDENTITYEXTPROC glMatrixLoadIdentityEXT;
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glMatrixLoadTranspose3x3fNV;
PFNGLMATRIXLOADTRANSPOSEDEXTPROC glMatrixLoadTransposedEXT;
PFNGLMATRIXLOADTRANSPOSEFEXTPROC glMatrixLoadTransposefEXT;
PFNGLMATRIXMULT3X2FNVPROC glMatrixMult3x2fNV;
PFNGLMATRIXMULT3X3FNVPROC glMatrixMult3x3fNV;
PFNGLMATRIXMULTDEXTPROC glMatrixMultdEXT;
PFNGLMATRIXMULTFEXTPROC glMatrixMultfEXT;
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glMatrixMultTranspose3x3fNV;
PFNGLMATRIXMULTTRANSPOSEDEXTPROC glMatrixMultTransposedEXT;
PFNGLMATRIXMULTTRANSPOSEFEXTPROC glMatrixMultTransposefEXT;
PFNGLMATRIXORTHOEXTPROC glMatrixOrthoEXT;
PFNGLMATRIXPOPEXTPROC glMatrixPopEXT;
PFNGLMATRIXPUSHEXTPROC glMatrixPushEXT;
PFNGLMATRIXROTATEDEXTPROC glMatrixRotatedEXT;
PFNGLMATRIXROTATEFEXTPROC glMatrixRotatefEXT;
PFNGLMATRIXSCALEDEXTPROC glMatrixScaledEXT;
PFNGLMATRIXSCALEFEXTPROC glMatrixScalefEXT;
PFNGLMATRIXTRANSLATEDEXTPROC glMatrixTranslatedEXT;
PFNGLMATRIXTRANSLATEFEXTPROC glMatrixTranslatefEXT;
PFNGLMAXSHADERCOMPILERTHREADSARBPROC glMaxShaderCompilerThreadsARB;
PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
PFNGLMEMORYBARRIERPROC glMemoryBarrier;
PFNGLMINSAMPLESHADINGARBPROC glMinSampleShadingARB;
PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawArraysIndirectBindlessCountNV;
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glMultiDrawArraysIndirectBindlessNV;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glMultiDrawArraysIndirectCountARB;
PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawElementsIndirectBindlessCountNV;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glMultiDrawElementsIndirectBindlessNV;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glMultiDrawElementsIndirectCountARB;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
PFNGLMULTITEXBUFFEREXTPROC glMultiTexBufferEXT;
PFNGLMULTITEXCOORDPOINTEREXTPROC glMultiTexCoordPointerEXT;
PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
PFNGLMULTITEXGENDEXTPROC glMultiTexGendEXT;
PFNGLMULTITEXGENDVEXTPROC glMultiTexGendvEXT;
PFNGLMULTITEXGENFEXTPROC glMultiTexGenfEXT;
PFNGLMULTITEXGENFVEXTPROC glMultiTexGenfvEXT;
PFNGLMULTITEXGENIEXTPROC glMultiTexGeniEXT;
PFNGLMULTITEXGENIVEXTPROC glMultiTexGenivEXT;
PFNGLMULTITEXIMAGE1DEXTPROC glMultiTexImage1DEXT;
PFNGLMULTITEXIMAGE2DEXTPROC glMultiTexImage2DEXT;
PFNGLMULTITEXIMAGE3DEXTPROC glMultiTexImage3DEXT;
PFNGLMULTITEXPARAMETERFEXTPROC glMultiTexParameterfEXT;
PFNGLMULTITEXPARAMETERFVEXTPROC glMultiTexParameterfvEXT;
PFNGLMULTITEXPARAMETERIEXTPROC glMultiTexParameteriEXT;
PFNGLMULTITEXPARAMETERIIVEXTPROC glMultiTexParameterIivEXT;
PFNGLMULTITEXPARAMETERIUIVEXTPROC glMultiTexParameterIuivEXT;
PFNGLMULTITEXPARAMETERIVEXTPROC glMultiTexParameterivEXT;
PFNGLMULTITEXRENDERBUFFEREXTPROC glMultiTexRenderbufferEXT;
PFNGLMULTITEXSUBIMAGE1DEXTPROC glMultiTexSubImage1DEXT;
PFNGLMULTITEXSUBIMAGE2DEXTPROC glMultiTexSubImage2DEXT;
PFNGLMULTITEXSUBIMAGE3DEXTPROC glMultiTexSubImage3DEXT;
PFNGLNAMEDBUFFERDATAEXTPROC glNamedBufferDataEXT;
PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glNamedBufferPageCommitmentARB;
PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glNamedBufferPageCommitmentEXT;
PFNGLNAMEDBUFFERSTORAGEEXTPROC glNamedBufferStorageEXT;
PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
PFNGLNAMEDBUFFERSUBDATAEXTPROC glNamedBufferSubDataEXT;
PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glNamedCopyBufferSubDataEXT;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glNamedFramebufferParameteriEXT;
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glNamedFramebufferRenderbufferEXT;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glNamedFramebufferSampleLocationsfvARB;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glNamedFramebufferSampleLocationsfvNV;
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glNamedFramebufferTexture1DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glNamedFramebufferTexture2DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glNamedFramebufferTexture3DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glNamedFramebufferTextureEXT;
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glNamedFramebufferTextureFaceEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glNamedFramebufferTextureLayerEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glNamedProgramLocalParameter4dEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glNamedProgramLocalParameter4dvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glNamedProgramLocalParameter4fEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glNamedProgramLocalParameter4fvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glNamedProgramLocalParameterI4iEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glNamedProgramLocalParameterI4ivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glNamedProgramLocalParameterI4uiEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glNamedProgramLocalParameterI4uivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glNamedProgramLocalParameters4fvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glNamedProgramLocalParametersI4ivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glNamedProgramLocalParametersI4uivEXT;
PFNGLNAMEDPROGRAMSTRINGEXTPROC glNamedProgramStringEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glNamedRenderbufferStorageEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glNamedRenderbufferStorageMultisampleCoverageEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glNamedRenderbufferStorageMultisampleEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
PFNGLNAMEDSTRINGARBPROC glNamedStringARB;
PFNGLNORMALFORMATNVPROC glNormalFormatNV;
PFNGLOBJECTLABELPROC glObjectLabel;
PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
PFNGLPATCHPARAMETERIPROC glPatchParameteri;
PFNGLPATHCOMMANDSNVPROC glPathCommandsNV;
PFNGLPATHCOORDSNVPROC glPathCoordsNV;
PFNGLPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
PFNGLPATHDASHARRAYNVPROC glPathDashArrayNV;
PFNGLPATHGLYPHINDEXARRAYNVPROC glPathGlyphIndexArrayNV;
PFNGLPATHGLYPHINDEXRANGENVPROC glPathGlyphIndexRangeNV;
PFNGLPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
PFNGLPATHGLYPHSNVPROC glPathGlyphsNV;
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glPathMemoryGlyphIndexArrayNV;
PFNGLPATHPARAMETERFNVPROC glPathParameterfNV;
PFNGLPATHPARAMETERFVNVPROC glPathParameterfvNV;
PFNGLPATHPARAMETERINVPROC glPathParameteriNV;
PFNGLPATHPARAMETERIVNVPROC glPathParameterivNV;
PFNGLPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
PFNGLPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
PFNGLPATHSTRINGNVPROC glPathStringNV;
PFNGLPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
PFNGLPATHSUBCOORDSNVPROC glPathSubCoordsNV;
PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
PFNGLPIXELSTOREFPROC glPixelStoref;
PFNGLPIXELSTOREIPROC glPixelStorei;
PFNGLPOINTALONGPATHNVPROC glPointAlongPathNV;
PFNGLPOINTPARAMETERFPROC glPointParameterf;
PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
PFNGLPOINTPARAMETERIPROC glPointParameteri;
PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
PFNGLPOINTSIZEPROC glPointSize;
PFNGLPOLYGONMODEPROC glPolygonMode;
PFNGLPOLYGONOFFSETCLAMPEXTPROC glPolygonOffsetClampEXT;
PFNGLPOLYGONOFFSETPROC glPolygonOffset;
PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
PFNGLPOPGROUPMARKEREXTPROC glPopGroupMarkerEXT;
PFNGLPRIMITIVEBOUNDINGBOXARBPROC glPrimitiveBoundingBoxARB;
PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
PFNGLPROGRAMBINARYPROC glProgramBinary;
PFNGLPROGRAMPARAMETERIARBPROC glProgramParameteriARB;
PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glProgramPathFragmentInputGenNV;
PFNGLPROGRAMUNIFORM1DEXTPROC glProgramUniform1dEXT;
PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
PFNGLPROGRAMUNIFORM1DVEXTPROC glProgramUniform1dvEXT;
PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
PFNGLPROGRAMUNIFORM1FEXTPROC glProgramUniform1fEXT;
PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
PFNGLPROGRAMUNIFORM1FVEXTPROC glProgramUniform1fvEXT;
PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
PFNGLPROGRAMUNIFORM1I64ARBPROC glProgramUniform1i64ARB;
PFNGLPROGRAMUNIFORM1I64NVPROC glProgramUniform1i64NV;
PFNGLPROGRAMUNIFORM1I64VARBPROC glProgramUniform1i64vARB;
PFNGLPROGRAMUNIFORM1I64VNVPROC glProgramUniform1i64vNV;
PFNGLPROGRAMUNIFORM1IEXTPROC glProgramUniform1iEXT;
PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
PFNGLPROGRAMUNIFORM1IVEXTPROC glProgramUniform1ivEXT;
PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
PFNGLPROGRAMUNIFORM1UI64ARBPROC glProgramUniform1ui64ARB;
PFNGLPROGRAMUNIFORM1UI64NVPROC glProgramUniform1ui64NV;
PFNGLPROGRAMUNIFORM1UI64VARBPROC glProgramUniform1ui64vARB;
PFNGLPROGRAMUNIFORM1UI64VNVPROC glProgramUniform1ui64vNV;
PFNGLPROGRAMUNIFORM1UIEXTPROC glProgramUniform1uiEXT;
PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
PFNGLPROGRAMUNIFORM1UIVEXTPROC glProgramUniform1uivEXT;
PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
PFNGLPROGRAMUNIFORM2DEXTPROC glProgramUniform2dEXT;
PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
PFNGLPROGRAMUNIFORM2DVEXTPROC glProgramUniform2dvEXT;
PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
PFNGLPROGRAMUNIFORM2FEXTPROC glProgramUniform2fEXT;
PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
PFNGLPROGRAMUNIFORM2FVEXTPROC glProgramUniform2fvEXT;
PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
PFNGLPROGRAMUNIFORM2I64ARBPROC glProgramUniform2i64ARB;
PFNGLPROGRAMUNIFORM2I64NVPROC glProgramUniform2i64NV;
PFNGLPROGRAMUNIFORM2I64VARBPROC glProgramUniform2i64vARB;
PFNGLPROGRAMUNIFORM2I64VNVPROC glProgramUniform2i64vNV;
PFNGLPROGRAMUNIFORM2IEXTPROC glProgramUniform2iEXT;
PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
PFNGLPROGRAMUNIFORM2IVEXTPROC glProgramUniform2ivEXT;
PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
PFNGLPROGRAMUNIFORM2UI64ARBPROC glProgramUniform2ui64ARB;
PFNGLPROGRAMUNIFORM2UI64NVPROC glProgramUniform2ui64NV;
PFNGLPROGRAMUNIFORM2UI64VARBPROC glProgramUniform2ui64vARB;
PFNGLPROGRAMUNIFORM2UI64VNVPROC glProgramUniform2ui64vNV;
PFNGLPROGRAMUNIFORM2UIEXTPROC glProgramUniform2uiEXT;
PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
PFNGLPROGRAMUNIFORM2UIVEXTPROC glProgramUniform2uivEXT;
PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
PFNGLPROGRAMUNIFORM3DEXTPROC glProgramUniform3dEXT;
PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
PFNGLPROGRAMUNIFORM3DVEXTPROC glProgramUniform3dvEXT;
PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
PFNGLPROGRAMUNIFORM3FEXTPROC glProgramUniform3fEXT;
PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
PFNGLPROGRAMUNIFORM3FVEXTPROC glProgramUniform3fvEXT;
PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
PFNGLPROGRAMUNIFORM3I64ARBPROC glProgramUniform3i64ARB;
PFNGLPROGRAMUNIFORM3I64NVPROC glProgramUniform3i64NV;
PFNGLPROGRAMUNIFORM3I64VARBPROC glProgramUniform3i64vARB;
PFNGLPROGRAMUNIFORM3I64VNVPROC glProgramUniform3i64vNV;
PFNGLPROGRAMUNIFORM3IEXTPROC glProgramUniform3iEXT;
PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
PFNGLPROGRAMUNIFORM3IVEXTPROC glProgramUniform3ivEXT;
PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
PFNGLPROGRAMUNIFORM3UI64ARBPROC glProgramUniform3ui64ARB;
PFNGLPROGRAMUNIFORM3UI64NVPROC glProgramUniform3ui64NV;
PFNGLPROGRAMUNIFORM3UI64VARBPROC glProgramUniform3ui64vARB;
PFNGLPROGRAMUNIFORM3UI64VNVPROC glProgramUniform3ui64vNV;
PFNGLPROGRAMUNIFORM3UIEXTPROC glProgramUniform3uiEXT;
PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
PFNGLPROGRAMUNIFORM3UIVEXTPROC glProgramUniform3uivEXT;
PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
PFNGLPROGRAMUNIFORM4DEXTPROC glProgramUniform4dEXT;
PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
PFNGLPROGRAMUNIFORM4DVEXTPROC glProgramUniform4dvEXT;
PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
PFNGLPROGRAMUNIFORM4FEXTPROC glProgramUniform4fEXT;
PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
PFNGLPROGRAMUNIFORM4FVEXTPROC glProgramUniform4fvEXT;
PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
PFNGLPROGRAMUNIFORM4I64ARBPROC glProgramUniform4i64ARB;
PFNGLPROGRAMUNIFORM4I64NVPROC glProgramUniform4i64NV;
PFNGLPROGRAMUNIFORM4I64VARBPROC glProgramUniform4i64vARB;
PFNGLPROGRAMUNIFORM4I64VNVPROC glProgramUniform4i64vNV;
PFNGLPROGRAMUNIFORM4IEXTPROC glProgramUniform4iEXT;
PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
PFNGLPROGRAMUNIFORM4IVEXTPROC glProgramUniform4ivEXT;
PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
PFNGLPROGRAMUNIFORM4UI64ARBPROC glProgramUniform4ui64ARB;
PFNGLPROGRAMUNIFORM4UI64NVPROC glProgramUniform4ui64NV;
PFNGLPROGRAMUNIFORM4UI64VARBPROC glProgramUniform4ui64vARB;
PFNGLPROGRAMUNIFORM4UI64VNVPROC glProgramUniform4ui64vNV;
PFNGLPROGRAMUNIFORM4UIEXTPROC glProgramUniform4uiEXT;
PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
PFNGLPROGRAMUNIFORM4UIVEXTPROC glProgramUniform4uivEXT;
PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glProgramUniformHandleui64ARB;
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glProgramUniformHandleui64NV;
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glProgramUniformHandleui64vARB;
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glProgramUniformHandleui64vNV;
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glProgramUniformMatrix2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glProgramUniformMatrix2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glProgramUniformMatrix2x3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glProgramUniformMatrix2x3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glProgramUniformMatrix2x4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glProgramUniformMatrix2x4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glProgramUniformMatrix3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glProgramUniformMatrix3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glProgramUniformMatrix3x2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glProgramUniformMatrix3x2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glProgramUniformMatrix3x4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glProgramUniformMatrix3x4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glProgramUniformMatrix4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glProgramUniformMatrix4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glProgramUniformMatrix4x2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glProgramUniformMatrix4x2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glProgramUniformMatrix4x3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glProgramUniformMatrix4x3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
PFNGLPROGRAMUNIFORMUI64NVPROC glProgramUniformui64NV;
PFNGLPROGRAMUNIFORMUI64VNVPROC glProgramUniformui64vNV;
PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glPushClientAttribDefaultEXT;
PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
PFNGLPUSHGROUPMARKEREXTPROC glPushGroupMarkerEXT;
PFNGLQUERYCOUNTERPROC glQueryCounter;
PFNGLRASTERSAMPLESEXTPROC glRasterSamplesEXT;
PFNGLREADBUFFERPROC glReadBuffer;
PFNGLREADNPIXELSARBPROC glReadnPixelsARB;
PFNGLREADNPIXELSPROC glReadnPixels;
PFNGLREADPIXELSPROC glReadPixels;
PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glRenderbufferStorageMultisampleCoverageNV;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
PFNGLRESOLVEDEPTHVALUESNVPROC glResolveDepthValuesNV;
PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
PFNGLSAMPLEMASKIPROC glSampleMaski;
PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
PFNGLSCISSORARRAYVPROC glScissorArrayv;
PFNGLSCISSORINDEXEDPROC glScissorIndexed;
PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
PFNGLSCISSORPROC glScissor;
PFNGLSECONDARYCOLORFORMATNVPROC glSecondaryColorFormatNV;
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glSelectPerfMonitorCountersAMD;
PFNGLSHADERBINARYPROC glShaderBinary;
PFNGLSHADERSOURCEPROC glShaderSource;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
PFNGLSIGNALVKFENCENVPROC glSignalVkFenceNV;
PFNGLSIGNALVKSEMAPHORENVPROC glSignalVkSemaphoreNV;
PFNGLSPECIALIZESHADERARBPROC glSpecializeShaderARB;
PFNGLSTATECAPTURENVPROC glStateCaptureNV;
PFNGLSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
PFNGLSTENCILFILLPATHNVPROC glStencilFillPathNV;
PFNGLSTENCILFUNCPROC glStencilFunc;
PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
PFNGLSTENCILMASKPROC glStencilMask;
PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
PFNGLSTENCILOPPROC glStencilOp;
PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
PFNGLSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glStencilThenCoverFillPathInstancedNV;
PFNGLSTENCILTHENCOVERFILLPATHNVPROC glStencilThenCoverFillPathNV;
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glStencilThenCoverStrokePathInstancedNV;
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glStencilThenCoverStrokePathNV;
PFNGLSUBPIXELPRECISIONBIASNVPROC glSubpixelPrecisionBiasNV;
PFNGLTEXBUFFERARBPROC glTexBufferARB;
PFNGLTEXBUFFERPROC glTexBuffer;
PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
PFNGLTEXCOORDFORMATNVPROC glTexCoordFormatNV;
PFNGLTEXIMAGE1DPROC glTexImage1D;
PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
PFNGLTEXIMAGE2DPROC glTexImage2D;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
PFNGLTEXIMAGE3DPROC glTexImage3D;
PFNGLTEXPAGECOMMITMENTARBPROC glTexPageCommitmentARB;
PFNGLTEXPARAMETERFPROC glTexParameterf;
PFNGLTEXPARAMETERFVPROC glTexParameterfv;
PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
PFNGLTEXPARAMETERIPROC glTexParameteri;
PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
PFNGLTEXPARAMETERIVPROC glTexParameteriv;
PFNGLTEXSTORAGE1DPROC glTexStorage1D;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
PFNGLTEXSTORAGE2DPROC glTexStorage2D;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
PFNGLTEXSTORAGE3DPROC glTexStorage3D;
PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D;
PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D;
PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
PFNGLTEXTUREBARRIERNVPROC glTextureBarrierNV;
PFNGLTEXTUREBARRIERPROC glTextureBarrier;
PFNGLTEXTUREBUFFEREXTPROC glTextureBufferEXT;
PFNGLTEXTUREBUFFERPROC glTextureBuffer;
PFNGLTEXTUREBUFFERRANGEEXTPROC glTextureBufferRangeEXT;
PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
PFNGLTEXTUREIMAGE1DEXTPROC glTextureImage1DEXT;
PFNGLTEXTUREIMAGE2DEXTPROC glTextureImage2DEXT;
PFNGLTEXTUREIMAGE3DEXTPROC glTextureImage3DEXT;
PFNGLTEXTUREPAGECOMMITMENTEXTPROC glTexturePageCommitmentEXT;
PFNGLTEXTUREPARAMETERFEXTPROC glTextureParameterfEXT;
PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
PFNGLTEXTUREPARAMETERFVEXTPROC glTextureParameterfvEXT;
PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
PFNGLTEXTUREPARAMETERIEXTPROC glTextureParameteriEXT;
PFNGLTEXTUREPARAMETERIIVEXTPROC glTextureParameterIivEXT;
PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
PFNGLTEXTUREPARAMETERIUIVEXTPROC glTextureParameterIuivEXT;
PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
PFNGLTEXTUREPARAMETERIVEXTPROC glTextureParameterivEXT;
PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
PFNGLTEXTURERENDERBUFFEREXTPROC glTextureRenderbufferEXT;
PFNGLTEXTURESTORAGE1DEXTPROC glTextureStorage1DEXT;
PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
PFNGLTEXTURESTORAGE2DEXTPROC glTextureStorage2DEXT;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glTextureStorage2DMultisampleEXT;
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
PFNGLTEXTURESTORAGE3DEXTPROC glTextureStorage3DEXT;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glTextureStorage3DMultisampleEXT;
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
PFNGLTEXTURESUBIMAGE1DEXTPROC glTextureSubImage1DEXT;
PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
PFNGLTEXTURESUBIMAGE2DEXTPROC glTextureSubImage2DEXT;
PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
PFNGLTEXTURESUBIMAGE3DEXTPROC glTextureSubImage3DEXT;
PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
PFNGLTEXTUREVIEWPROC glTextureView;
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
PFNGLTRANSFORMPATHNVPROC glTransformPathNV;
PFNGLUNIFORM1DPROC glUniform1d;
PFNGLUNIFORM1DVPROC glUniform1dv;
PFNGLUNIFORM1FPROC glUniform1f;
PFNGLUNIFORM1FVPROC glUniform1fv;
PFNGLUNIFORM1I64ARBPROC glUniform1i64ARB;
PFNGLUNIFORM1I64NVPROC glUniform1i64NV;
PFNGLUNIFORM1I64VARBPROC glUniform1i64vARB;
PFNGLUNIFORM1I64VNVPROC glUniform1i64vNV;
PFNGLUNIFORM1IPROC glUniform1i;
PFNGLUNIFORM1IVPROC glUniform1iv;
PFNGLUNIFORM1UI64ARBPROC glUniform1ui64ARB;
PFNGLUNIFORM1UI64NVPROC glUniform1ui64NV;
PFNGLUNIFORM1UI64VARBPROC glUniform1ui64vARB;
PFNGLUNIFORM1UI64VNVPROC glUniform1ui64vNV;
PFNGLUNIFORM1UIPROC glUniform1ui;
PFNGLUNIFORM1UIVPROC glUniform1uiv;
PFNGLUNIFORM2DPROC glUniform2d;
PFNGLUNIFORM2DVPROC glUniform2dv;
PFNGLUNIFORM2FPROC glUniform2f;
PFNGLUNIFORM2FVPROC glUniform2fv;
PFNGLUNIFORM2I64ARBPROC glUniform2i64ARB;
PFNGLUNIFORM2I64NVPROC glUniform2i64NV;
PFNGLUNIFORM2I64VARBPROC glUniform2i64vARB;
PFNGLUNIFORM2I64VNVPROC glUniform2i64vNV;
PFNGLUNIFORM2IPROC glUniform2i;
PFNGLUNIFORM2IVPROC glUniform2iv;
PFNGLUNIFORM2UI64ARBPROC glUniform2ui64ARB;
PFNGLUNIFORM2UI64NVPROC glUniform2ui64NV;
PFNGLUNIFORM2UI64VARBPROC glUniform2ui64vARB;
PFNGLUNIFORM2UI64VNVPROC glUniform2ui64vNV;
PFNGLUNIFORM2UIPROC glUniform2ui;
PFNGLUNIFORM2UIVPROC glUniform2uiv;
PFNGLUNIFORM3DPROC glUniform3d;
PFNGLUNIFORM3DVPROC glUniform3dv;
PFNGLUNIFORM3FPROC glUniform3f;
PFNGLUNIFORM3FVPROC glUniform3fv;
PFNGLUNIFORM3I64ARBPROC glUniform3i64ARB;
PFNGLUNIFORM3I64NVPROC glUniform3i64NV;
PFNGLUNIFORM3I64VARBPROC glUniform3i64vARB;
PFNGLUNIFORM3I64VNVPROC glUniform3i64vNV;
PFNGLUNIFORM3IPROC glUniform3i;
PFNGLUNIFORM3IVPROC glUniform3iv;
PFNGLUNIFORM3UI64ARBPROC glUniform3ui64ARB;
PFNGLUNIFORM3UI64NVPROC glUniform3ui64NV;
PFNGLUNIFORM3UI64VARBPROC glUniform3ui64vARB;
PFNGLUNIFORM3UI64VNVPROC glUniform3ui64vNV;
PFNGLUNIFORM3UIPROC glUniform3ui;
PFNGLUNIFORM3UIVPROC glUniform3uiv;
PFNGLUNIFORM4DPROC glUniform4d;
PFNGLUNIFORM4DVPROC glUniform4dv;
PFNGLUNIFORM4FPROC glUniform4f;
PFNGLUNIFORM4FVPROC glUniform4fv;
PFNGLUNIFORM4I64ARBPROC glUniform4i64ARB;
PFNGLUNIFORM4I64NVPROC glUniform4i64NV;
PFNGLUNIFORM4I64VARBPROC glUniform4i64vARB;
PFNGLUNIFORM4I64VNVPROC glUniform4i64vNV;
PFNGLUNIFORM4IPROC glUniform4i;
PFNGLUNIFORM4IVPROC glUniform4iv;
PFNGLUNIFORM4UI64ARBPROC glUniform4ui64ARB;
PFNGLUNIFORM4UI64NVPROC glUniform4ui64NV;
PFNGLUNIFORM4UI64VARBPROC glUniform4ui64vARB;
PFNGLUNIFORM4UI64VNVPROC glUniform4ui64vNV;
PFNGLUNIFORM4UIPROC glUniform4ui;
PFNGLUNIFORM4UIVPROC glUniform4uiv;
PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
PFNGLUNIFORMHANDLEUI64ARBPROC glUniformHandleui64ARB;
PFNGLUNIFORMHANDLEUI64NVPROC glUniformHandleui64NV;
PFNGLUNIFORMHANDLEUI64VARBPROC glUniformHandleui64vARB;
PFNGLUNIFORMHANDLEUI64VNVPROC glUniformHandleui64vNV;
PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;
PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
PFNGLUNIFORMUI64NVPROC glUniformui64NV;
PFNGLUNIFORMUI64VNVPROC glUniformui64vNV;
PFNGLUNMAPBUFFERPROC glUnmapBuffer;
PFNGLUNMAPNAMEDBUFFEREXTPROC glUnmapNamedBufferEXT;
PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
PFNGLUSEPROGRAMPROC glUseProgram;
PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
PFNGLUSESHADERPROGRAMEXTPROC glUseShaderProgramEXT;
PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
PFNGLVALIDATEPROGRAMPROC glValidateProgram;
PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glVertexArrayBindVertexBufferEXT;
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glVertexArrayColorOffsetEXT;
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glVertexArrayEdgeFlagOffsetEXT;
PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glVertexArrayFogCoordOffsetEXT;
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glVertexArrayIndexOffsetEXT;
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glVertexArrayMultiTexCoordOffsetEXT;
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glVertexArrayNormalOffsetEXT;
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glVertexArraySecondaryColorOffsetEXT;
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glVertexArrayTexCoordOffsetEXT;
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glVertexArrayVertexAttribBindingEXT;
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glVertexArrayVertexAttribDivisorEXT;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glVertexArrayVertexAttribFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glVertexArrayVertexAttribIFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glVertexArrayVertexAttribIOffsetEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glVertexArrayVertexAttribLFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glVertexArrayVertexAttribLOffsetEXT;
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glVertexArrayVertexAttribOffsetEXT;
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glVertexArrayVertexBindingDivisorEXT;
PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glVertexArrayVertexOffsetEXT;
PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
PFNGLVERTEXATTRIBDIVISORARBPROC glVertexAttribDivisorARB;
PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
PFNGLVERTEXATTRIBFORMATNVPROC glVertexAttribFormatNV;
PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
PFNGLVERTEXATTRIBIFORMATNVPROC glVertexAttribIFormatNV;
PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
PFNGLVERTEXATTRIBL1I64NVPROC glVertexAttribL1i64NV;
PFNGLVERTEXATTRIBL1I64VNVPROC glVertexAttribL1i64vNV;
PFNGLVERTEXATTRIBL1UI64ARBPROC glVertexAttribL1ui64ARB;
PFNGLVERTEXATTRIBL1UI64NVPROC glVertexAttribL1ui64NV;
PFNGLVERTEXATTRIBL1UI64VARBPROC glVertexAttribL1ui64vARB;
PFNGLVERTEXATTRIBL1UI64VNVPROC glVertexAttribL1ui64vNV;
PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
PFNGLVERTEXATTRIBL2I64NVPROC glVertexAttribL2i64NV;
PFNGLVERTEXATTRIBL2I64VNVPROC glVertexAttribL2i64vNV;
PFNGLVERTEXATTRIBL2UI64NVPROC glVertexAttribL2ui64NV;
PFNGLVERTEXATTRIBL2UI64VNVPROC glVertexAttribL2ui64vNV;
PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
PFNGLVERTEXATTRIBL3I64NVPROC glVertexAttribL3i64NV;
PFNGLVERTEXATTRIBL3I64VNVPROC glVertexAttribL3i64vNV;
PFNGLVERTEXATTRIBL3UI64NVPROC glVertexAttribL3ui64NV;
PFNGLVERTEXATTRIBL3UI64VNVPROC glVertexAttribL3ui64vNV;
PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
PFNGLVERTEXATTRIBL4I64NVPROC glVertexAttribL4i64NV;
PFNGLVERTEXATTRIBL4I64VNVPROC glVertexAttribL4i64vNV;
PFNGLVERTEXATTRIBL4UI64NVPROC glVertexAttribL4ui64NV;
PFNGLVERTEXATTRIBL4UI64VNVPROC glVertexAttribL4ui64vNV;
PFNGLVERTEXATTRIBLFORMATNVPROC glVertexAttribLFormatNV;
PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
PFNGLVERTEXFORMATNVPROC glVertexFormatNV;
PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
PFNGLVIEWPORTPOSITIONWSCALENVPROC glViewportPositionWScaleNV;
PFNGLVIEWPORTPROC glViewport;
PFNGLVIEWPORTSWIZZLENVPROC glViewportSwizzleNV;
PFNGLWAITSYNCPROC glWaitSync;
PFNGLWAITVKSEMAPHORENVPROC glWaitVkSemaphoreNV;
PFNGLWEIGHTPATHSNVPROC glWeightPathsNV;
PFNGLWINDOWRECTANGLESEXTPROC glWindowRectanglesEXT;
#endif

// 使用している GPU のバッファアライメント
GLint gg::ggBufferAlignment(0);

/*
** ゲームグラフィックス特論の都合にもとづく初期化を行う
**
**   Windows で OpenGL 1.2 以降の API を有効化する
*/
void gg::ggInit()
{
  // すでにこの関数が実行されていたら以降の処理を行わない
  if (ggBufferAlignment) return;

#if defined(_WIN32)
  // OpenGL 1.2 以降の API を有効化する
  glActiveProgramEXT = PFNGLACTIVEPROGRAMEXTPROC(glfwGetProcAddress("glActiveProgramEXT"));
  glActiveShaderProgram = PFNGLACTIVESHADERPROGRAMPROC(glfwGetProcAddress("glActiveShaderProgram"));
  glActiveTexture = PFNGLACTIVETEXTUREPROC(glfwGetProcAddress("glActiveTexture"));
  glApplyFramebufferAttachmentCMAAINTEL = PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC(glfwGetProcAddress("glApplyFramebufferAttachmentCMAAINTEL"));
  glAttachShader = PFNGLATTACHSHADERPROC(glfwGetProcAddress("glAttachShader"));
  glBeginConditionalRender = PFNGLBEGINCONDITIONALRENDERPROC(glfwGetProcAddress("glBeginConditionalRender"));
  glBeginConditionalRenderNV = PFNGLBEGINCONDITIONALRENDERNVPROC(glfwGetProcAddress("glBeginConditionalRenderNV"));
  glBeginPerfMonitorAMD = PFNGLBEGINPERFMONITORAMDPROC(glfwGetProcAddress("glBeginPerfMonitorAMD"));
  glBeginPerfQueryINTEL = PFNGLBEGINPERFQUERYINTELPROC(glfwGetProcAddress("glBeginPerfQueryINTEL"));
  glBeginQuery = PFNGLBEGINQUERYPROC(glfwGetProcAddress("glBeginQuery"));
  glBeginQueryIndexed = PFNGLBEGINQUERYINDEXEDPROC(glfwGetProcAddress("glBeginQueryIndexed"));
  glBeginTransformFeedback = PFNGLBEGINTRANSFORMFEEDBACKPROC(glfwGetProcAddress("glBeginTransformFeedback"));
  glBindAttribLocation = PFNGLBINDATTRIBLOCATIONPROC(glfwGetProcAddress("glBindAttribLocation"));
  glBindBuffer = PFNGLBINDBUFFERPROC(glfwGetProcAddress("glBindBuffer"));
  glBindBufferBase = PFNGLBINDBUFFERBASEPROC(glfwGetProcAddress("glBindBufferBase"));
  glBindBufferRange = PFNGLBINDBUFFERRANGEPROC(glfwGetProcAddress("glBindBufferRange"));
  glBindBuffersBase = PFNGLBINDBUFFERSBASEPROC(glfwGetProcAddress("glBindBuffersBase"));
  glBindBuffersRange = PFNGLBINDBUFFERSRANGEPROC(glfwGetProcAddress("glBindBuffersRange"));
  glBindFragDataLocation = PFNGLBINDFRAGDATALOCATIONPROC(glfwGetProcAddress("glBindFragDataLocation"));
  glBindFragDataLocationIndexed = PFNGLBINDFRAGDATALOCATIONINDEXEDPROC(glfwGetProcAddress("glBindFragDataLocationIndexed"));
  glBindFramebuffer = PFNGLBINDFRAMEBUFFERPROC(glfwGetProcAddress("glBindFramebuffer"));
  glBindImageTexture = PFNGLBINDIMAGETEXTUREPROC(glfwGetProcAddress("glBindImageTexture"));
  glBindImageTextures = PFNGLBINDIMAGETEXTURESPROC(glfwGetProcAddress("glBindImageTextures"));
  glBindMultiTextureEXT = PFNGLBINDMULTITEXTUREEXTPROC(glfwGetProcAddress("glBindMultiTextureEXT"));
  glBindProgramPipeline = PFNGLBINDPROGRAMPIPELINEPROC(glfwGetProcAddress("glBindProgramPipeline"));
  glBindRenderbuffer = PFNGLBINDRENDERBUFFERPROC(glfwGetProcAddress("glBindRenderbuffer"));
  glBindSampler = PFNGLBINDSAMPLERPROC(glfwGetProcAddress("glBindSampler"));
  glBindSamplers = PFNGLBINDSAMPLERSPROC(glfwGetProcAddress("glBindSamplers"));
  glBindTexture = PFNGLBINDTEXTUREPROC(glfwGetProcAddress("glBindTexture"));
  glBindTextureUnit = PFNGLBINDTEXTUREUNITPROC(glfwGetProcAddress("glBindTextureUnit"));
  glBindTextures = PFNGLBINDTEXTURESPROC(glfwGetProcAddress("glBindTextures"));
  glBindTransformFeedback = PFNGLBINDTRANSFORMFEEDBACKPROC(glfwGetProcAddress("glBindTransformFeedback"));
  glBindVertexArray = PFNGLBINDVERTEXARRAYPROC(glfwGetProcAddress("glBindVertexArray"));
  glBindVertexBuffer = PFNGLBINDVERTEXBUFFERPROC(glfwGetProcAddress("glBindVertexBuffer"));
  glBindVertexBuffers = PFNGLBINDVERTEXBUFFERSPROC(glfwGetProcAddress("glBindVertexBuffers"));
  glBlendBarrierKHR = PFNGLBLENDBARRIERKHRPROC(glfwGetProcAddress("glBlendBarrierKHR"));
  glBlendBarrierNV = PFNGLBLENDBARRIERNVPROC(glfwGetProcAddress("glBlendBarrierNV"));
  glBlendColor = PFNGLBLENDCOLORPROC(glfwGetProcAddress("glBlendColor"));
  glBlendEquation = PFNGLBLENDEQUATIONPROC(glfwGetProcAddress("glBlendEquation"));
  glBlendEquationSeparate = PFNGLBLENDEQUATIONSEPARATEPROC(glfwGetProcAddress("glBlendEquationSeparate"));
  glBlendEquationSeparatei = PFNGLBLENDEQUATIONSEPARATEIPROC(glfwGetProcAddress("glBlendEquationSeparatei"));
  glBlendEquationSeparateiARB = PFNGLBLENDEQUATIONSEPARATEIARBPROC(glfwGetProcAddress("glBlendEquationSeparateiARB"));
  glBlendEquationi = PFNGLBLENDEQUATIONIPROC(glfwGetProcAddress("glBlendEquationi"));
  glBlendEquationiARB = PFNGLBLENDEQUATIONIARBPROC(glfwGetProcAddress("glBlendEquationiARB"));
  glBlendFunc = PFNGLBLENDFUNCPROC(glfwGetProcAddress("glBlendFunc"));
  glBlendFuncSeparate = PFNGLBLENDFUNCSEPARATEPROC(glfwGetProcAddress("glBlendFuncSeparate"));
  glBlendFuncSeparatei = PFNGLBLENDFUNCSEPARATEIPROC(glfwGetProcAddress("glBlendFuncSeparatei"));
  glBlendFuncSeparateiARB = PFNGLBLENDFUNCSEPARATEIARBPROC(glfwGetProcAddress("glBlendFuncSeparateiARB"));
  glBlendFunci = PFNGLBLENDFUNCIPROC(glfwGetProcAddress("glBlendFunci"));
  glBlendFunciARB = PFNGLBLENDFUNCIARBPROC(glfwGetProcAddress("glBlendFunciARB"));
  glBlendParameteriNV = PFNGLBLENDPARAMETERINVPROC(glfwGetProcAddress("glBlendParameteriNV"));
  glBlitFramebuffer = PFNGLBLITFRAMEBUFFERPROC(glfwGetProcAddress("glBlitFramebuffer"));
  glBlitNamedFramebuffer = PFNGLBLITNAMEDFRAMEBUFFERPROC(glfwGetProcAddress("glBlitNamedFramebuffer"));
  glBufferAddressRangeNV = PFNGLBUFFERADDRESSRANGENVPROC(glfwGetProcAddress("glBufferAddressRangeNV"));
  glBufferData = PFNGLBUFFERDATAPROC(glfwGetProcAddress("glBufferData"));
  glBufferPageCommitmentARB = PFNGLBUFFERPAGECOMMITMENTARBPROC(glfwGetProcAddress("glBufferPageCommitmentARB"));
  glBufferStorage = PFNGLBUFFERSTORAGEPROC(glfwGetProcAddress("glBufferStorage"));
  glBufferSubData = PFNGLBUFFERSUBDATAPROC(glfwGetProcAddress("glBufferSubData"));
  glCallCommandListNV = PFNGLCALLCOMMANDLISTNVPROC(glfwGetProcAddress("glCallCommandListNV"));
  glCheckFramebufferStatus = PFNGLCHECKFRAMEBUFFERSTATUSPROC(glfwGetProcAddress("glCheckFramebufferStatus"));
  glCheckNamedFramebufferStatus = PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC(glfwGetProcAddress("glCheckNamedFramebufferStatus"));
  glCheckNamedFramebufferStatusEXT = PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC(glfwGetProcAddress("glCheckNamedFramebufferStatusEXT"));
  glClampColor = PFNGLCLAMPCOLORPROC(glfwGetProcAddress("glClampColor"));
  glClear = PFNGLCLEARPROC(glfwGetProcAddress("glClear"));
  glClearBufferData = PFNGLCLEARBUFFERDATAPROC(glfwGetProcAddress("glClearBufferData"));
  glClearBufferSubData = PFNGLCLEARBUFFERSUBDATAPROC(glfwGetProcAddress("glClearBufferSubData"));
  glClearBufferfi = PFNGLCLEARBUFFERFIPROC(glfwGetProcAddress("glClearBufferfi"));
  glClearBufferfv = PFNGLCLEARBUFFERFVPROC(glfwGetProcAddress("glClearBufferfv"));
  glClearBufferiv = PFNGLCLEARBUFFERIVPROC(glfwGetProcAddress("glClearBufferiv"));
  glClearBufferuiv = PFNGLCLEARBUFFERUIVPROC(glfwGetProcAddress("glClearBufferuiv"));
  glClearColor = PFNGLCLEARCOLORPROC(glfwGetProcAddress("glClearColor"));
  glClearDepth = PFNGLCLEARDEPTHPROC(glfwGetProcAddress("glClearDepth"));
  glClearDepthf = PFNGLCLEARDEPTHFPROC(glfwGetProcAddress("glClearDepthf"));
  glClearNamedBufferData = PFNGLCLEARNAMEDBUFFERDATAPROC(glfwGetProcAddress("glClearNamedBufferData"));
  glClearNamedBufferDataEXT = PFNGLCLEARNAMEDBUFFERDATAEXTPROC(glfwGetProcAddress("glClearNamedBufferDataEXT"));
  glClearNamedBufferSubData = PFNGLCLEARNAMEDBUFFERSUBDATAPROC(glfwGetProcAddress("glClearNamedBufferSubData"));
  glClearNamedBufferSubDataEXT = PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC(glfwGetProcAddress("glClearNamedBufferSubDataEXT"));
  glClearNamedFramebufferfi = PFNGLCLEARNAMEDFRAMEBUFFERFIPROC(glfwGetProcAddress("glClearNamedFramebufferfi"));
  glClearNamedFramebufferfv = PFNGLCLEARNAMEDFRAMEBUFFERFVPROC(glfwGetProcAddress("glClearNamedFramebufferfv"));
  glClearNamedFramebufferiv = PFNGLCLEARNAMEDFRAMEBUFFERIVPROC(glfwGetProcAddress("glClearNamedFramebufferiv"));
  glClearNamedFramebufferuiv = PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC(glfwGetProcAddress("glClearNamedFramebufferuiv"));
  glClearStencil = PFNGLCLEARSTENCILPROC(glfwGetProcAddress("glClearStencil"));
  glClearTexImage = PFNGLCLEARTEXIMAGEPROC(glfwGetProcAddress("glClearTexImage"));
  glClearTexSubImage = PFNGLCLEARTEXSUBIMAGEPROC(glfwGetProcAddress("glClearTexSubImage"));
  glClientAttribDefaultEXT = PFNGLCLIENTATTRIBDEFAULTEXTPROC(glfwGetProcAddress("glClientAttribDefaultEXT"));
  glClientWaitSync = PFNGLCLIENTWAITSYNCPROC(glfwGetProcAddress("glClientWaitSync"));
  glClipControl = PFNGLCLIPCONTROLPROC(glfwGetProcAddress("glClipControl"));
  glColorFormatNV = PFNGLCOLORFORMATNVPROC(glfwGetProcAddress("glColorFormatNV"));
  glColorMask = PFNGLCOLORMASKPROC(glfwGetProcAddress("glColorMask"));
  glColorMaski = PFNGLCOLORMASKIPROC(glfwGetProcAddress("glColorMaski"));
  glCommandListSegmentsNV = PFNGLCOMMANDLISTSEGMENTSNVPROC(glfwGetProcAddress("glCommandListSegmentsNV"));
  glCompileCommandListNV = PFNGLCOMPILECOMMANDLISTNVPROC(glfwGetProcAddress("glCompileCommandListNV"));
  glCompileShader = PFNGLCOMPILESHADERPROC(glfwGetProcAddress("glCompileShader"));
  glCompileShaderIncludeARB = PFNGLCOMPILESHADERINCLUDEARBPROC(glfwGetProcAddress("glCompileShaderIncludeARB"));
  glCompressedMultiTexImage1DEXT = PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC(glfwGetProcAddress("glCompressedMultiTexImage1DEXT"));
  glCompressedMultiTexImage2DEXT = PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC(glfwGetProcAddress("glCompressedMultiTexImage2DEXT"));
  glCompressedMultiTexImage3DEXT = PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC(glfwGetProcAddress("glCompressedMultiTexImage3DEXT"));
  glCompressedMultiTexSubImage1DEXT = PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC(glfwGetProcAddress("glCompressedMultiTexSubImage1DEXT"));
  glCompressedMultiTexSubImage2DEXT = PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC(glfwGetProcAddress("glCompressedMultiTexSubImage2DEXT"));
  glCompressedMultiTexSubImage3DEXT = PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC(glfwGetProcAddress("glCompressedMultiTexSubImage3DEXT"));
  glCompressedTexImage1D = PFNGLCOMPRESSEDTEXIMAGE1DPROC(glfwGetProcAddress("glCompressedTexImage1D"));
  glCompressedTexImage2D = PFNGLCOMPRESSEDTEXIMAGE2DPROC(glfwGetProcAddress("glCompressedTexImage2D"));
  glCompressedTexImage3D = PFNGLCOMPRESSEDTEXIMAGE3DPROC(glfwGetProcAddress("glCompressedTexImage3D"));
  glCompressedTexSubImage1D = PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC(glfwGetProcAddress("glCompressedTexSubImage1D"));
  glCompressedTexSubImage2D = PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC(glfwGetProcAddress("glCompressedTexSubImage2D"));
  glCompressedTexSubImage3D = PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC(glfwGetProcAddress("glCompressedTexSubImage3D"));
  glCompressedTextureImage1DEXT = PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC(glfwGetProcAddress("glCompressedTextureImage1DEXT"));
  glCompressedTextureImage2DEXT = PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC(glfwGetProcAddress("glCompressedTextureImage2DEXT"));
  glCompressedTextureImage3DEXT = PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC(glfwGetProcAddress("glCompressedTextureImage3DEXT"));
  glCompressedTextureSubImage1D = PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC(glfwGetProcAddress("glCompressedTextureSubImage1D"));
  glCompressedTextureSubImage1DEXT = PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC(glfwGetProcAddress("glCompressedTextureSubImage1DEXT"));
  glCompressedTextureSubImage2D = PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC(glfwGetProcAddress("glCompressedTextureSubImage2D"));
  glCompressedTextureSubImage2DEXT = PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC(glfwGetProcAddress("glCompressedTextureSubImage2DEXT"));
  glCompressedTextureSubImage3D = PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC(glfwGetProcAddress("glCompressedTextureSubImage3D"));
  glCompressedTextureSubImage3DEXT = PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC(glfwGetProcAddress("glCompressedTextureSubImage3DEXT"));
  glConservativeRasterParameterfNV = PFNGLCONSERVATIVERASTERPARAMETERFNVPROC(glfwGetProcAddress("glConservativeRasterParameterfNV"));
  glConservativeRasterParameteriNV = PFNGLCONSERVATIVERASTERPARAMETERINVPROC(glfwGetProcAddress("glConservativeRasterParameteriNV"));
  glCopyBufferSubData = PFNGLCOPYBUFFERSUBDATAPROC(glfwGetProcAddress("glCopyBufferSubData"));
  glCopyImageSubData = PFNGLCOPYIMAGESUBDATAPROC(glfwGetProcAddress("glCopyImageSubData"));
  glCopyMultiTexImage1DEXT = PFNGLCOPYMULTITEXIMAGE1DEXTPROC(glfwGetProcAddress("glCopyMultiTexImage1DEXT"));
  glCopyMultiTexImage2DEXT = PFNGLCOPYMULTITEXIMAGE2DEXTPROC(glfwGetProcAddress("glCopyMultiTexImage2DEXT"));
  glCopyMultiTexSubImage1DEXT = PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC(glfwGetProcAddress("glCopyMultiTexSubImage1DEXT"));
  glCopyMultiTexSubImage2DEXT = PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC(glfwGetProcAddress("glCopyMultiTexSubImage2DEXT"));
  glCopyMultiTexSubImage3DEXT = PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC(glfwGetProcAddress("glCopyMultiTexSubImage3DEXT"));
  glCopyNamedBufferSubData = PFNGLCOPYNAMEDBUFFERSUBDATAPROC(glfwGetProcAddress("glCopyNamedBufferSubData"));
  glCopyPathNV = PFNGLCOPYPATHNVPROC(glfwGetProcAddress("glCopyPathNV"));
  glCopyTexImage1D = PFNGLCOPYTEXIMAGE1DPROC(glfwGetProcAddress("glCopyTexImage1D"));
  glCopyTexImage2D = PFNGLCOPYTEXIMAGE2DPROC(glfwGetProcAddress("glCopyTexImage2D"));
  glCopyTexSubImage1D = PFNGLCOPYTEXSUBIMAGE1DPROC(glfwGetProcAddress("glCopyTexSubImage1D"));
  glCopyTexSubImage2D = PFNGLCOPYTEXSUBIMAGE2DPROC(glfwGetProcAddress("glCopyTexSubImage2D"));
  glCopyTexSubImage3D = PFNGLCOPYTEXSUBIMAGE3DPROC(glfwGetProcAddress("glCopyTexSubImage3D"));
  glCopyTextureImage1DEXT = PFNGLCOPYTEXTUREIMAGE1DEXTPROC(glfwGetProcAddress("glCopyTextureImage1DEXT"));
  glCopyTextureImage2DEXT = PFNGLCOPYTEXTUREIMAGE2DEXTPROC(glfwGetProcAddress("glCopyTextureImage2DEXT"));
  glCopyTextureSubImage1D = PFNGLCOPYTEXTURESUBIMAGE1DPROC(glfwGetProcAddress("glCopyTextureSubImage1D"));
  glCopyTextureSubImage1DEXT = PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC(glfwGetProcAddress("glCopyTextureSubImage1DEXT"));
  glCopyTextureSubImage2D = PFNGLCOPYTEXTURESUBIMAGE2DPROC(glfwGetProcAddress("glCopyTextureSubImage2D"));
  glCopyTextureSubImage2DEXT = PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC(glfwGetProcAddress("glCopyTextureSubImage2DEXT"));
  glCopyTextureSubImage3D = PFNGLCOPYTEXTURESUBIMAGE3DPROC(glfwGetProcAddress("glCopyTextureSubImage3D"));
  glCopyTextureSubImage3DEXT = PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC(glfwGetProcAddress("glCopyTextureSubImage3DEXT"));
  glCoverFillPathInstancedNV = PFNGLCOVERFILLPATHINSTANCEDNVPROC(glfwGetProcAddress("glCoverFillPathInstancedNV"));
  glCoverFillPathNV = PFNGLCOVERFILLPATHNVPROC(glfwGetProcAddress("glCoverFillPathNV"));
  glCoverStrokePathInstancedNV = PFNGLCOVERSTROKEPATHINSTANCEDNVPROC(glfwGetProcAddress("glCoverStrokePathInstancedNV"));
  glCoverStrokePathNV = PFNGLCOVERSTROKEPATHNVPROC(glfwGetProcAddress("glCoverStrokePathNV"));
  glCoverageModulationNV = PFNGLCOVERAGEMODULATIONNVPROC(glfwGetProcAddress("glCoverageModulationNV"));
  glCoverageModulationTableNV = PFNGLCOVERAGEMODULATIONTABLENVPROC(glfwGetProcAddress("glCoverageModulationTableNV"));
  glCreateBuffers = PFNGLCREATEBUFFERSPROC(glfwGetProcAddress("glCreateBuffers"));
  glCreateCommandListsNV = PFNGLCREATECOMMANDLISTSNVPROC(glfwGetProcAddress("glCreateCommandListsNV"));
  glCreateFramebuffers = PFNGLCREATEFRAMEBUFFERSPROC(glfwGetProcAddress("glCreateFramebuffers"));
  glCreatePerfQueryINTEL = PFNGLCREATEPERFQUERYINTELPROC(glfwGetProcAddress("glCreatePerfQueryINTEL"));
  glCreateProgram = PFNGLCREATEPROGRAMPROC(glfwGetProcAddress("glCreateProgram"));
  glCreateProgramPipelines = PFNGLCREATEPROGRAMPIPELINESPROC(glfwGetProcAddress("glCreateProgramPipelines"));
  glCreateQueries = PFNGLCREATEQUERIESPROC(glfwGetProcAddress("glCreateQueries"));
  glCreateRenderbuffers = PFNGLCREATERENDERBUFFERSPROC(glfwGetProcAddress("glCreateRenderbuffers"));
  glCreateSamplers = PFNGLCREATESAMPLERSPROC(glfwGetProcAddress("glCreateSamplers"));
  glCreateShader = PFNGLCREATESHADERPROC(glfwGetProcAddress("glCreateShader"));
  glCreateShaderProgramEXT = PFNGLCREATESHADERPROGRAMEXTPROC(glfwGetProcAddress("glCreateShaderProgramEXT"));
  glCreateShaderProgramv = PFNGLCREATESHADERPROGRAMVPROC(glfwGetProcAddress("glCreateShaderProgramv"));
  glCreateStatesNV = PFNGLCREATESTATESNVPROC(glfwGetProcAddress("glCreateStatesNV"));
  glCreateSyncFromCLeventARB = PFNGLCREATESYNCFROMCLEVENTARBPROC(glfwGetProcAddress("glCreateSyncFromCLeventARB"));
  glCreateTextures = PFNGLCREATETEXTURESPROC(glfwGetProcAddress("glCreateTextures"));
  glCreateTransformFeedbacks = PFNGLCREATETRANSFORMFEEDBACKSPROC(glfwGetProcAddress("glCreateTransformFeedbacks"));
  glCreateVertexArrays = PFNGLCREATEVERTEXARRAYSPROC(glfwGetProcAddress("glCreateVertexArrays"));
  glCullFace = PFNGLCULLFACEPROC(glfwGetProcAddress("glCullFace"));
  glDebugMessageCallback = PFNGLDEBUGMESSAGECALLBACKPROC(glfwGetProcAddress("glDebugMessageCallback"));
  glDebugMessageCallbackARB = PFNGLDEBUGMESSAGECALLBACKARBPROC(glfwGetProcAddress("glDebugMessageCallbackARB"));
  glDebugMessageControl = PFNGLDEBUGMESSAGECONTROLPROC(glfwGetProcAddress("glDebugMessageControl"));
  glDebugMessageControlARB = PFNGLDEBUGMESSAGECONTROLARBPROC(glfwGetProcAddress("glDebugMessageControlARB"));
  glDebugMessageInsert = PFNGLDEBUGMESSAGEINSERTPROC(glfwGetProcAddress("glDebugMessageInsert"));
  glDebugMessageInsertARB = PFNGLDEBUGMESSAGEINSERTARBPROC(glfwGetProcAddress("glDebugMessageInsertARB"));
  glDeleteBuffers = PFNGLDELETEBUFFERSPROC(glfwGetProcAddress("glDeleteBuffers"));
  glDeleteCommandListsNV = PFNGLDELETECOMMANDLISTSNVPROC(glfwGetProcAddress("glDeleteCommandListsNV"));
  glDeleteFramebuffers = PFNGLDELETEFRAMEBUFFERSPROC(glfwGetProcAddress("glDeleteFramebuffers"));
  glDeleteNamedStringARB = PFNGLDELETENAMEDSTRINGARBPROC(glfwGetProcAddress("glDeleteNamedStringARB"));
  glDeletePathsNV = PFNGLDELETEPATHSNVPROC(glfwGetProcAddress("glDeletePathsNV"));
  glDeletePerfMonitorsAMD = PFNGLDELETEPERFMONITORSAMDPROC(glfwGetProcAddress("glDeletePerfMonitorsAMD"));
  glDeletePerfQueryINTEL = PFNGLDELETEPERFQUERYINTELPROC(glfwGetProcAddress("glDeletePerfQueryINTEL"));
  glDeleteProgram = PFNGLDELETEPROGRAMPROC(glfwGetProcAddress("glDeleteProgram"));
  glDeleteProgramPipelines = PFNGLDELETEPROGRAMPIPELINESPROC(glfwGetProcAddress("glDeleteProgramPipelines"));
  glDeleteQueries = PFNGLDELETEQUERIESPROC(glfwGetProcAddress("glDeleteQueries"));
  glDeleteRenderbuffers = PFNGLDELETERENDERBUFFERSPROC(glfwGetProcAddress("glDeleteRenderbuffers"));
  glDeleteSamplers = PFNGLDELETESAMPLERSPROC(glfwGetProcAddress("glDeleteSamplers"));
  glDeleteShader = PFNGLDELETESHADERPROC(glfwGetProcAddress("glDeleteShader"));
  glDeleteStatesNV = PFNGLDELETESTATESNVPROC(glfwGetProcAddress("glDeleteStatesNV"));
  glDeleteSync = PFNGLDELETESYNCPROC(glfwGetProcAddress("glDeleteSync"));
  glDeleteTextures = PFNGLDELETETEXTURESPROC(glfwGetProcAddress("glDeleteTextures"));
  glDeleteTransformFeedbacks = PFNGLDELETETRANSFORMFEEDBACKSPROC(glfwGetProcAddress("glDeleteTransformFeedbacks"));
  glDeleteVertexArrays = PFNGLDELETEVERTEXARRAYSPROC(glfwGetProcAddress("glDeleteVertexArrays"));
  glDepthFunc = PFNGLDEPTHFUNCPROC(glfwGetProcAddress("glDepthFunc"));
  glDepthMask = PFNGLDEPTHMASKPROC(glfwGetProcAddress("glDepthMask"));
  glDepthRange = PFNGLDEPTHRANGEPROC(glfwGetProcAddress("glDepthRange"));
  glDepthRangeArrayv = PFNGLDEPTHRANGEARRAYVPROC(glfwGetProcAddress("glDepthRangeArrayv"));
  glDepthRangeIndexed = PFNGLDEPTHRANGEINDEXEDPROC(glfwGetProcAddress("glDepthRangeIndexed"));
  glDepthRangef = PFNGLDEPTHRANGEFPROC(glfwGetProcAddress("glDepthRangef"));
  glDetachShader = PFNGLDETACHSHADERPROC(glfwGetProcAddress("glDetachShader"));
  glDisable = PFNGLDISABLEPROC(glfwGetProcAddress("glDisable"));
  glDisableClientStateIndexedEXT = PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC(glfwGetProcAddress("glDisableClientStateIndexedEXT"));
  glDisableClientStateiEXT = PFNGLDISABLECLIENTSTATEIEXTPROC(glfwGetProcAddress("glDisableClientStateiEXT"));
  glDisableIndexedEXT = PFNGLDISABLEINDEXEDEXTPROC(glfwGetProcAddress("glDisableIndexedEXT"));
  glDisableVertexArrayAttrib = PFNGLDISABLEVERTEXARRAYATTRIBPROC(glfwGetProcAddress("glDisableVertexArrayAttrib"));
  glDisableVertexArrayAttribEXT = PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC(glfwGetProcAddress("glDisableVertexArrayAttribEXT"));
  glDisableVertexArrayEXT = PFNGLDISABLEVERTEXARRAYEXTPROC(glfwGetProcAddress("glDisableVertexArrayEXT"));
  glDisableVertexAttribArray = PFNGLDISABLEVERTEXATTRIBARRAYPROC(glfwGetProcAddress("glDisableVertexAttribArray"));
  glDisablei = PFNGLDISABLEIPROC(glfwGetProcAddress("glDisablei"));
  glDispatchCompute = PFNGLDISPATCHCOMPUTEPROC(glfwGetProcAddress("glDispatchCompute"));
  glDispatchComputeGroupSizeARB = PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC(glfwGetProcAddress("glDispatchComputeGroupSizeARB"));
  glDispatchComputeIndirect = PFNGLDISPATCHCOMPUTEINDIRECTPROC(glfwGetProcAddress("glDispatchComputeIndirect"));
  glDrawArrays = PFNGLDRAWARRAYSPROC(glfwGetProcAddress("glDrawArrays"));
  glDrawArraysIndirect = PFNGLDRAWARRAYSINDIRECTPROC(glfwGetProcAddress("glDrawArraysIndirect"));
  glDrawArraysInstanced = PFNGLDRAWARRAYSINSTANCEDPROC(glfwGetProcAddress("glDrawArraysInstanced"));
  glDrawArraysInstancedARB = PFNGLDRAWARRAYSINSTANCEDARBPROC(glfwGetProcAddress("glDrawArraysInstancedARB"));
  glDrawArraysInstancedBaseInstance = PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC(glfwGetProcAddress("glDrawArraysInstancedBaseInstance"));
  glDrawArraysInstancedEXT = PFNGLDRAWARRAYSINSTANCEDEXTPROC(glfwGetProcAddress("glDrawArraysInstancedEXT"));
  glDrawBuffer = PFNGLDRAWBUFFERPROC(glfwGetProcAddress("glDrawBuffer"));
  glDrawBuffers = PFNGLDRAWBUFFERSPROC(glfwGetProcAddress("glDrawBuffers"));
  glDrawCommandsAddressNV = PFNGLDRAWCOMMANDSADDRESSNVPROC(glfwGetProcAddress("glDrawCommandsAddressNV"));
  glDrawCommandsNV = PFNGLDRAWCOMMANDSNVPROC(glfwGetProcAddress("glDrawCommandsNV"));
  glDrawCommandsStatesAddressNV = PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC(glfwGetProcAddress("glDrawCommandsStatesAddressNV"));
  glDrawCommandsStatesNV = PFNGLDRAWCOMMANDSSTATESNVPROC(glfwGetProcAddress("glDrawCommandsStatesNV"));
  glDrawElements = PFNGLDRAWELEMENTSPROC(glfwGetProcAddress("glDrawElements"));
  glDrawElementsBaseVertex = PFNGLDRAWELEMENTSBASEVERTEXPROC(glfwGetProcAddress("glDrawElementsBaseVertex"));
  glDrawElementsIndirect = PFNGLDRAWELEMENTSINDIRECTPROC(glfwGetProcAddress("glDrawElementsIndirect"));
  glDrawElementsInstanced = PFNGLDRAWELEMENTSINSTANCEDPROC(glfwGetProcAddress("glDrawElementsInstanced"));
  glDrawElementsInstancedARB = PFNGLDRAWELEMENTSINSTANCEDARBPROC(glfwGetProcAddress("glDrawElementsInstancedARB"));
  glDrawElementsInstancedBaseInstance = PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC(glfwGetProcAddress("glDrawElementsInstancedBaseInstance"));
  glDrawElementsInstancedBaseVertex = PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC(glfwGetProcAddress("glDrawElementsInstancedBaseVertex"));
  glDrawElementsInstancedBaseVertexBaseInstance = PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC(glfwGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance"));
  glDrawElementsInstancedEXT = PFNGLDRAWELEMENTSINSTANCEDEXTPROC(glfwGetProcAddress("glDrawElementsInstancedEXT"));
  glDrawRangeElements = PFNGLDRAWRANGEELEMENTSPROC(glfwGetProcAddress("glDrawRangeElements"));
  glDrawRangeElementsBaseVertex = PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC(glfwGetProcAddress("glDrawRangeElementsBaseVertex"));
  glDrawTransformFeedback = PFNGLDRAWTRANSFORMFEEDBACKPROC(glfwGetProcAddress("glDrawTransformFeedback"));
  glDrawTransformFeedbackInstanced = PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC(glfwGetProcAddress("glDrawTransformFeedbackInstanced"));
  glDrawTransformFeedbackStream = PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC(glfwGetProcAddress("glDrawTransformFeedbackStream"));
  glDrawTransformFeedbackStreamInstanced = PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC(glfwGetProcAddress("glDrawTransformFeedbackStreamInstanced"));
  glDrawVkImageNV = PFNGLDRAWVKIMAGENVPROC(glfwGetProcAddress("glDrawVkImageNV"));
  glEdgeFlagFormatNV = PFNGLEDGEFLAGFORMATNVPROC(glfwGetProcAddress("glEdgeFlagFormatNV"));
  glEnable = PFNGLENABLEPROC(glfwGetProcAddress("glEnable"));
  glEnableClientStateIndexedEXT = PFNGLENABLECLIENTSTATEINDEXEDEXTPROC(glfwGetProcAddress("glEnableClientStateIndexedEXT"));
  glEnableClientStateiEXT = PFNGLENABLECLIENTSTATEIEXTPROC(glfwGetProcAddress("glEnableClientStateiEXT"));
  glEnableIndexedEXT = PFNGLENABLEINDEXEDEXTPROC(glfwGetProcAddress("glEnableIndexedEXT"));
  glEnableVertexArrayAttrib = PFNGLENABLEVERTEXARRAYATTRIBPROC(glfwGetProcAddress("glEnableVertexArrayAttrib"));
  glEnableVertexArrayAttribEXT = PFNGLENABLEVERTEXARRAYATTRIBEXTPROC(glfwGetProcAddress("glEnableVertexArrayAttribEXT"));
  glEnableVertexArrayEXT = PFNGLENABLEVERTEXARRAYEXTPROC(glfwGetProcAddress("glEnableVertexArrayEXT"));
  glEnableVertexAttribArray = PFNGLENABLEVERTEXATTRIBARRAYPROC(glfwGetProcAddress("glEnableVertexAttribArray"));
  glEnablei = PFNGLENABLEIPROC(glfwGetProcAddress("glEnablei"));
  glEndConditionalRender = PFNGLENDCONDITIONALRENDERPROC(glfwGetProcAddress("glEndConditionalRender"));
  glEndConditionalRenderNV = PFNGLENDCONDITIONALRENDERNVPROC(glfwGetProcAddress("glEndConditionalRenderNV"));
  glEndPerfMonitorAMD = PFNGLENDPERFMONITORAMDPROC(glfwGetProcAddress("glEndPerfMonitorAMD"));
  glEndPerfQueryINTEL = PFNGLENDPERFQUERYINTELPROC(glfwGetProcAddress("glEndPerfQueryINTEL"));
  glEndQuery = PFNGLENDQUERYPROC(glfwGetProcAddress("glEndQuery"));
  glEndQueryIndexed = PFNGLENDQUERYINDEXEDPROC(glfwGetProcAddress("glEndQueryIndexed"));
  glEndTransformFeedback = PFNGLENDTRANSFORMFEEDBACKPROC(glfwGetProcAddress("glEndTransformFeedback"));
  glEvaluateDepthValuesARB = PFNGLEVALUATEDEPTHVALUESARBPROC(glfwGetProcAddress("glEvaluateDepthValuesARB"));
  glFenceSync = PFNGLFENCESYNCPROC(glfwGetProcAddress("glFenceSync"));
  glFinish = PFNGLFINISHPROC(glfwGetProcAddress("glFinish"));
  glFlush = PFNGLFLUSHPROC(glfwGetProcAddress("glFlush"));
  glFlushMappedBufferRange = PFNGLFLUSHMAPPEDBUFFERRANGEPROC(glfwGetProcAddress("glFlushMappedBufferRange"));
  glFlushMappedNamedBufferRange = PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC(glfwGetProcAddress("glFlushMappedNamedBufferRange"));
  glFlushMappedNamedBufferRangeEXT = PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC(glfwGetProcAddress("glFlushMappedNamedBufferRangeEXT"));
  glFogCoordFormatNV = PFNGLFOGCOORDFORMATNVPROC(glfwGetProcAddress("glFogCoordFormatNV"));
  glFragmentCoverageColorNV = PFNGLFRAGMENTCOVERAGECOLORNVPROC(glfwGetProcAddress("glFragmentCoverageColorNV"));
  glFramebufferDrawBufferEXT = PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC(glfwGetProcAddress("glFramebufferDrawBufferEXT"));
  glFramebufferDrawBuffersEXT = PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC(glfwGetProcAddress("glFramebufferDrawBuffersEXT"));
  glFramebufferParameteri = PFNGLFRAMEBUFFERPARAMETERIPROC(glfwGetProcAddress("glFramebufferParameteri"));
  glFramebufferReadBufferEXT = PFNGLFRAMEBUFFERREADBUFFEREXTPROC(glfwGetProcAddress("glFramebufferReadBufferEXT"));
  glFramebufferRenderbuffer = PFNGLFRAMEBUFFERRENDERBUFFERPROC(glfwGetProcAddress("glFramebufferRenderbuffer"));
  glFramebufferSampleLocationsfvARB = PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC(glfwGetProcAddress("glFramebufferSampleLocationsfvARB"));
  glFramebufferSampleLocationsfvNV = PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC(glfwGetProcAddress("glFramebufferSampleLocationsfvNV"));
  glFramebufferTexture = PFNGLFRAMEBUFFERTEXTUREPROC(glfwGetProcAddress("glFramebufferTexture"));
  glFramebufferTexture1D = PFNGLFRAMEBUFFERTEXTURE1DPROC(glfwGetProcAddress("glFramebufferTexture1D"));
  glFramebufferTexture2D = PFNGLFRAMEBUFFERTEXTURE2DPROC(glfwGetProcAddress("glFramebufferTexture2D"));
  glFramebufferTexture3D = PFNGLFRAMEBUFFERTEXTURE3DPROC(glfwGetProcAddress("glFramebufferTexture3D"));
  glFramebufferTextureARB = PFNGLFRAMEBUFFERTEXTUREARBPROC(glfwGetProcAddress("glFramebufferTextureARB"));
  glFramebufferTextureFaceARB = PFNGLFRAMEBUFFERTEXTUREFACEARBPROC(glfwGetProcAddress("glFramebufferTextureFaceARB"));
  glFramebufferTextureLayer = PFNGLFRAMEBUFFERTEXTURELAYERPROC(glfwGetProcAddress("glFramebufferTextureLayer"));
  glFramebufferTextureLayerARB = PFNGLFRAMEBUFFERTEXTURELAYERARBPROC(glfwGetProcAddress("glFramebufferTextureLayerARB"));
  glFramebufferTextureMultiviewOVR = PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC(glfwGetProcAddress("glFramebufferTextureMultiviewOVR"));
  glFrontFace = PFNGLFRONTFACEPROC(glfwGetProcAddress("glFrontFace"));
  glGenBuffers = PFNGLGENBUFFERSPROC(glfwGetProcAddress("glGenBuffers"));
  glGenFramebuffers = PFNGLGENFRAMEBUFFERSPROC(glfwGetProcAddress("glGenFramebuffers"));
  glGenPathsNV = PFNGLGENPATHSNVPROC(glfwGetProcAddress("glGenPathsNV"));
  glGenPerfMonitorsAMD = PFNGLGENPERFMONITORSAMDPROC(glfwGetProcAddress("glGenPerfMonitorsAMD"));
  glGenProgramPipelines = PFNGLGENPROGRAMPIPELINESPROC(glfwGetProcAddress("glGenProgramPipelines"));
  glGenQueries = PFNGLGENQUERIESPROC(glfwGetProcAddress("glGenQueries"));
  glGenRenderbuffers = PFNGLGENRENDERBUFFERSPROC(glfwGetProcAddress("glGenRenderbuffers"));
  glGenSamplers = PFNGLGENSAMPLERSPROC(glfwGetProcAddress("glGenSamplers"));
  glGenTextures = PFNGLGENTEXTURESPROC(glfwGetProcAddress("glGenTextures"));
  glGenTransformFeedbacks = PFNGLGENTRANSFORMFEEDBACKSPROC(glfwGetProcAddress("glGenTransformFeedbacks"));
  glGenVertexArrays = PFNGLGENVERTEXARRAYSPROC(glfwGetProcAddress("glGenVertexArrays"));
  glGenerateMipmap = PFNGLGENERATEMIPMAPPROC(glfwGetProcAddress("glGenerateMipmap"));
  glGenerateMultiTexMipmapEXT = PFNGLGENERATEMULTITEXMIPMAPEXTPROC(glfwGetProcAddress("glGenerateMultiTexMipmapEXT"));
  glGenerateTextureMipmap = PFNGLGENERATETEXTUREMIPMAPPROC(glfwGetProcAddress("glGenerateTextureMipmap"));
  glGenerateTextureMipmapEXT = PFNGLGENERATETEXTUREMIPMAPEXTPROC(glfwGetProcAddress("glGenerateTextureMipmapEXT"));
  glGetActiveAtomicCounterBufferiv = PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC(glfwGetProcAddress("glGetActiveAtomicCounterBufferiv"));
  glGetActiveAttrib = PFNGLGETACTIVEATTRIBPROC(glfwGetProcAddress("glGetActiveAttrib"));
  glGetActiveSubroutineName = PFNGLGETACTIVESUBROUTINENAMEPROC(glfwGetProcAddress("glGetActiveSubroutineName"));
  glGetActiveSubroutineUniformName = PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC(glfwGetProcAddress("glGetActiveSubroutineUniformName"));
  glGetActiveSubroutineUniformiv = PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC(glfwGetProcAddress("glGetActiveSubroutineUniformiv"));
  glGetActiveUniform = PFNGLGETACTIVEUNIFORMPROC(glfwGetProcAddress("glGetActiveUniform"));
  glGetActiveUniformBlockName = PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC(glfwGetProcAddress("glGetActiveUniformBlockName"));
  glGetActiveUniformBlockiv = PFNGLGETACTIVEUNIFORMBLOCKIVPROC(glfwGetProcAddress("glGetActiveUniformBlockiv"));
  glGetActiveUniformName = PFNGLGETACTIVEUNIFORMNAMEPROC(glfwGetProcAddress("glGetActiveUniformName"));
  glGetActiveUniformsiv = PFNGLGETACTIVEUNIFORMSIVPROC(glfwGetProcAddress("glGetActiveUniformsiv"));
  glGetAttachedShaders = PFNGLGETATTACHEDSHADERSPROC(glfwGetProcAddress("glGetAttachedShaders"));
  glGetAttribLocation = PFNGLGETATTRIBLOCATIONPROC(glfwGetProcAddress("glGetAttribLocation"));
  glGetBooleanIndexedvEXT = PFNGLGETBOOLEANINDEXEDVEXTPROC(glfwGetProcAddress("glGetBooleanIndexedvEXT"));
  glGetBooleani_v = PFNGLGETBOOLEANI_VPROC(glfwGetProcAddress("glGetBooleani_v"));
  glGetBooleanv = PFNGLGETBOOLEANVPROC(glfwGetProcAddress("glGetBooleanv"));
  glGetBufferParameteri64v = PFNGLGETBUFFERPARAMETERI64VPROC(glfwGetProcAddress("glGetBufferParameteri64v"));
  glGetBufferParameteriv = PFNGLGETBUFFERPARAMETERIVPROC(glfwGetProcAddress("glGetBufferParameteriv"));
  glGetBufferParameterui64vNV = PFNGLGETBUFFERPARAMETERUI64VNVPROC(glfwGetProcAddress("glGetBufferParameterui64vNV"));
  glGetBufferPointerv = PFNGLGETBUFFERPOINTERVPROC(glfwGetProcAddress("glGetBufferPointerv"));
  glGetBufferSubData = PFNGLGETBUFFERSUBDATAPROC(glfwGetProcAddress("glGetBufferSubData"));
  glGetCommandHeaderNV = PFNGLGETCOMMANDHEADERNVPROC(glfwGetProcAddress("glGetCommandHeaderNV"));
  glGetCompressedMultiTexImageEXT = PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC(glfwGetProcAddress("glGetCompressedMultiTexImageEXT"));
  glGetCompressedTexImage = PFNGLGETCOMPRESSEDTEXIMAGEPROC(glfwGetProcAddress("glGetCompressedTexImage"));
  glGetCompressedTextureImage = PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC(glfwGetProcAddress("glGetCompressedTextureImage"));
  glGetCompressedTextureImageEXT = PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC(glfwGetProcAddress("glGetCompressedTextureImageEXT"));
  glGetCompressedTextureSubImage = PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC(glfwGetProcAddress("glGetCompressedTextureSubImage"));
  glGetCoverageModulationTableNV = PFNGLGETCOVERAGEMODULATIONTABLENVPROC(glfwGetProcAddress("glGetCoverageModulationTableNV"));
  glGetDebugMessageLog = PFNGLGETDEBUGMESSAGELOGPROC(glfwGetProcAddress("glGetDebugMessageLog"));
  glGetDebugMessageLogARB = PFNGLGETDEBUGMESSAGELOGARBPROC(glfwGetProcAddress("glGetDebugMessageLogARB"));
  glGetDoubleIndexedvEXT = PFNGLGETDOUBLEINDEXEDVEXTPROC(glfwGetProcAddress("glGetDoubleIndexedvEXT"));
  glGetDoublei_v = PFNGLGETDOUBLEI_VPROC(glfwGetProcAddress("glGetDoublei_v"));
  glGetDoublei_vEXT = PFNGLGETDOUBLEI_VEXTPROC(glfwGetProcAddress("glGetDoublei_vEXT"));
  glGetDoublev = PFNGLGETDOUBLEVPROC(glfwGetProcAddress("glGetDoublev"));
  glGetError = PFNGLGETERRORPROC(glfwGetProcAddress("glGetError"));
  glGetFirstPerfQueryIdINTEL = PFNGLGETFIRSTPERFQUERYIDINTELPROC(glfwGetProcAddress("glGetFirstPerfQueryIdINTEL"));
  glGetFloatIndexedvEXT = PFNGLGETFLOATINDEXEDVEXTPROC(glfwGetProcAddress("glGetFloatIndexedvEXT"));
  glGetFloati_v = PFNGLGETFLOATI_VPROC(glfwGetProcAddress("glGetFloati_v"));
  glGetFloati_vEXT = PFNGLGETFLOATI_VEXTPROC(glfwGetProcAddress("glGetFloati_vEXT"));
  glGetFloatv = PFNGLGETFLOATVPROC(glfwGetProcAddress("glGetFloatv"));
  glGetFragDataIndex = PFNGLGETFRAGDATAINDEXPROC(glfwGetProcAddress("glGetFragDataIndex"));
  glGetFragDataLocation = PFNGLGETFRAGDATALOCATIONPROC(glfwGetProcAddress("glGetFragDataLocation"));
  glGetFramebufferAttachmentParameteriv = PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC(glfwGetProcAddress("glGetFramebufferAttachmentParameteriv"));
  glGetFramebufferParameteriv = PFNGLGETFRAMEBUFFERPARAMETERIVPROC(glfwGetProcAddress("glGetFramebufferParameteriv"));
  glGetFramebufferParameterivEXT = PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC(glfwGetProcAddress("glGetFramebufferParameterivEXT"));
  glGetGraphicsResetStatus = PFNGLGETGRAPHICSRESETSTATUSPROC(glfwGetProcAddress("glGetGraphicsResetStatus"));
  glGetGraphicsResetStatusARB = PFNGLGETGRAPHICSRESETSTATUSARBPROC(glfwGetProcAddress("glGetGraphicsResetStatusARB"));
  glGetImageHandleARB = PFNGLGETIMAGEHANDLEARBPROC(glfwGetProcAddress("glGetImageHandleARB"));
  glGetImageHandleNV = PFNGLGETIMAGEHANDLENVPROC(glfwGetProcAddress("glGetImageHandleNV"));
  glGetInteger64i_v = PFNGLGETINTEGER64I_VPROC(glfwGetProcAddress("glGetInteger64i_v"));
  glGetInteger64v = PFNGLGETINTEGER64VPROC(glfwGetProcAddress("glGetInteger64v"));
  glGetIntegerIndexedvEXT = PFNGLGETINTEGERINDEXEDVEXTPROC(glfwGetProcAddress("glGetIntegerIndexedvEXT"));
  glGetIntegeri_v = PFNGLGETINTEGERI_VPROC(glfwGetProcAddress("glGetIntegeri_v"));
  glGetIntegerui64i_vNV = PFNGLGETINTEGERUI64I_VNVPROC(glfwGetProcAddress("glGetIntegerui64i_vNV"));
  glGetIntegerui64vNV = PFNGLGETINTEGERUI64VNVPROC(glfwGetProcAddress("glGetIntegerui64vNV"));
  glGetIntegerv = PFNGLGETINTEGERVPROC(glfwGetProcAddress("glGetIntegerv"));
  glGetInternalformatSampleivNV = PFNGLGETINTERNALFORMATSAMPLEIVNVPROC(glfwGetProcAddress("glGetInternalformatSampleivNV"));
  glGetInternalformati64v = PFNGLGETINTERNALFORMATI64VPROC(glfwGetProcAddress("glGetInternalformati64v"));
  glGetInternalformativ = PFNGLGETINTERNALFORMATIVPROC(glfwGetProcAddress("glGetInternalformativ"));
  glGetMultiTexEnvfvEXT = PFNGLGETMULTITEXENVFVEXTPROC(glfwGetProcAddress("glGetMultiTexEnvfvEXT"));
  glGetMultiTexEnvivEXT = PFNGLGETMULTITEXENVIVEXTPROC(glfwGetProcAddress("glGetMultiTexEnvivEXT"));
  glGetMultiTexGendvEXT = PFNGLGETMULTITEXGENDVEXTPROC(glfwGetProcAddress("glGetMultiTexGendvEXT"));
  glGetMultiTexGenfvEXT = PFNGLGETMULTITEXGENFVEXTPROC(glfwGetProcAddress("glGetMultiTexGenfvEXT"));
  glGetMultiTexGenivEXT = PFNGLGETMULTITEXGENIVEXTPROC(glfwGetProcAddress("glGetMultiTexGenivEXT"));
  glGetMultiTexImageEXT = PFNGLGETMULTITEXIMAGEEXTPROC(glfwGetProcAddress("glGetMultiTexImageEXT"));
  glGetMultiTexLevelParameterfvEXT = PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC(glfwGetProcAddress("glGetMultiTexLevelParameterfvEXT"));
  glGetMultiTexLevelParameterivEXT = PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC(glfwGetProcAddress("glGetMultiTexLevelParameterivEXT"));
  glGetMultiTexParameterIivEXT = PFNGLGETMULTITEXPARAMETERIIVEXTPROC(glfwGetProcAddress("glGetMultiTexParameterIivEXT"));
  glGetMultiTexParameterIuivEXT = PFNGLGETMULTITEXPARAMETERIUIVEXTPROC(glfwGetProcAddress("glGetMultiTexParameterIuivEXT"));
  glGetMultiTexParameterfvEXT = PFNGLGETMULTITEXPARAMETERFVEXTPROC(glfwGetProcAddress("glGetMultiTexParameterfvEXT"));
  glGetMultiTexParameterivEXT = PFNGLGETMULTITEXPARAMETERIVEXTPROC(glfwGetProcAddress("glGetMultiTexParameterivEXT"));
  glGetMultisamplefv = PFNGLGETMULTISAMPLEFVPROC(glfwGetProcAddress("glGetMultisamplefv"));
  glGetNamedBufferParameteri64v = PFNGLGETNAMEDBUFFERPARAMETERI64VPROC(glfwGetProcAddress("glGetNamedBufferParameteri64v"));
  glGetNamedBufferParameteriv = PFNGLGETNAMEDBUFFERPARAMETERIVPROC(glfwGetProcAddress("glGetNamedBufferParameteriv"));
  glGetNamedBufferParameterivEXT = PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC(glfwGetProcAddress("glGetNamedBufferParameterivEXT"));
  glGetNamedBufferParameterui64vNV = PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC(glfwGetProcAddress("glGetNamedBufferParameterui64vNV"));
  glGetNamedBufferPointerv = PFNGLGETNAMEDBUFFERPOINTERVPROC(glfwGetProcAddress("glGetNamedBufferPointerv"));
  glGetNamedBufferPointervEXT = PFNGLGETNAMEDBUFFERPOINTERVEXTPROC(glfwGetProcAddress("glGetNamedBufferPointervEXT"));
  glGetNamedBufferSubData = PFNGLGETNAMEDBUFFERSUBDATAPROC(glfwGetProcAddress("glGetNamedBufferSubData"));
  glGetNamedBufferSubDataEXT = PFNGLGETNAMEDBUFFERSUBDATAEXTPROC(glfwGetProcAddress("glGetNamedBufferSubDataEXT"));
  glGetNamedFramebufferAttachmentParameteriv = PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC(glfwGetProcAddress("glGetNamedFramebufferAttachmentParameteriv"));
  glGetNamedFramebufferAttachmentParameterivEXT = PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC(glfwGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT"));
  glGetNamedFramebufferParameteriv = PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC(glfwGetProcAddress("glGetNamedFramebufferParameteriv"));
  glGetNamedFramebufferParameterivEXT = PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC(glfwGetProcAddress("glGetNamedFramebufferParameterivEXT"));
  glGetNamedProgramLocalParameterIivEXT = PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC(glfwGetProcAddress("glGetNamedProgramLocalParameterIivEXT"));
  glGetNamedProgramLocalParameterIuivEXT = PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC(glfwGetProcAddress("glGetNamedProgramLocalParameterIuivEXT"));
  glGetNamedProgramLocalParameterdvEXT = PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC(glfwGetProcAddress("glGetNamedProgramLocalParameterdvEXT"));
  glGetNamedProgramLocalParameterfvEXT = PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC(glfwGetProcAddress("glGetNamedProgramLocalParameterfvEXT"));
  glGetNamedProgramStringEXT = PFNGLGETNAMEDPROGRAMSTRINGEXTPROC(glfwGetProcAddress("glGetNamedProgramStringEXT"));
  glGetNamedProgramivEXT = PFNGLGETNAMEDPROGRAMIVEXTPROC(glfwGetProcAddress("glGetNamedProgramivEXT"));
  glGetNamedRenderbufferParameteriv = PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC(glfwGetProcAddress("glGetNamedRenderbufferParameteriv"));
  glGetNamedRenderbufferParameterivEXT = PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC(glfwGetProcAddress("glGetNamedRenderbufferParameterivEXT"));
  glGetNamedStringARB = PFNGLGETNAMEDSTRINGARBPROC(glfwGetProcAddress("glGetNamedStringARB"));
  glGetNamedStringivARB = PFNGLGETNAMEDSTRINGIVARBPROC(glfwGetProcAddress("glGetNamedStringivARB"));
  glGetNextPerfQueryIdINTEL = PFNGLGETNEXTPERFQUERYIDINTELPROC(glfwGetProcAddress("glGetNextPerfQueryIdINTEL"));
  glGetObjectLabel = PFNGLGETOBJECTLABELPROC(glfwGetProcAddress("glGetObjectLabel"));
  glGetObjectLabelEXT = PFNGLGETOBJECTLABELEXTPROC(glfwGetProcAddress("glGetObjectLabelEXT"));
  glGetObjectPtrLabel = PFNGLGETOBJECTPTRLABELPROC(glfwGetProcAddress("glGetObjectPtrLabel"));
  glGetPathCommandsNV = PFNGLGETPATHCOMMANDSNVPROC(glfwGetProcAddress("glGetPathCommandsNV"));
  glGetPathCoordsNV = PFNGLGETPATHCOORDSNVPROC(glfwGetProcAddress("glGetPathCoordsNV"));
  glGetPathDashArrayNV = PFNGLGETPATHDASHARRAYNVPROC(glfwGetProcAddress("glGetPathDashArrayNV"));
  glGetPathLengthNV = PFNGLGETPATHLENGTHNVPROC(glfwGetProcAddress("glGetPathLengthNV"));
  glGetPathMetricRangeNV = PFNGLGETPATHMETRICRANGENVPROC(glfwGetProcAddress("glGetPathMetricRangeNV"));
  glGetPathMetricsNV = PFNGLGETPATHMETRICSNVPROC(glfwGetProcAddress("glGetPathMetricsNV"));
  glGetPathParameterfvNV = PFNGLGETPATHPARAMETERFVNVPROC(glfwGetProcAddress("glGetPathParameterfvNV"));
  glGetPathParameterivNV = PFNGLGETPATHPARAMETERIVNVPROC(glfwGetProcAddress("glGetPathParameterivNV"));
  glGetPathSpacingNV = PFNGLGETPATHSPACINGNVPROC(glfwGetProcAddress("glGetPathSpacingNV"));
  glGetPerfCounterInfoINTEL = PFNGLGETPERFCOUNTERINFOINTELPROC(glfwGetProcAddress("glGetPerfCounterInfoINTEL"));
  glGetPerfMonitorCounterDataAMD = PFNGLGETPERFMONITORCOUNTERDATAAMDPROC(glfwGetProcAddress("glGetPerfMonitorCounterDataAMD"));
  glGetPerfMonitorCounterInfoAMD = PFNGLGETPERFMONITORCOUNTERINFOAMDPROC(glfwGetProcAddress("glGetPerfMonitorCounterInfoAMD"));
  glGetPerfMonitorCounterStringAMD = PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC(glfwGetProcAddress("glGetPerfMonitorCounterStringAMD"));
  glGetPerfMonitorCountersAMD = PFNGLGETPERFMONITORCOUNTERSAMDPROC(glfwGetProcAddress("glGetPerfMonitorCountersAMD"));
  glGetPerfMonitorGroupStringAMD = PFNGLGETPERFMONITORGROUPSTRINGAMDPROC(glfwGetProcAddress("glGetPerfMonitorGroupStringAMD"));
  glGetPerfMonitorGroupsAMD = PFNGLGETPERFMONITORGROUPSAMDPROC(glfwGetProcAddress("glGetPerfMonitorGroupsAMD"));
  glGetPerfQueryDataINTEL = PFNGLGETPERFQUERYDATAINTELPROC(glfwGetProcAddress("glGetPerfQueryDataINTEL"));
  glGetPerfQueryIdByNameINTEL = PFNGLGETPERFQUERYIDBYNAMEINTELPROC(glfwGetProcAddress("glGetPerfQueryIdByNameINTEL"));
  glGetPerfQueryInfoINTEL = PFNGLGETPERFQUERYINFOINTELPROC(glfwGetProcAddress("glGetPerfQueryInfoINTEL"));
  glGetPointerIndexedvEXT = PFNGLGETPOINTERINDEXEDVEXTPROC(glfwGetProcAddress("glGetPointerIndexedvEXT"));
  glGetPointeri_vEXT = PFNGLGETPOINTERI_VEXTPROC(glfwGetProcAddress("glGetPointeri_vEXT"));
  glGetPointerv = PFNGLGETPOINTERVPROC(glfwGetProcAddress("glGetPointerv"));
  glGetProgramBinary = PFNGLGETPROGRAMBINARYPROC(glfwGetProcAddress("glGetProgramBinary"));
  glGetProgramInfoLog = PFNGLGETPROGRAMINFOLOGPROC(glfwGetProcAddress("glGetProgramInfoLog"));
  glGetProgramInterfaceiv = PFNGLGETPROGRAMINTERFACEIVPROC(glfwGetProcAddress("glGetProgramInterfaceiv"));
  glGetProgramPipelineInfoLog = PFNGLGETPROGRAMPIPELINEINFOLOGPROC(glfwGetProcAddress("glGetProgramPipelineInfoLog"));
  glGetProgramPipelineiv = PFNGLGETPROGRAMPIPELINEIVPROC(glfwGetProcAddress("glGetProgramPipelineiv"));
  glGetProgramResourceIndex = PFNGLGETPROGRAMRESOURCEINDEXPROC(glfwGetProcAddress("glGetProgramResourceIndex"));
  glGetProgramResourceLocation = PFNGLGETPROGRAMRESOURCELOCATIONPROC(glfwGetProcAddress("glGetProgramResourceLocation"));
  glGetProgramResourceLocationIndex = PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC(glfwGetProcAddress("glGetProgramResourceLocationIndex"));
  glGetProgramResourceName = PFNGLGETPROGRAMRESOURCENAMEPROC(glfwGetProcAddress("glGetProgramResourceName"));
  glGetProgramResourcefvNV = PFNGLGETPROGRAMRESOURCEFVNVPROC(glfwGetProcAddress("glGetProgramResourcefvNV"));
  glGetProgramResourceiv = PFNGLGETPROGRAMRESOURCEIVPROC(glfwGetProcAddress("glGetProgramResourceiv"));
  glGetProgramStageiv = PFNGLGETPROGRAMSTAGEIVPROC(glfwGetProcAddress("glGetProgramStageiv"));
  glGetProgramiv = PFNGLGETPROGRAMIVPROC(glfwGetProcAddress("glGetProgramiv"));
  glGetQueryBufferObjecti64v = PFNGLGETQUERYBUFFEROBJECTI64VPROC(glfwGetProcAddress("glGetQueryBufferObjecti64v"));
  glGetQueryBufferObjectiv = PFNGLGETQUERYBUFFEROBJECTIVPROC(glfwGetProcAddress("glGetQueryBufferObjectiv"));
  glGetQueryBufferObjectui64v = PFNGLGETQUERYBUFFEROBJECTUI64VPROC(glfwGetProcAddress("glGetQueryBufferObjectui64v"));
  glGetQueryBufferObjectuiv = PFNGLGETQUERYBUFFEROBJECTUIVPROC(glfwGetProcAddress("glGetQueryBufferObjectuiv"));
  glGetQueryIndexediv = PFNGLGETQUERYINDEXEDIVPROC(glfwGetProcAddress("glGetQueryIndexediv"));
  glGetQueryObjecti64v = PFNGLGETQUERYOBJECTI64VPROC(glfwGetProcAddress("glGetQueryObjecti64v"));
  glGetQueryObjectiv = PFNGLGETQUERYOBJECTIVPROC(glfwGetProcAddress("glGetQueryObjectiv"));
  glGetQueryObjectui64v = PFNGLGETQUERYOBJECTUI64VPROC(glfwGetProcAddress("glGetQueryObjectui64v"));
  glGetQueryObjectuiv = PFNGLGETQUERYOBJECTUIVPROC(glfwGetProcAddress("glGetQueryObjectuiv"));
  glGetQueryiv = PFNGLGETQUERYIVPROC(glfwGetProcAddress("glGetQueryiv"));
  glGetRenderbufferParameteriv = PFNGLGETRENDERBUFFERPARAMETERIVPROC(glfwGetProcAddress("glGetRenderbufferParameteriv"));
  glGetSamplerParameterIiv = PFNGLGETSAMPLERPARAMETERIIVPROC(glfwGetProcAddress("glGetSamplerParameterIiv"));
  glGetSamplerParameterIuiv = PFNGLGETSAMPLERPARAMETERIUIVPROC(glfwGetProcAddress("glGetSamplerParameterIuiv"));
  glGetSamplerParameterfv = PFNGLGETSAMPLERPARAMETERFVPROC(glfwGetProcAddress("glGetSamplerParameterfv"));
  glGetSamplerParameteriv = PFNGLGETSAMPLERPARAMETERIVPROC(glfwGetProcAddress("glGetSamplerParameteriv"));
  glGetShaderInfoLog = PFNGLGETSHADERINFOLOGPROC(glfwGetProcAddress("glGetShaderInfoLog"));
  glGetShaderPrecisionFormat = PFNGLGETSHADERPRECISIONFORMATPROC(glfwGetProcAddress("glGetShaderPrecisionFormat"));
  glGetShaderSource = PFNGLGETSHADERSOURCEPROC(glfwGetProcAddress("glGetShaderSource"));
  glGetShaderiv = PFNGLGETSHADERIVPROC(glfwGetProcAddress("glGetShaderiv"));
  glGetStageIndexNV = PFNGLGETSTAGEINDEXNVPROC(glfwGetProcAddress("glGetStageIndexNV"));
  glGetString = PFNGLGETSTRINGPROC(glfwGetProcAddress("glGetString"));
  glGetStringi = PFNGLGETSTRINGIPROC(glfwGetProcAddress("glGetStringi"));
  glGetSubroutineIndex = PFNGLGETSUBROUTINEINDEXPROC(glfwGetProcAddress("glGetSubroutineIndex"));
  glGetSubroutineUniformLocation = PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC(glfwGetProcAddress("glGetSubroutineUniformLocation"));
  glGetSynciv = PFNGLGETSYNCIVPROC(glfwGetProcAddress("glGetSynciv"));
  glGetTexImage = PFNGLGETTEXIMAGEPROC(glfwGetProcAddress("glGetTexImage"));
  glGetTexLevelParameterfv = PFNGLGETTEXLEVELPARAMETERFVPROC(glfwGetProcAddress("glGetTexLevelParameterfv"));
  glGetTexLevelParameteriv = PFNGLGETTEXLEVELPARAMETERIVPROC(glfwGetProcAddress("glGetTexLevelParameteriv"));
  glGetTexParameterIiv = PFNGLGETTEXPARAMETERIIVPROC(glfwGetProcAddress("glGetTexParameterIiv"));
  glGetTexParameterIuiv = PFNGLGETTEXPARAMETERIUIVPROC(glfwGetProcAddress("glGetTexParameterIuiv"));
  glGetTexParameterfv = PFNGLGETTEXPARAMETERFVPROC(glfwGetProcAddress("glGetTexParameterfv"));
  glGetTexParameteriv = PFNGLGETTEXPARAMETERIVPROC(glfwGetProcAddress("glGetTexParameteriv"));
  glGetTextureHandleARB = PFNGLGETTEXTUREHANDLEARBPROC(glfwGetProcAddress("glGetTextureHandleARB"));
  glGetTextureHandleNV = PFNGLGETTEXTUREHANDLENVPROC(glfwGetProcAddress("glGetTextureHandleNV"));
  glGetTextureImage = PFNGLGETTEXTUREIMAGEPROC(glfwGetProcAddress("glGetTextureImage"));
  glGetTextureImageEXT = PFNGLGETTEXTUREIMAGEEXTPROC(glfwGetProcAddress("glGetTextureImageEXT"));
  glGetTextureLevelParameterfv = PFNGLGETTEXTURELEVELPARAMETERFVPROC(glfwGetProcAddress("glGetTextureLevelParameterfv"));
  glGetTextureLevelParameterfvEXT = PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC(glfwGetProcAddress("glGetTextureLevelParameterfvEXT"));
  glGetTextureLevelParameteriv = PFNGLGETTEXTURELEVELPARAMETERIVPROC(glfwGetProcAddress("glGetTextureLevelParameteriv"));
  glGetTextureLevelParameterivEXT = PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC(glfwGetProcAddress("glGetTextureLevelParameterivEXT"));
  glGetTextureParameterIiv = PFNGLGETTEXTUREPARAMETERIIVPROC(glfwGetProcAddress("glGetTextureParameterIiv"));
  glGetTextureParameterIivEXT = PFNGLGETTEXTUREPARAMETERIIVEXTPROC(glfwGetProcAddress("glGetTextureParameterIivEXT"));
  glGetTextureParameterIuiv = PFNGLGETTEXTUREPARAMETERIUIVPROC(glfwGetProcAddress("glGetTextureParameterIuiv"));
  glGetTextureParameterIuivEXT = PFNGLGETTEXTUREPARAMETERIUIVEXTPROC(glfwGetProcAddress("glGetTextureParameterIuivEXT"));
  glGetTextureParameterfv = PFNGLGETTEXTUREPARAMETERFVPROC(glfwGetProcAddress("glGetTextureParameterfv"));
  glGetTextureParameterfvEXT = PFNGLGETTEXTUREPARAMETERFVEXTPROC(glfwGetProcAddress("glGetTextureParameterfvEXT"));
  glGetTextureParameteriv = PFNGLGETTEXTUREPARAMETERIVPROC(glfwGetProcAddress("glGetTextureParameteriv"));
  glGetTextureParameterivEXT = PFNGLGETTEXTUREPARAMETERIVEXTPROC(glfwGetProcAddress("glGetTextureParameterivEXT"));
  glGetTextureSamplerHandleARB = PFNGLGETTEXTURESAMPLERHANDLEARBPROC(glfwGetProcAddress("glGetTextureSamplerHandleARB"));
  glGetTextureSamplerHandleNV = PFNGLGETTEXTURESAMPLERHANDLENVPROC(glfwGetProcAddress("glGetTextureSamplerHandleNV"));
  glGetTextureSubImage = PFNGLGETTEXTURESUBIMAGEPROC(glfwGetProcAddress("glGetTextureSubImage"));
  glGetTransformFeedbackVarying = PFNGLGETTRANSFORMFEEDBACKVARYINGPROC(glfwGetProcAddress("glGetTransformFeedbackVarying"));
  glGetTransformFeedbacki64_v = PFNGLGETTRANSFORMFEEDBACKI64_VPROC(glfwGetProcAddress("glGetTransformFeedbacki64_v"));
  glGetTransformFeedbacki_v = PFNGLGETTRANSFORMFEEDBACKI_VPROC(glfwGetProcAddress("glGetTransformFeedbacki_v"));
  glGetTransformFeedbackiv = PFNGLGETTRANSFORMFEEDBACKIVPROC(glfwGetProcAddress("glGetTransformFeedbackiv"));
  glGetUniformBlockIndex = PFNGLGETUNIFORMBLOCKINDEXPROC(glfwGetProcAddress("glGetUniformBlockIndex"));
  glGetUniformIndices = PFNGLGETUNIFORMINDICESPROC(glfwGetProcAddress("glGetUniformIndices"));
  glGetUniformLocation = PFNGLGETUNIFORMLOCATIONPROC(glfwGetProcAddress("glGetUniformLocation"));
  glGetUniformSubroutineuiv = PFNGLGETUNIFORMSUBROUTINEUIVPROC(glfwGetProcAddress("glGetUniformSubroutineuiv"));
  glGetUniformdv = PFNGLGETUNIFORMDVPROC(glfwGetProcAddress("glGetUniformdv"));
  glGetUniformfv = PFNGLGETUNIFORMFVPROC(glfwGetProcAddress("glGetUniformfv"));
  glGetUniformi64vARB = PFNGLGETUNIFORMI64VARBPROC(glfwGetProcAddress("glGetUniformi64vARB"));
  glGetUniformi64vNV = PFNGLGETUNIFORMI64VNVPROC(glfwGetProcAddress("glGetUniformi64vNV"));
  glGetUniformiv = PFNGLGETUNIFORMIVPROC(glfwGetProcAddress("glGetUniformiv"));
  glGetUniformui64vARB = PFNGLGETUNIFORMUI64VARBPROC(glfwGetProcAddress("glGetUniformui64vARB"));
  glGetUniformui64vNV = PFNGLGETUNIFORMUI64VNVPROC(glfwGetProcAddress("glGetUniformui64vNV"));
  glGetUniformuiv = PFNGLGETUNIFORMUIVPROC(glfwGetProcAddress("glGetUniformuiv"));
  glGetVertexArrayIndexed64iv = PFNGLGETVERTEXARRAYINDEXED64IVPROC(glfwGetProcAddress("glGetVertexArrayIndexed64iv"));
  glGetVertexArrayIndexediv = PFNGLGETVERTEXARRAYINDEXEDIVPROC(glfwGetProcAddress("glGetVertexArrayIndexediv"));
  glGetVertexArrayIntegeri_vEXT = PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC(glfwGetProcAddress("glGetVertexArrayIntegeri_vEXT"));
  glGetVertexArrayIntegervEXT = PFNGLGETVERTEXARRAYINTEGERVEXTPROC(glfwGetProcAddress("glGetVertexArrayIntegervEXT"));
  glGetVertexArrayPointeri_vEXT = PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC(glfwGetProcAddress("glGetVertexArrayPointeri_vEXT"));
  glGetVertexArrayPointervEXT = PFNGLGETVERTEXARRAYPOINTERVEXTPROC(glfwGetProcAddress("glGetVertexArrayPointervEXT"));
  glGetVertexArrayiv = PFNGLGETVERTEXARRAYIVPROC(glfwGetProcAddress("glGetVertexArrayiv"));
  glGetVertexAttribIiv = PFNGLGETVERTEXATTRIBIIVPROC(glfwGetProcAddress("glGetVertexAttribIiv"));
  glGetVertexAttribIuiv = PFNGLGETVERTEXATTRIBIUIVPROC(glfwGetProcAddress("glGetVertexAttribIuiv"));
  glGetVertexAttribLdv = PFNGLGETVERTEXATTRIBLDVPROC(glfwGetProcAddress("glGetVertexAttribLdv"));
  glGetVertexAttribLi64vNV = PFNGLGETVERTEXATTRIBLI64VNVPROC(glfwGetProcAddress("glGetVertexAttribLi64vNV"));
  glGetVertexAttribLui64vARB = PFNGLGETVERTEXATTRIBLUI64VARBPROC(glfwGetProcAddress("glGetVertexAttribLui64vARB"));
  glGetVertexAttribLui64vNV = PFNGLGETVERTEXATTRIBLUI64VNVPROC(glfwGetProcAddress("glGetVertexAttribLui64vNV"));
  glGetVertexAttribPointerv = PFNGLGETVERTEXATTRIBPOINTERVPROC(glfwGetProcAddress("glGetVertexAttribPointerv"));
  glGetVertexAttribdv = PFNGLGETVERTEXATTRIBDVPROC(glfwGetProcAddress("glGetVertexAttribdv"));
  glGetVertexAttribfv = PFNGLGETVERTEXATTRIBFVPROC(glfwGetProcAddress("glGetVertexAttribfv"));
  glGetVertexAttribiv = PFNGLGETVERTEXATTRIBIVPROC(glfwGetProcAddress("glGetVertexAttribiv"));
  glGetVkProcAddrNV = PFNGLGETVKPROCADDRNVPROC(glfwGetProcAddress("glGetVkProcAddrNV"));
  glGetnCompressedTexImage = PFNGLGETNCOMPRESSEDTEXIMAGEPROC(glfwGetProcAddress("glGetnCompressedTexImage"));
  glGetnCompressedTexImageARB = PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC(glfwGetProcAddress("glGetnCompressedTexImageARB"));
  glGetnTexImage = PFNGLGETNTEXIMAGEPROC(glfwGetProcAddress("glGetnTexImage"));
  glGetnTexImageARB = PFNGLGETNTEXIMAGEARBPROC(glfwGetProcAddress("glGetnTexImageARB"));
  glGetnUniformdv = PFNGLGETNUNIFORMDVPROC(glfwGetProcAddress("glGetnUniformdv"));
  glGetnUniformdvARB = PFNGLGETNUNIFORMDVARBPROC(glfwGetProcAddress("glGetnUniformdvARB"));
  glGetnUniformfv = PFNGLGETNUNIFORMFVPROC(glfwGetProcAddress("glGetnUniformfv"));
  glGetnUniformfvARB = PFNGLGETNUNIFORMFVARBPROC(glfwGetProcAddress("glGetnUniformfvARB"));
  glGetnUniformi64vARB = PFNGLGETNUNIFORMI64VARBPROC(glfwGetProcAddress("glGetnUniformi64vARB"));
  glGetnUniformiv = PFNGLGETNUNIFORMIVPROC(glfwGetProcAddress("glGetnUniformiv"));
  glGetnUniformivARB = PFNGLGETNUNIFORMIVARBPROC(glfwGetProcAddress("glGetnUniformivARB"));
  glGetnUniformui64vARB = PFNGLGETNUNIFORMUI64VARBPROC(glfwGetProcAddress("glGetnUniformui64vARB"));
  glGetnUniformuiv = PFNGLGETNUNIFORMUIVPROC(glfwGetProcAddress("glGetnUniformuiv"));
  glGetnUniformuivARB = PFNGLGETNUNIFORMUIVARBPROC(glfwGetProcAddress("glGetnUniformuivARB"));
  glHint = PFNGLHINTPROC(glfwGetProcAddress("glHint"));
  glIndexFormatNV = PFNGLINDEXFORMATNVPROC(glfwGetProcAddress("glIndexFormatNV"));
  glInsertEventMarkerEXT = PFNGLINSERTEVENTMARKEREXTPROC(glfwGetProcAddress("glInsertEventMarkerEXT"));
  glInterpolatePathsNV = PFNGLINTERPOLATEPATHSNVPROC(glfwGetProcAddress("glInterpolatePathsNV"));
  glInvalidateBufferData = PFNGLINVALIDATEBUFFERDATAPROC(glfwGetProcAddress("glInvalidateBufferData"));
  glInvalidateBufferSubData = PFNGLINVALIDATEBUFFERSUBDATAPROC(glfwGetProcAddress("glInvalidateBufferSubData"));
  glInvalidateFramebuffer = PFNGLINVALIDATEFRAMEBUFFERPROC(glfwGetProcAddress("glInvalidateFramebuffer"));
  glInvalidateNamedFramebufferData = PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC(glfwGetProcAddress("glInvalidateNamedFramebufferData"));
  glInvalidateNamedFramebufferSubData = PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC(glfwGetProcAddress("glInvalidateNamedFramebufferSubData"));
  glInvalidateSubFramebuffer = PFNGLINVALIDATESUBFRAMEBUFFERPROC(glfwGetProcAddress("glInvalidateSubFramebuffer"));
  glInvalidateTexImage = PFNGLINVALIDATETEXIMAGEPROC(glfwGetProcAddress("glInvalidateTexImage"));
  glInvalidateTexSubImage = PFNGLINVALIDATETEXSUBIMAGEPROC(glfwGetProcAddress("glInvalidateTexSubImage"));
  glIsBuffer = PFNGLISBUFFERPROC(glfwGetProcAddress("glIsBuffer"));
  glIsBufferResidentNV = PFNGLISBUFFERRESIDENTNVPROC(glfwGetProcAddress("glIsBufferResidentNV"));
  glIsCommandListNV = PFNGLISCOMMANDLISTNVPROC(glfwGetProcAddress("glIsCommandListNV"));
  glIsEnabled = PFNGLISENABLEDPROC(glfwGetProcAddress("glIsEnabled"));
  glIsEnabledIndexedEXT = PFNGLISENABLEDINDEXEDEXTPROC(glfwGetProcAddress("glIsEnabledIndexedEXT"));
  glIsEnabledi = PFNGLISENABLEDIPROC(glfwGetProcAddress("glIsEnabledi"));
  glIsFramebuffer = PFNGLISFRAMEBUFFERPROC(glfwGetProcAddress("glIsFramebuffer"));
  glIsImageHandleResidentARB = PFNGLISIMAGEHANDLERESIDENTARBPROC(glfwGetProcAddress("glIsImageHandleResidentARB"));
  glIsImageHandleResidentNV = PFNGLISIMAGEHANDLERESIDENTNVPROC(glfwGetProcAddress("glIsImageHandleResidentNV"));
  glIsNamedBufferResidentNV = PFNGLISNAMEDBUFFERRESIDENTNVPROC(glfwGetProcAddress("glIsNamedBufferResidentNV"));
  glIsNamedStringARB = PFNGLISNAMEDSTRINGARBPROC(glfwGetProcAddress("glIsNamedStringARB"));
  glIsPathNV = PFNGLISPATHNVPROC(glfwGetProcAddress("glIsPathNV"));
  glIsPointInFillPathNV = PFNGLISPOINTINFILLPATHNVPROC(glfwGetProcAddress("glIsPointInFillPathNV"));
  glIsPointInStrokePathNV = PFNGLISPOINTINSTROKEPATHNVPROC(glfwGetProcAddress("glIsPointInStrokePathNV"));
  glIsProgram = PFNGLISPROGRAMPROC(glfwGetProcAddress("glIsProgram"));
  glIsProgramPipeline = PFNGLISPROGRAMPIPELINEPROC(glfwGetProcAddress("glIsProgramPipeline"));
  glIsQuery = PFNGLISQUERYPROC(glfwGetProcAddress("glIsQuery"));
  glIsRenderbuffer = PFNGLISRENDERBUFFERPROC(glfwGetProcAddress("glIsRenderbuffer"));
  glIsSampler = PFNGLISSAMPLERPROC(glfwGetProcAddress("glIsSampler"));
  glIsShader = PFNGLISSHADERPROC(glfwGetProcAddress("glIsShader"));
  glIsStateNV = PFNGLISSTATENVPROC(glfwGetProcAddress("glIsStateNV"));
  glIsSync = PFNGLISSYNCPROC(glfwGetProcAddress("glIsSync"));
  glIsTexture = PFNGLISTEXTUREPROC(glfwGetProcAddress("glIsTexture"));
  glIsTextureHandleResidentARB = PFNGLISTEXTUREHANDLERESIDENTARBPROC(glfwGetProcAddress("glIsTextureHandleResidentARB"));
  glIsTextureHandleResidentNV = PFNGLISTEXTUREHANDLERESIDENTNVPROC(glfwGetProcAddress("glIsTextureHandleResidentNV"));
  glIsTransformFeedback = PFNGLISTRANSFORMFEEDBACKPROC(glfwGetProcAddress("glIsTransformFeedback"));
  glIsVertexArray = PFNGLISVERTEXARRAYPROC(glfwGetProcAddress("glIsVertexArray"));
  glLabelObjectEXT = PFNGLLABELOBJECTEXTPROC(glfwGetProcAddress("glLabelObjectEXT"));
  glLineWidth = PFNGLLINEWIDTHPROC(glfwGetProcAddress("glLineWidth"));
  glLinkProgram = PFNGLLINKPROGRAMPROC(glfwGetProcAddress("glLinkProgram"));
  glListDrawCommandsStatesClientNV = PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC(glfwGetProcAddress("glListDrawCommandsStatesClientNV"));
  glLogicOp = PFNGLLOGICOPPROC(glfwGetProcAddress("glLogicOp"));
  glMakeBufferNonResidentNV = PFNGLMAKEBUFFERNONRESIDENTNVPROC(glfwGetProcAddress("glMakeBufferNonResidentNV"));
  glMakeBufferResidentNV = PFNGLMAKEBUFFERRESIDENTNVPROC(glfwGetProcAddress("glMakeBufferResidentNV"));
  glMakeImageHandleNonResidentARB = PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC(glfwGetProcAddress("glMakeImageHandleNonResidentARB"));
  glMakeImageHandleNonResidentNV = PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC(glfwGetProcAddress("glMakeImageHandleNonResidentNV"));
  glMakeImageHandleResidentARB = PFNGLMAKEIMAGEHANDLERESIDENTARBPROC(glfwGetProcAddress("glMakeImageHandleResidentARB"));
  glMakeImageHandleResidentNV = PFNGLMAKEIMAGEHANDLERESIDENTNVPROC(glfwGetProcAddress("glMakeImageHandleResidentNV"));
  glMakeNamedBufferNonResidentNV = PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC(glfwGetProcAddress("glMakeNamedBufferNonResidentNV"));
  glMakeNamedBufferResidentNV = PFNGLMAKENAMEDBUFFERRESIDENTNVPROC(glfwGetProcAddress("glMakeNamedBufferResidentNV"));
  glMakeTextureHandleNonResidentARB = PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC(glfwGetProcAddress("glMakeTextureHandleNonResidentARB"));
  glMakeTextureHandleNonResidentNV = PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC(glfwGetProcAddress("glMakeTextureHandleNonResidentNV"));
  glMakeTextureHandleResidentARB = PFNGLMAKETEXTUREHANDLERESIDENTARBPROC(glfwGetProcAddress("glMakeTextureHandleResidentARB"));
  glMakeTextureHandleResidentNV = PFNGLMAKETEXTUREHANDLERESIDENTNVPROC(glfwGetProcAddress("glMakeTextureHandleResidentNV"));
  glMapBuffer = PFNGLMAPBUFFERPROC(glfwGetProcAddress("glMapBuffer"));
  glMapBufferRange = PFNGLMAPBUFFERRANGEPROC(glfwGetProcAddress("glMapBufferRange"));
  glMapNamedBuffer = PFNGLMAPNAMEDBUFFERPROC(glfwGetProcAddress("glMapNamedBuffer"));
  glMapNamedBufferEXT = PFNGLMAPNAMEDBUFFEREXTPROC(glfwGetProcAddress("glMapNamedBufferEXT"));
  glMapNamedBufferRange = PFNGLMAPNAMEDBUFFERRANGEPROC(glfwGetProcAddress("glMapNamedBufferRange"));
  glMapNamedBufferRangeEXT = PFNGLMAPNAMEDBUFFERRANGEEXTPROC(glfwGetProcAddress("glMapNamedBufferRangeEXT"));
  glMatrixFrustumEXT = PFNGLMATRIXFRUSTUMEXTPROC(glfwGetProcAddress("glMatrixFrustumEXT"));
  glMatrixLoad3x2fNV = PFNGLMATRIXLOAD3X2FNVPROC(glfwGetProcAddress("glMatrixLoad3x2fNV"));
  glMatrixLoad3x3fNV = PFNGLMATRIXLOAD3X3FNVPROC(glfwGetProcAddress("glMatrixLoad3x3fNV"));
  glMatrixLoadIdentityEXT = PFNGLMATRIXLOADIDENTITYEXTPROC(glfwGetProcAddress("glMatrixLoadIdentityEXT"));
  glMatrixLoadTranspose3x3fNV = PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC(glfwGetProcAddress("glMatrixLoadTranspose3x3fNV"));
  glMatrixLoadTransposedEXT = PFNGLMATRIXLOADTRANSPOSEDEXTPROC(glfwGetProcAddress("glMatrixLoadTransposedEXT"));
  glMatrixLoadTransposefEXT = PFNGLMATRIXLOADTRANSPOSEFEXTPROC(glfwGetProcAddress("glMatrixLoadTransposefEXT"));
  glMatrixLoaddEXT = PFNGLMATRIXLOADDEXTPROC(glfwGetProcAddress("glMatrixLoaddEXT"));
  glMatrixLoadfEXT = PFNGLMATRIXLOADFEXTPROC(glfwGetProcAddress("glMatrixLoadfEXT"));
  glMatrixMult3x2fNV = PFNGLMATRIXMULT3X2FNVPROC(glfwGetProcAddress("glMatrixMult3x2fNV"));
  glMatrixMult3x3fNV = PFNGLMATRIXMULT3X3FNVPROC(glfwGetProcAddress("glMatrixMult3x3fNV"));
  glMatrixMultTranspose3x3fNV = PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC(glfwGetProcAddress("glMatrixMultTranspose3x3fNV"));
  glMatrixMultTransposedEXT = PFNGLMATRIXMULTTRANSPOSEDEXTPROC(glfwGetProcAddress("glMatrixMultTransposedEXT"));
  glMatrixMultTransposefEXT = PFNGLMATRIXMULTTRANSPOSEFEXTPROC(glfwGetProcAddress("glMatrixMultTransposefEXT"));
  glMatrixMultdEXT = PFNGLMATRIXMULTDEXTPROC(glfwGetProcAddress("glMatrixMultdEXT"));
  glMatrixMultfEXT = PFNGLMATRIXMULTFEXTPROC(glfwGetProcAddress("glMatrixMultfEXT"));
  glMatrixOrthoEXT = PFNGLMATRIXORTHOEXTPROC(glfwGetProcAddress("glMatrixOrthoEXT"));
  glMatrixPopEXT = PFNGLMATRIXPOPEXTPROC(glfwGetProcAddress("glMatrixPopEXT"));
  glMatrixPushEXT = PFNGLMATRIXPUSHEXTPROC(glfwGetProcAddress("glMatrixPushEXT"));
  glMatrixRotatedEXT = PFNGLMATRIXROTATEDEXTPROC(glfwGetProcAddress("glMatrixRotatedEXT"));
  glMatrixRotatefEXT = PFNGLMATRIXROTATEFEXTPROC(glfwGetProcAddress("glMatrixRotatefEXT"));
  glMatrixScaledEXT = PFNGLMATRIXSCALEDEXTPROC(glfwGetProcAddress("glMatrixScaledEXT"));
  glMatrixScalefEXT = PFNGLMATRIXSCALEFEXTPROC(glfwGetProcAddress("glMatrixScalefEXT"));
  glMatrixTranslatedEXT = PFNGLMATRIXTRANSLATEDEXTPROC(glfwGetProcAddress("glMatrixTranslatedEXT"));
  glMatrixTranslatefEXT = PFNGLMATRIXTRANSLATEFEXTPROC(glfwGetProcAddress("glMatrixTranslatefEXT"));
  glMaxShaderCompilerThreadsARB = PFNGLMAXSHADERCOMPILERTHREADSARBPROC(glfwGetProcAddress("glMaxShaderCompilerThreadsARB"));
  glMemoryBarrier = PFNGLMEMORYBARRIERPROC(glfwGetProcAddress("glMemoryBarrier"));
  glMemoryBarrierByRegion = PFNGLMEMORYBARRIERBYREGIONPROC(glfwGetProcAddress("glMemoryBarrierByRegion"));
  glMinSampleShading = PFNGLMINSAMPLESHADINGPROC(glfwGetProcAddress("glMinSampleShading"));
  glMinSampleShadingARB = PFNGLMINSAMPLESHADINGARBPROC(glfwGetProcAddress("glMinSampleShadingARB"));
  glMultiDrawArrays = PFNGLMULTIDRAWARRAYSPROC(glfwGetProcAddress("glMultiDrawArrays"));
  glMultiDrawArraysIndirect = PFNGLMULTIDRAWARRAYSINDIRECTPROC(glfwGetProcAddress("glMultiDrawArraysIndirect"));
  glMultiDrawArraysIndirectBindlessCountNV = PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC(glfwGetProcAddress("glMultiDrawArraysIndirectBindlessCountNV"));
  glMultiDrawArraysIndirectBindlessNV = PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC(glfwGetProcAddress("glMultiDrawArraysIndirectBindlessNV"));
  glMultiDrawArraysIndirectCountARB = PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC(glfwGetProcAddress("glMultiDrawArraysIndirectCountARB"));
  glMultiDrawElements = PFNGLMULTIDRAWELEMENTSPROC(glfwGetProcAddress("glMultiDrawElements"));
  glMultiDrawElementsBaseVertex = PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC(glfwGetProcAddress("glMultiDrawElementsBaseVertex"));
  glMultiDrawElementsIndirect = PFNGLMULTIDRAWELEMENTSINDIRECTPROC(glfwGetProcAddress("glMultiDrawElementsIndirect"));
  glMultiDrawElementsIndirectBindlessCountNV = PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC(glfwGetProcAddress("glMultiDrawElementsIndirectBindlessCountNV"));
  glMultiDrawElementsIndirectBindlessNV = PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC(glfwGetProcAddress("glMultiDrawElementsIndirectBindlessNV"));
  glMultiDrawElementsIndirectCountARB = PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC(glfwGetProcAddress("glMultiDrawElementsIndirectCountARB"));
  glMultiTexBufferEXT = PFNGLMULTITEXBUFFEREXTPROC(glfwGetProcAddress("glMultiTexBufferEXT"));
  glMultiTexCoordPointerEXT = PFNGLMULTITEXCOORDPOINTEREXTPROC(glfwGetProcAddress("glMultiTexCoordPointerEXT"));
  glMultiTexEnvfEXT = PFNGLMULTITEXENVFEXTPROC(glfwGetProcAddress("glMultiTexEnvfEXT"));
  glMultiTexEnvfvEXT = PFNGLMULTITEXENVFVEXTPROC(glfwGetProcAddress("glMultiTexEnvfvEXT"));
  glMultiTexEnviEXT = PFNGLMULTITEXENVIEXTPROC(glfwGetProcAddress("glMultiTexEnviEXT"));
  glMultiTexEnvivEXT = PFNGLMULTITEXENVIVEXTPROC(glfwGetProcAddress("glMultiTexEnvivEXT"));
  glMultiTexGendEXT = PFNGLMULTITEXGENDEXTPROC(glfwGetProcAddress("glMultiTexGendEXT"));
  glMultiTexGendvEXT = PFNGLMULTITEXGENDVEXTPROC(glfwGetProcAddress("glMultiTexGendvEXT"));
  glMultiTexGenfEXT = PFNGLMULTITEXGENFEXTPROC(glfwGetProcAddress("glMultiTexGenfEXT"));
  glMultiTexGenfvEXT = PFNGLMULTITEXGENFVEXTPROC(glfwGetProcAddress("glMultiTexGenfvEXT"));
  glMultiTexGeniEXT = PFNGLMULTITEXGENIEXTPROC(glfwGetProcAddress("glMultiTexGeniEXT"));
  glMultiTexGenivEXT = PFNGLMULTITEXGENIVEXTPROC(glfwGetProcAddress("glMultiTexGenivEXT"));
  glMultiTexImage1DEXT = PFNGLMULTITEXIMAGE1DEXTPROC(glfwGetProcAddress("glMultiTexImage1DEXT"));
  glMultiTexImage2DEXT = PFNGLMULTITEXIMAGE2DEXTPROC(glfwGetProcAddress("glMultiTexImage2DEXT"));
  glMultiTexImage3DEXT = PFNGLMULTITEXIMAGE3DEXTPROC(glfwGetProcAddress("glMultiTexImage3DEXT"));
  glMultiTexParameterIivEXT = PFNGLMULTITEXPARAMETERIIVEXTPROC(glfwGetProcAddress("glMultiTexParameterIivEXT"));
  glMultiTexParameterIuivEXT = PFNGLMULTITEXPARAMETERIUIVEXTPROC(glfwGetProcAddress("glMultiTexParameterIuivEXT"));
  glMultiTexParameterfEXT = PFNGLMULTITEXPARAMETERFEXTPROC(glfwGetProcAddress("glMultiTexParameterfEXT"));
  glMultiTexParameterfvEXT = PFNGLMULTITEXPARAMETERFVEXTPROC(glfwGetProcAddress("glMultiTexParameterfvEXT"));
  glMultiTexParameteriEXT = PFNGLMULTITEXPARAMETERIEXTPROC(glfwGetProcAddress("glMultiTexParameteriEXT"));
  glMultiTexParameterivEXT = PFNGLMULTITEXPARAMETERIVEXTPROC(glfwGetProcAddress("glMultiTexParameterivEXT"));
  glMultiTexRenderbufferEXT = PFNGLMULTITEXRENDERBUFFEREXTPROC(glfwGetProcAddress("glMultiTexRenderbufferEXT"));
  glMultiTexSubImage1DEXT = PFNGLMULTITEXSUBIMAGE1DEXTPROC(glfwGetProcAddress("glMultiTexSubImage1DEXT"));
  glMultiTexSubImage2DEXT = PFNGLMULTITEXSUBIMAGE2DEXTPROC(glfwGetProcAddress("glMultiTexSubImage2DEXT"));
  glMultiTexSubImage3DEXT = PFNGLMULTITEXSUBIMAGE3DEXTPROC(glfwGetProcAddress("glMultiTexSubImage3DEXT"));
  glNamedBufferData = PFNGLNAMEDBUFFERDATAPROC(glfwGetProcAddress("glNamedBufferData"));
  glNamedBufferDataEXT = PFNGLNAMEDBUFFERDATAEXTPROC(glfwGetProcAddress("glNamedBufferDataEXT"));
  glNamedBufferPageCommitmentARB = PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC(glfwGetProcAddress("glNamedBufferPageCommitmentARB"));
  glNamedBufferPageCommitmentEXT = PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC(glfwGetProcAddress("glNamedBufferPageCommitmentEXT"));
  glNamedBufferStorage = PFNGLNAMEDBUFFERSTORAGEPROC(glfwGetProcAddress("glNamedBufferStorage"));
  glNamedBufferStorageEXT = PFNGLNAMEDBUFFERSTORAGEEXTPROC(glfwGetProcAddress("glNamedBufferStorageEXT"));
  glNamedBufferSubData = PFNGLNAMEDBUFFERSUBDATAPROC(glfwGetProcAddress("glNamedBufferSubData"));
  glNamedBufferSubDataEXT = PFNGLNAMEDBUFFERSUBDATAEXTPROC(glfwGetProcAddress("glNamedBufferSubDataEXT"));
  glNamedCopyBufferSubDataEXT = PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC(glfwGetProcAddress("glNamedCopyBufferSubDataEXT"));
  glNamedFramebufferDrawBuffer = PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC(glfwGetProcAddress("glNamedFramebufferDrawBuffer"));
  glNamedFramebufferDrawBuffers = PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC(glfwGetProcAddress("glNamedFramebufferDrawBuffers"));
  glNamedFramebufferParameteri = PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC(glfwGetProcAddress("glNamedFramebufferParameteri"));
  glNamedFramebufferParameteriEXT = PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC(glfwGetProcAddress("glNamedFramebufferParameteriEXT"));
  glNamedFramebufferReadBuffer = PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC(glfwGetProcAddress("glNamedFramebufferReadBuffer"));
  glNamedFramebufferRenderbuffer = PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC(glfwGetProcAddress("glNamedFramebufferRenderbuffer"));
  glNamedFramebufferRenderbufferEXT = PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC(glfwGetProcAddress("glNamedFramebufferRenderbufferEXT"));
  glNamedFramebufferSampleLocationsfvARB = PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC(glfwGetProcAddress("glNamedFramebufferSampleLocationsfvARB"));
  glNamedFramebufferSampleLocationsfvNV = PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC(glfwGetProcAddress("glNamedFramebufferSampleLocationsfvNV"));
  glNamedFramebufferTexture = PFNGLNAMEDFRAMEBUFFERTEXTUREPROC(glfwGetProcAddress("glNamedFramebufferTexture"));
  glNamedFramebufferTexture1DEXT = PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC(glfwGetProcAddress("glNamedFramebufferTexture1DEXT"));
  glNamedFramebufferTexture2DEXT = PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC(glfwGetProcAddress("glNamedFramebufferTexture2DEXT"));
  glNamedFramebufferTexture3DEXT = PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC(glfwGetProcAddress("glNamedFramebufferTexture3DEXT"));
  glNamedFramebufferTextureEXT = PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC(glfwGetProcAddress("glNamedFramebufferTextureEXT"));
  glNamedFramebufferTextureFaceEXT = PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC(glfwGetProcAddress("glNamedFramebufferTextureFaceEXT"));
  glNamedFramebufferTextureLayer = PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC(glfwGetProcAddress("glNamedFramebufferTextureLayer"));
  glNamedFramebufferTextureLayerEXT = PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC(glfwGetProcAddress("glNamedFramebufferTextureLayerEXT"));
  glNamedProgramLocalParameter4dEXT = PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameter4dEXT"));
  glNamedProgramLocalParameter4dvEXT = PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameter4dvEXT"));
  glNamedProgramLocalParameter4fEXT = PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameter4fEXT"));
  glNamedProgramLocalParameter4fvEXT = PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameter4fvEXT"));
  glNamedProgramLocalParameterI4iEXT = PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameterI4iEXT"));
  glNamedProgramLocalParameterI4ivEXT = PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameterI4ivEXT"));
  glNamedProgramLocalParameterI4uiEXT = PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameterI4uiEXT"));
  glNamedProgramLocalParameterI4uivEXT = PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameterI4uivEXT"));
  glNamedProgramLocalParameters4fvEXT = PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC(glfwGetProcAddress("glNamedProgramLocalParameters4fvEXT"));
  glNamedProgramLocalParametersI4ivEXT = PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC(glfwGetProcAddress("glNamedProgramLocalParametersI4ivEXT"));
  glNamedProgramLocalParametersI4uivEXT = PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC(glfwGetProcAddress("glNamedProgramLocalParametersI4uivEXT"));
  glNamedProgramStringEXT = PFNGLNAMEDPROGRAMSTRINGEXTPROC(glfwGetProcAddress("glNamedProgramStringEXT"));
  glNamedRenderbufferStorage = PFNGLNAMEDRENDERBUFFERSTORAGEPROC(glfwGetProcAddress("glNamedRenderbufferStorage"));
  glNamedRenderbufferStorageEXT = PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC(glfwGetProcAddress("glNamedRenderbufferStorageEXT"));
  glNamedRenderbufferStorageMultisample = PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC(glfwGetProcAddress("glNamedRenderbufferStorageMultisample"));
  glNamedRenderbufferStorageMultisampleCoverageEXT = PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC(glfwGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT"));
  glNamedRenderbufferStorageMultisampleEXT = PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC(glfwGetProcAddress("glNamedRenderbufferStorageMultisampleEXT"));
  glNamedStringARB = PFNGLNAMEDSTRINGARBPROC(glfwGetProcAddress("glNamedStringARB"));
  glNormalFormatNV = PFNGLNORMALFORMATNVPROC(glfwGetProcAddress("glNormalFormatNV"));
  glObjectLabel = PFNGLOBJECTLABELPROC(glfwGetProcAddress("glObjectLabel"));
  glObjectPtrLabel = PFNGLOBJECTPTRLABELPROC(glfwGetProcAddress("glObjectPtrLabel"));
  glPatchParameterfv = PFNGLPATCHPARAMETERFVPROC(glfwGetProcAddress("glPatchParameterfv"));
  glPatchParameteri = PFNGLPATCHPARAMETERIPROC(glfwGetProcAddress("glPatchParameteri"));
  glPathCommandsNV = PFNGLPATHCOMMANDSNVPROC(glfwGetProcAddress("glPathCommandsNV"));
  glPathCoordsNV = PFNGLPATHCOORDSNVPROC(glfwGetProcAddress("glPathCoordsNV"));
  glPathCoverDepthFuncNV = PFNGLPATHCOVERDEPTHFUNCNVPROC(glfwGetProcAddress("glPathCoverDepthFuncNV"));
  glPathDashArrayNV = PFNGLPATHDASHARRAYNVPROC(glfwGetProcAddress("glPathDashArrayNV"));
  glPathGlyphIndexArrayNV = PFNGLPATHGLYPHINDEXARRAYNVPROC(glfwGetProcAddress("glPathGlyphIndexArrayNV"));
  glPathGlyphIndexRangeNV = PFNGLPATHGLYPHINDEXRANGENVPROC(glfwGetProcAddress("glPathGlyphIndexRangeNV"));
  glPathGlyphRangeNV = PFNGLPATHGLYPHRANGENVPROC(glfwGetProcAddress("glPathGlyphRangeNV"));
  glPathGlyphsNV = PFNGLPATHGLYPHSNVPROC(glfwGetProcAddress("glPathGlyphsNV"));
  glPathMemoryGlyphIndexArrayNV = PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC(glfwGetProcAddress("glPathMemoryGlyphIndexArrayNV"));
  glPathParameterfNV = PFNGLPATHPARAMETERFNVPROC(glfwGetProcAddress("glPathParameterfNV"));
  glPathParameterfvNV = PFNGLPATHPARAMETERFVNVPROC(glfwGetProcAddress("glPathParameterfvNV"));
  glPathParameteriNV = PFNGLPATHPARAMETERINVPROC(glfwGetProcAddress("glPathParameteriNV"));
  glPathParameterivNV = PFNGLPATHPARAMETERIVNVPROC(glfwGetProcAddress("glPathParameterivNV"));
  glPathStencilDepthOffsetNV = PFNGLPATHSTENCILDEPTHOFFSETNVPROC(glfwGetProcAddress("glPathStencilDepthOffsetNV"));
  glPathStencilFuncNV = PFNGLPATHSTENCILFUNCNVPROC(glfwGetProcAddress("glPathStencilFuncNV"));
  glPathStringNV = PFNGLPATHSTRINGNVPROC(glfwGetProcAddress("glPathStringNV"));
  glPathSubCommandsNV = PFNGLPATHSUBCOMMANDSNVPROC(glfwGetProcAddress("glPathSubCommandsNV"));
  glPathSubCoordsNV = PFNGLPATHSUBCOORDSNVPROC(glfwGetProcAddress("glPathSubCoordsNV"));
  glPauseTransformFeedback = PFNGLPAUSETRANSFORMFEEDBACKPROC(glfwGetProcAddress("glPauseTransformFeedback"));
  glPixelStoref = PFNGLPIXELSTOREFPROC(glfwGetProcAddress("glPixelStoref"));
  glPixelStorei = PFNGLPIXELSTOREIPROC(glfwGetProcAddress("glPixelStorei"));
  glPointAlongPathNV = PFNGLPOINTALONGPATHNVPROC(glfwGetProcAddress("glPointAlongPathNV"));
  glPointParameterf = PFNGLPOINTPARAMETERFPROC(glfwGetProcAddress("glPointParameterf"));
  glPointParameterfv = PFNGLPOINTPARAMETERFVPROC(glfwGetProcAddress("glPointParameterfv"));
  glPointParameteri = PFNGLPOINTPARAMETERIPROC(glfwGetProcAddress("glPointParameteri"));
  glPointParameteriv = PFNGLPOINTPARAMETERIVPROC(glfwGetProcAddress("glPointParameteriv"));
  glPointSize = PFNGLPOINTSIZEPROC(glfwGetProcAddress("glPointSize"));
  glPolygonMode = PFNGLPOLYGONMODEPROC(glfwGetProcAddress("glPolygonMode"));
  glPolygonOffset = PFNGLPOLYGONOFFSETPROC(glfwGetProcAddress("glPolygonOffset"));
  glPolygonOffsetClampEXT = PFNGLPOLYGONOFFSETCLAMPEXTPROC(glfwGetProcAddress("glPolygonOffsetClampEXT"));
  glPopDebugGroup = PFNGLPOPDEBUGGROUPPROC(glfwGetProcAddress("glPopDebugGroup"));
  glPopGroupMarkerEXT = PFNGLPOPGROUPMARKEREXTPROC(glfwGetProcAddress("glPopGroupMarkerEXT"));
  glPrimitiveBoundingBoxARB = PFNGLPRIMITIVEBOUNDINGBOXARBPROC(glfwGetProcAddress("glPrimitiveBoundingBoxARB"));
  glPrimitiveRestartIndex = PFNGLPRIMITIVERESTARTINDEXPROC(glfwGetProcAddress("glPrimitiveRestartIndex"));
  glProgramBinary = PFNGLPROGRAMBINARYPROC(glfwGetProcAddress("glProgramBinary"));
  glProgramParameteri = PFNGLPROGRAMPARAMETERIPROC(glfwGetProcAddress("glProgramParameteri"));
  glProgramParameteriARB = PFNGLPROGRAMPARAMETERIARBPROC(glfwGetProcAddress("glProgramParameteriARB"));
  glProgramPathFragmentInputGenNV = PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC(glfwGetProcAddress("glProgramPathFragmentInputGenNV"));
  glProgramUniform1d = PFNGLPROGRAMUNIFORM1DPROC(glfwGetProcAddress("glProgramUniform1d"));
  glProgramUniform1dEXT = PFNGLPROGRAMUNIFORM1DEXTPROC(glfwGetProcAddress("glProgramUniform1dEXT"));
  glProgramUniform1dv = PFNGLPROGRAMUNIFORM1DVPROC(glfwGetProcAddress("glProgramUniform1dv"));
  glProgramUniform1dvEXT = PFNGLPROGRAMUNIFORM1DVEXTPROC(glfwGetProcAddress("glProgramUniform1dvEXT"));
  glProgramUniform1f = PFNGLPROGRAMUNIFORM1FPROC(glfwGetProcAddress("glProgramUniform1f"));
  glProgramUniform1fEXT = PFNGLPROGRAMUNIFORM1FEXTPROC(glfwGetProcAddress("glProgramUniform1fEXT"));
  glProgramUniform1fv = PFNGLPROGRAMUNIFORM1FVPROC(glfwGetProcAddress("glProgramUniform1fv"));
  glProgramUniform1fvEXT = PFNGLPROGRAMUNIFORM1FVEXTPROC(glfwGetProcAddress("glProgramUniform1fvEXT"));
  glProgramUniform1i = PFNGLPROGRAMUNIFORM1IPROC(glfwGetProcAddress("glProgramUniform1i"));
  glProgramUniform1i64ARB = PFNGLPROGRAMUNIFORM1I64ARBPROC(glfwGetProcAddress("glProgramUniform1i64ARB"));
  glProgramUniform1i64NV = PFNGLPROGRAMUNIFORM1I64NVPROC(glfwGetProcAddress("glProgramUniform1i64NV"));
  glProgramUniform1i64vARB = PFNGLPROGRAMUNIFORM1I64VARBPROC(glfwGetProcAddress("glProgramUniform1i64vARB"));
  glProgramUniform1i64vNV = PFNGLPROGRAMUNIFORM1I64VNVPROC(glfwGetProcAddress("glProgramUniform1i64vNV"));
  glProgramUniform1iEXT = PFNGLPROGRAMUNIFORM1IEXTPROC(glfwGetProcAddress("glProgramUniform1iEXT"));
  glProgramUniform1iv = PFNGLPROGRAMUNIFORM1IVPROC(glfwGetProcAddress("glProgramUniform1iv"));
  glProgramUniform1ivEXT = PFNGLPROGRAMUNIFORM1IVEXTPROC(glfwGetProcAddress("glProgramUniform1ivEXT"));
  glProgramUniform1ui = PFNGLPROGRAMUNIFORM1UIPROC(glfwGetProcAddress("glProgramUniform1ui"));
  glProgramUniform1ui64ARB = PFNGLPROGRAMUNIFORM1UI64ARBPROC(glfwGetProcAddress("glProgramUniform1ui64ARB"));
  glProgramUniform1ui64NV = PFNGLPROGRAMUNIFORM1UI64NVPROC(glfwGetProcAddress("glProgramUniform1ui64NV"));
  glProgramUniform1ui64vARB = PFNGLPROGRAMUNIFORM1UI64VARBPROC(glfwGetProcAddress("glProgramUniform1ui64vARB"));
  glProgramUniform1ui64vNV = PFNGLPROGRAMUNIFORM1UI64VNVPROC(glfwGetProcAddress("glProgramUniform1ui64vNV"));
  glProgramUniform1uiEXT = PFNGLPROGRAMUNIFORM1UIEXTPROC(glfwGetProcAddress("glProgramUniform1uiEXT"));
  glProgramUniform1uiv = PFNGLPROGRAMUNIFORM1UIVPROC(glfwGetProcAddress("glProgramUniform1uiv"));
  glProgramUniform1uivEXT = PFNGLPROGRAMUNIFORM1UIVEXTPROC(glfwGetProcAddress("glProgramUniform1uivEXT"));
  glProgramUniform2d = PFNGLPROGRAMUNIFORM2DPROC(glfwGetProcAddress("glProgramUniform2d"));
  glProgramUniform2dEXT = PFNGLPROGRAMUNIFORM2DEXTPROC(glfwGetProcAddress("glProgramUniform2dEXT"));
  glProgramUniform2dv = PFNGLPROGRAMUNIFORM2DVPROC(glfwGetProcAddress("glProgramUniform2dv"));
  glProgramUniform2dvEXT = PFNGLPROGRAMUNIFORM2DVEXTPROC(glfwGetProcAddress("glProgramUniform2dvEXT"));
  glProgramUniform2f = PFNGLPROGRAMUNIFORM2FPROC(glfwGetProcAddress("glProgramUniform2f"));
  glProgramUniform2fEXT = PFNGLPROGRAMUNIFORM2FEXTPROC(glfwGetProcAddress("glProgramUniform2fEXT"));
  glProgramUniform2fv = PFNGLPROGRAMUNIFORM2FVPROC(glfwGetProcAddress("glProgramUniform2fv"));
  glProgramUniform2fvEXT = PFNGLPROGRAMUNIFORM2FVEXTPROC(glfwGetProcAddress("glProgramUniform2fvEXT"));
  glProgramUniform2i = PFNGLPROGRAMUNIFORM2IPROC(glfwGetProcAddress("glProgramUniform2i"));
  glProgramUniform2i64ARB = PFNGLPROGRAMUNIFORM2I64ARBPROC(glfwGetProcAddress("glProgramUniform2i64ARB"));
  glProgramUniform2i64NV = PFNGLPROGRAMUNIFORM2I64NVPROC(glfwGetProcAddress("glProgramUniform2i64NV"));
  glProgramUniform2i64vARB = PFNGLPROGRAMUNIFORM2I64VARBPROC(glfwGetProcAddress("glProgramUniform2i64vARB"));
  glProgramUniform2i64vNV = PFNGLPROGRAMUNIFORM2I64VNVPROC(glfwGetProcAddress("glProgramUniform2i64vNV"));
  glProgramUniform2iEXT = PFNGLPROGRAMUNIFORM2IEXTPROC(glfwGetProcAddress("glProgramUniform2iEXT"));
  glProgramUniform2iv = PFNGLPROGRAMUNIFORM2IVPROC(glfwGetProcAddress("glProgramUniform2iv"));
  glProgramUniform2ivEXT = PFNGLPROGRAMUNIFORM2IVEXTPROC(glfwGetProcAddress("glProgramUniform2ivEXT"));
  glProgramUniform2ui = PFNGLPROGRAMUNIFORM2UIPROC(glfwGetProcAddress("glProgramUniform2ui"));
  glProgramUniform2ui64ARB = PFNGLPROGRAMUNIFORM2UI64ARBPROC(glfwGetProcAddress("glProgramUniform2ui64ARB"));
  glProgramUniform2ui64NV = PFNGLPROGRAMUNIFORM2UI64NVPROC(glfwGetProcAddress("glProgramUniform2ui64NV"));
  glProgramUniform2ui64vARB = PFNGLPROGRAMUNIFORM2UI64VARBPROC(glfwGetProcAddress("glProgramUniform2ui64vARB"));
  glProgramUniform2ui64vNV = PFNGLPROGRAMUNIFORM2UI64VNVPROC(glfwGetProcAddress("glProgramUniform2ui64vNV"));
  glProgramUniform2uiEXT = PFNGLPROGRAMUNIFORM2UIEXTPROC(glfwGetProcAddress("glProgramUniform2uiEXT"));
  glProgramUniform2uiv = PFNGLPROGRAMUNIFORM2UIVPROC(glfwGetProcAddress("glProgramUniform2uiv"));
  glProgramUniform2uivEXT = PFNGLPROGRAMUNIFORM2UIVEXTPROC(glfwGetProcAddress("glProgramUniform2uivEXT"));
  glProgramUniform3d = PFNGLPROGRAMUNIFORM3DPROC(glfwGetProcAddress("glProgramUniform3d"));
  glProgramUniform3dEXT = PFNGLPROGRAMUNIFORM3DEXTPROC(glfwGetProcAddress("glProgramUniform3dEXT"));
  glProgramUniform3dv = PFNGLPROGRAMUNIFORM3DVPROC(glfwGetProcAddress("glProgramUniform3dv"));
  glProgramUniform3dvEXT = PFNGLPROGRAMUNIFORM3DVEXTPROC(glfwGetProcAddress("glProgramUniform3dvEXT"));
  glProgramUniform3f = PFNGLPROGRAMUNIFORM3FPROC(glfwGetProcAddress("glProgramUniform3f"));
  glProgramUniform3fEXT = PFNGLPROGRAMUNIFORM3FEXTPROC(glfwGetProcAddress("glProgramUniform3fEXT"));
  glProgramUniform3fv = PFNGLPROGRAMUNIFORM3FVPROC(glfwGetProcAddress("glProgramUniform3fv"));
  glProgramUniform3fvEXT = PFNGLPROGRAMUNIFORM3FVEXTPROC(glfwGetProcAddress("glProgramUniform3fvEXT"));
  glProgramUniform3i = PFNGLPROGRAMUNIFORM3IPROC(glfwGetProcAddress("glProgramUniform3i"));
  glProgramUniform3i64ARB = PFNGLPROGRAMUNIFORM3I64ARBPROC(glfwGetProcAddress("glProgramUniform3i64ARB"));
  glProgramUniform3i64NV = PFNGLPROGRAMUNIFORM3I64NVPROC(glfwGetProcAddress("glProgramUniform3i64NV"));
  glProgramUniform3i64vARB = PFNGLPROGRAMUNIFORM3I64VARBPROC(glfwGetProcAddress("glProgramUniform3i64vARB"));
  glProgramUniform3i64vNV = PFNGLPROGRAMUNIFORM3I64VNVPROC(glfwGetProcAddress("glProgramUniform3i64vNV"));
  glProgramUniform3iEXT = PFNGLPROGRAMUNIFORM3IEXTPROC(glfwGetProcAddress("glProgramUniform3iEXT"));
  glProgramUniform3iv = PFNGLPROGRAMUNIFORM3IVPROC(glfwGetProcAddress("glProgramUniform3iv"));
  glProgramUniform3ivEXT = PFNGLPROGRAMUNIFORM3IVEXTPROC(glfwGetProcAddress("glProgramUniform3ivEXT"));
  glProgramUniform3ui = PFNGLPROGRAMUNIFORM3UIPROC(glfwGetProcAddress("glProgramUniform3ui"));
  glProgramUniform3ui64ARB = PFNGLPROGRAMUNIFORM3UI64ARBPROC(glfwGetProcAddress("glProgramUniform3ui64ARB"));
  glProgramUniform3ui64NV = PFNGLPROGRAMUNIFORM3UI64NVPROC(glfwGetProcAddress("glProgramUniform3ui64NV"));
  glProgramUniform3ui64vARB = PFNGLPROGRAMUNIFORM3UI64VARBPROC(glfwGetProcAddress("glProgramUniform3ui64vARB"));
  glProgramUniform3ui64vNV = PFNGLPROGRAMUNIFORM3UI64VNVPROC(glfwGetProcAddress("glProgramUniform3ui64vNV"));
  glProgramUniform3uiEXT = PFNGLPROGRAMUNIFORM3UIEXTPROC(glfwGetProcAddress("glProgramUniform3uiEXT"));
  glProgramUniform3uiv = PFNGLPROGRAMUNIFORM3UIVPROC(glfwGetProcAddress("glProgramUniform3uiv"));
  glProgramUniform3uivEXT = PFNGLPROGRAMUNIFORM3UIVEXTPROC(glfwGetProcAddress("glProgramUniform3uivEXT"));
  glProgramUniform4d = PFNGLPROGRAMUNIFORM4DPROC(glfwGetProcAddress("glProgramUniform4d"));
  glProgramUniform4dEXT = PFNGLPROGRAMUNIFORM4DEXTPROC(glfwGetProcAddress("glProgramUniform4dEXT"));
  glProgramUniform4dv = PFNGLPROGRAMUNIFORM4DVPROC(glfwGetProcAddress("glProgramUniform4dv"));
  glProgramUniform4dvEXT = PFNGLPROGRAMUNIFORM4DVEXTPROC(glfwGetProcAddress("glProgramUniform4dvEXT"));
  glProgramUniform4f = PFNGLPROGRAMUNIFORM4FPROC(glfwGetProcAddress("glProgramUniform4f"));
  glProgramUniform4fEXT = PFNGLPROGRAMUNIFORM4FEXTPROC(glfwGetProcAddress("glProgramUniform4fEXT"));
  glProgramUniform4fv = PFNGLPROGRAMUNIFORM4FVPROC(glfwGetProcAddress("glProgramUniform4fv"));
  glProgramUniform4fvEXT = PFNGLPROGRAMUNIFORM4FVEXTPROC(glfwGetProcAddress("glProgramUniform4fvEXT"));
  glProgramUniform4i = PFNGLPROGRAMUNIFORM4IPROC(glfwGetProcAddress("glProgramUniform4i"));
  glProgramUniform4i64ARB = PFNGLPROGRAMUNIFORM4I64ARBPROC(glfwGetProcAddress("glProgramUniform4i64ARB"));
  glProgramUniform4i64NV = PFNGLPROGRAMUNIFORM4I64NVPROC(glfwGetProcAddress("glProgramUniform4i64NV"));
  glProgramUniform4i64vARB = PFNGLPROGRAMUNIFORM4I64VARBPROC(glfwGetProcAddress("glProgramUniform4i64vARB"));
  glProgramUniform4i64vNV = PFNGLPROGRAMUNIFORM4I64VNVPROC(glfwGetProcAddress("glProgramUniform4i64vNV"));
  glProgramUniform4iEXT = PFNGLPROGRAMUNIFORM4IEXTPROC(glfwGetProcAddress("glProgramUniform4iEXT"));
  glProgramUniform4iv = PFNGLPROGRAMUNIFORM4IVPROC(glfwGetProcAddress("glProgramUniform4iv"));
  glProgramUniform4ivEXT = PFNGLPROGRAMUNIFORM4IVEXTPROC(glfwGetProcAddress("glProgramUniform4ivEXT"));
  glProgramUniform4ui = PFNGLPROGRAMUNIFORM4UIPROC(glfwGetProcAddress("glProgramUniform4ui"));
  glProgramUniform4ui64ARB = PFNGLPROGRAMUNIFORM4UI64ARBPROC(glfwGetProcAddress("glProgramUniform4ui64ARB"));
  glProgramUniform4ui64NV = PFNGLPROGRAMUNIFORM4UI64NVPROC(glfwGetProcAddress("glProgramUniform4ui64NV"));
  glProgramUniform4ui64vARB = PFNGLPROGRAMUNIFORM4UI64VARBPROC(glfwGetProcAddress("glProgramUniform4ui64vARB"));
  glProgramUniform4ui64vNV = PFNGLPROGRAMUNIFORM4UI64VNVPROC(glfwGetProcAddress("glProgramUniform4ui64vNV"));
  glProgramUniform4uiEXT = PFNGLPROGRAMUNIFORM4UIEXTPROC(glfwGetProcAddress("glProgramUniform4uiEXT"));
  glProgramUniform4uiv = PFNGLPROGRAMUNIFORM4UIVPROC(glfwGetProcAddress("glProgramUniform4uiv"));
  glProgramUniform4uivEXT = PFNGLPROGRAMUNIFORM4UIVEXTPROC(glfwGetProcAddress("glProgramUniform4uivEXT"));
  glProgramUniformHandleui64ARB = PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC(glfwGetProcAddress("glProgramUniformHandleui64ARB"));
  glProgramUniformHandleui64NV = PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC(glfwGetProcAddress("glProgramUniformHandleui64NV"));
  glProgramUniformHandleui64vARB = PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC(glfwGetProcAddress("glProgramUniformHandleui64vARB"));
  glProgramUniformHandleui64vNV = PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC(glfwGetProcAddress("glProgramUniformHandleui64vNV"));
  glProgramUniformMatrix2dv = PFNGLPROGRAMUNIFORMMATRIX2DVPROC(glfwGetProcAddress("glProgramUniformMatrix2dv"));
  glProgramUniformMatrix2dvEXT = PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix2dvEXT"));
  glProgramUniformMatrix2fv = PFNGLPROGRAMUNIFORMMATRIX2FVPROC(glfwGetProcAddress("glProgramUniformMatrix2fv"));
  glProgramUniformMatrix2fvEXT = PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix2fvEXT"));
  glProgramUniformMatrix2x3dv = PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC(glfwGetProcAddress("glProgramUniformMatrix2x3dv"));
  glProgramUniformMatrix2x3dvEXT = PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix2x3dvEXT"));
  glProgramUniformMatrix2x3fv = PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC(glfwGetProcAddress("glProgramUniformMatrix2x3fv"));
  glProgramUniformMatrix2x3fvEXT = PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix2x3fvEXT"));
  glProgramUniformMatrix2x4dv = PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC(glfwGetProcAddress("glProgramUniformMatrix2x4dv"));
  glProgramUniformMatrix2x4dvEXT = PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix2x4dvEXT"));
  glProgramUniformMatrix2x4fv = PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC(glfwGetProcAddress("glProgramUniformMatrix2x4fv"));
  glProgramUniformMatrix2x4fvEXT = PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix2x4fvEXT"));
  glProgramUniformMatrix3dv = PFNGLPROGRAMUNIFORMMATRIX3DVPROC(glfwGetProcAddress("glProgramUniformMatrix3dv"));
  glProgramUniformMatrix3dvEXT = PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix3dvEXT"));
  glProgramUniformMatrix3fv = PFNGLPROGRAMUNIFORMMATRIX3FVPROC(glfwGetProcAddress("glProgramUniformMatrix3fv"));
  glProgramUniformMatrix3fvEXT = PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix3fvEXT"));
  glProgramUniformMatrix3x2dv = PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC(glfwGetProcAddress("glProgramUniformMatrix3x2dv"));
  glProgramUniformMatrix3x2dvEXT = PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix3x2dvEXT"));
  glProgramUniformMatrix3x2fv = PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC(glfwGetProcAddress("glProgramUniformMatrix3x2fv"));
  glProgramUniformMatrix3x2fvEXT = PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix3x2fvEXT"));
  glProgramUniformMatrix3x4dv = PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC(glfwGetProcAddress("glProgramUniformMatrix3x4dv"));
  glProgramUniformMatrix3x4dvEXT = PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix3x4dvEXT"));
  glProgramUniformMatrix3x4fv = PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC(glfwGetProcAddress("glProgramUniformMatrix3x4fv"));
  glProgramUniformMatrix3x4fvEXT = PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix3x4fvEXT"));
  glProgramUniformMatrix4dv = PFNGLPROGRAMUNIFORMMATRIX4DVPROC(glfwGetProcAddress("glProgramUniformMatrix4dv"));
  glProgramUniformMatrix4dvEXT = PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix4dvEXT"));
  glProgramUniformMatrix4fv = PFNGLPROGRAMUNIFORMMATRIX4FVPROC(glfwGetProcAddress("glProgramUniformMatrix4fv"));
  glProgramUniformMatrix4fvEXT = PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix4fvEXT"));
  glProgramUniformMatrix4x2dv = PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC(glfwGetProcAddress("glProgramUniformMatrix4x2dv"));
  glProgramUniformMatrix4x2dvEXT = PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix4x2dvEXT"));
  glProgramUniformMatrix4x2fv = PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC(glfwGetProcAddress("glProgramUniformMatrix4x2fv"));
  glProgramUniformMatrix4x2fvEXT = PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix4x2fvEXT"));
  glProgramUniformMatrix4x3dv = PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC(glfwGetProcAddress("glProgramUniformMatrix4x3dv"));
  glProgramUniformMatrix4x3dvEXT = PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix4x3dvEXT"));
  glProgramUniformMatrix4x3fv = PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC(glfwGetProcAddress("glProgramUniformMatrix4x3fv"));
  glProgramUniformMatrix4x3fvEXT = PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC(glfwGetProcAddress("glProgramUniformMatrix4x3fvEXT"));
  glProgramUniformui64NV = PFNGLPROGRAMUNIFORMUI64NVPROC(glfwGetProcAddress("glProgramUniformui64NV"));
  glProgramUniformui64vNV = PFNGLPROGRAMUNIFORMUI64VNVPROC(glfwGetProcAddress("glProgramUniformui64vNV"));
  glProvokingVertex = PFNGLPROVOKINGVERTEXPROC(glfwGetProcAddress("glProvokingVertex"));
  glPushClientAttribDefaultEXT = PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC(glfwGetProcAddress("glPushClientAttribDefaultEXT"));
  glPushDebugGroup = PFNGLPUSHDEBUGGROUPPROC(glfwGetProcAddress("glPushDebugGroup"));
  glPushGroupMarkerEXT = PFNGLPUSHGROUPMARKEREXTPROC(glfwGetProcAddress("glPushGroupMarkerEXT"));
  glQueryCounter = PFNGLQUERYCOUNTERPROC(glfwGetProcAddress("glQueryCounter"));
  glRasterSamplesEXT = PFNGLRASTERSAMPLESEXTPROC(glfwGetProcAddress("glRasterSamplesEXT"));
  glReadBuffer = PFNGLREADBUFFERPROC(glfwGetProcAddress("glReadBuffer"));
  glReadPixels = PFNGLREADPIXELSPROC(glfwGetProcAddress("glReadPixels"));
  glReadnPixels = PFNGLREADNPIXELSPROC(glfwGetProcAddress("glReadnPixels"));
  glReadnPixelsARB = PFNGLREADNPIXELSARBPROC(glfwGetProcAddress("glReadnPixelsARB"));
  glReleaseShaderCompiler = PFNGLRELEASESHADERCOMPILERPROC(glfwGetProcAddress("glReleaseShaderCompiler"));
  glRenderbufferStorage = PFNGLRENDERBUFFERSTORAGEPROC(glfwGetProcAddress("glRenderbufferStorage"));
  glRenderbufferStorageMultisample = PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC(glfwGetProcAddress("glRenderbufferStorageMultisample"));
  glRenderbufferStorageMultisampleCoverageNV = PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC(glfwGetProcAddress("glRenderbufferStorageMultisampleCoverageNV"));
  glResolveDepthValuesNV = PFNGLRESOLVEDEPTHVALUESNVPROC(glfwGetProcAddress("glResolveDepthValuesNV"));
  glResumeTransformFeedback = PFNGLRESUMETRANSFORMFEEDBACKPROC(glfwGetProcAddress("glResumeTransformFeedback"));
  glSampleCoverage = PFNGLSAMPLECOVERAGEPROC(glfwGetProcAddress("glSampleCoverage"));
  glSampleMaski = PFNGLSAMPLEMASKIPROC(glfwGetProcAddress("glSampleMaski"));
  glSamplerParameterIiv = PFNGLSAMPLERPARAMETERIIVPROC(glfwGetProcAddress("glSamplerParameterIiv"));
  glSamplerParameterIuiv = PFNGLSAMPLERPARAMETERIUIVPROC(glfwGetProcAddress("glSamplerParameterIuiv"));
  glSamplerParameterf = PFNGLSAMPLERPARAMETERFPROC(glfwGetProcAddress("glSamplerParameterf"));
  glSamplerParameterfv = PFNGLSAMPLERPARAMETERFVPROC(glfwGetProcAddress("glSamplerParameterfv"));
  glSamplerParameteri = PFNGLSAMPLERPARAMETERIPROC(glfwGetProcAddress("glSamplerParameteri"));
  glSamplerParameteriv = PFNGLSAMPLERPARAMETERIVPROC(glfwGetProcAddress("glSamplerParameteriv"));
  glScissor = PFNGLSCISSORPROC(glfwGetProcAddress("glScissor"));
  glScissorArrayv = PFNGLSCISSORARRAYVPROC(glfwGetProcAddress("glScissorArrayv"));
  glScissorIndexed = PFNGLSCISSORINDEXEDPROC(glfwGetProcAddress("glScissorIndexed"));
  glScissorIndexedv = PFNGLSCISSORINDEXEDVPROC(glfwGetProcAddress("glScissorIndexedv"));
  glSecondaryColorFormatNV = PFNGLSECONDARYCOLORFORMATNVPROC(glfwGetProcAddress("glSecondaryColorFormatNV"));
  glSelectPerfMonitorCountersAMD = PFNGLSELECTPERFMONITORCOUNTERSAMDPROC(glfwGetProcAddress("glSelectPerfMonitorCountersAMD"));
  glShaderBinary = PFNGLSHADERBINARYPROC(glfwGetProcAddress("glShaderBinary"));
  glShaderSource = PFNGLSHADERSOURCEPROC(glfwGetProcAddress("glShaderSource"));
  glShaderStorageBlockBinding = PFNGLSHADERSTORAGEBLOCKBINDINGPROC(glfwGetProcAddress("glShaderStorageBlockBinding"));
  glSignalVkFenceNV = PFNGLSIGNALVKFENCENVPROC(glfwGetProcAddress("glSignalVkFenceNV"));
  glSignalVkSemaphoreNV = PFNGLSIGNALVKSEMAPHORENVPROC(glfwGetProcAddress("glSignalVkSemaphoreNV"));
  glSpecializeShaderARB = PFNGLSPECIALIZESHADERARBPROC(glfwGetProcAddress("glSpecializeShaderARB"));
  glStateCaptureNV = PFNGLSTATECAPTURENVPROC(glfwGetProcAddress("glStateCaptureNV"));
  glStencilFillPathInstancedNV = PFNGLSTENCILFILLPATHINSTANCEDNVPROC(glfwGetProcAddress("glStencilFillPathInstancedNV"));
  glStencilFillPathNV = PFNGLSTENCILFILLPATHNVPROC(glfwGetProcAddress("glStencilFillPathNV"));
  glStencilFunc = PFNGLSTENCILFUNCPROC(glfwGetProcAddress("glStencilFunc"));
  glStencilFuncSeparate = PFNGLSTENCILFUNCSEPARATEPROC(glfwGetProcAddress("glStencilFuncSeparate"));
  glStencilMask = PFNGLSTENCILMASKPROC(glfwGetProcAddress("glStencilMask"));
  glStencilMaskSeparate = PFNGLSTENCILMASKSEPARATEPROC(glfwGetProcAddress("glStencilMaskSeparate"));
  glStencilOp = PFNGLSTENCILOPPROC(glfwGetProcAddress("glStencilOp"));
  glStencilOpSeparate = PFNGLSTENCILOPSEPARATEPROC(glfwGetProcAddress("glStencilOpSeparate"));
  glStencilStrokePathInstancedNV = PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC(glfwGetProcAddress("glStencilStrokePathInstancedNV"));
  glStencilStrokePathNV = PFNGLSTENCILSTROKEPATHNVPROC(glfwGetProcAddress("glStencilStrokePathNV"));
  glStencilThenCoverFillPathInstancedNV = PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC(glfwGetProcAddress("glStencilThenCoverFillPathInstancedNV"));
  glStencilThenCoverFillPathNV = PFNGLSTENCILTHENCOVERFILLPATHNVPROC(glfwGetProcAddress("glStencilThenCoverFillPathNV"));
  glStencilThenCoverStrokePathInstancedNV = PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC(glfwGetProcAddress("glStencilThenCoverStrokePathInstancedNV"));
  glStencilThenCoverStrokePathNV = PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC(glfwGetProcAddress("glStencilThenCoverStrokePathNV"));
  glSubpixelPrecisionBiasNV = PFNGLSUBPIXELPRECISIONBIASNVPROC(glfwGetProcAddress("glSubpixelPrecisionBiasNV"));
  glTexBuffer = PFNGLTEXBUFFERPROC(glfwGetProcAddress("glTexBuffer"));
  glTexBufferARB = PFNGLTEXBUFFERARBPROC(glfwGetProcAddress("glTexBufferARB"));
  glTexBufferRange = PFNGLTEXBUFFERRANGEPROC(glfwGetProcAddress("glTexBufferRange"));
  glTexCoordFormatNV = PFNGLTEXCOORDFORMATNVPROC(glfwGetProcAddress("glTexCoordFormatNV"));
  glTexImage1D = PFNGLTEXIMAGE1DPROC(glfwGetProcAddress("glTexImage1D"));
  glTexImage2D = PFNGLTEXIMAGE2DPROC(glfwGetProcAddress("glTexImage2D"));
  glTexImage2DMultisample = PFNGLTEXIMAGE2DMULTISAMPLEPROC(glfwGetProcAddress("glTexImage2DMultisample"));
  glTexImage3D = PFNGLTEXIMAGE3DPROC(glfwGetProcAddress("glTexImage3D"));
  glTexImage3DMultisample = PFNGLTEXIMAGE3DMULTISAMPLEPROC(glfwGetProcAddress("glTexImage3DMultisample"));
  glTexPageCommitmentARB = PFNGLTEXPAGECOMMITMENTARBPROC(glfwGetProcAddress("glTexPageCommitmentARB"));
  glTexParameterIiv = PFNGLTEXPARAMETERIIVPROC(glfwGetProcAddress("glTexParameterIiv"));
  glTexParameterIuiv = PFNGLTEXPARAMETERIUIVPROC(glfwGetProcAddress("glTexParameterIuiv"));
  glTexParameterf = PFNGLTEXPARAMETERFPROC(glfwGetProcAddress("glTexParameterf"));
  glTexParameterfv = PFNGLTEXPARAMETERFVPROC(glfwGetProcAddress("glTexParameterfv"));
  glTexParameteri = PFNGLTEXPARAMETERIPROC(glfwGetProcAddress("glTexParameteri"));
  glTexParameteriv = PFNGLTEXPARAMETERIVPROC(glfwGetProcAddress("glTexParameteriv"));
  glTexStorage1D = PFNGLTEXSTORAGE1DPROC(glfwGetProcAddress("glTexStorage1D"));
  glTexStorage2D = PFNGLTEXSTORAGE2DPROC(glfwGetProcAddress("glTexStorage2D"));
  glTexStorage2DMultisample = PFNGLTEXSTORAGE2DMULTISAMPLEPROC(glfwGetProcAddress("glTexStorage2DMultisample"));
  glTexStorage3D = PFNGLTEXSTORAGE3DPROC(glfwGetProcAddress("glTexStorage3D"));
  glTexStorage3DMultisample = PFNGLTEXSTORAGE3DMULTISAMPLEPROC(glfwGetProcAddress("glTexStorage3DMultisample"));
  glTexSubImage1D = PFNGLTEXSUBIMAGE1DPROC(glfwGetProcAddress("glTexSubImage1D"));
  glTexSubImage2D = PFNGLTEXSUBIMAGE2DPROC(glfwGetProcAddress("glTexSubImage2D"));
  glTexSubImage3D = PFNGLTEXSUBIMAGE3DPROC(glfwGetProcAddress("glTexSubImage3D"));
  glTextureBarrier = PFNGLTEXTUREBARRIERPROC(glfwGetProcAddress("glTextureBarrier"));
  glTextureBarrierNV = PFNGLTEXTUREBARRIERNVPROC(glfwGetProcAddress("glTextureBarrierNV"));
  glTextureBuffer = PFNGLTEXTUREBUFFERPROC(glfwGetProcAddress("glTextureBuffer"));
  glTextureBufferEXT = PFNGLTEXTUREBUFFEREXTPROC(glfwGetProcAddress("glTextureBufferEXT"));
  glTextureBufferRange = PFNGLTEXTUREBUFFERRANGEPROC(glfwGetProcAddress("glTextureBufferRange"));
  glTextureBufferRangeEXT = PFNGLTEXTUREBUFFERRANGEEXTPROC(glfwGetProcAddress("glTextureBufferRangeEXT"));
  glTextureImage1DEXT = PFNGLTEXTUREIMAGE1DEXTPROC(glfwGetProcAddress("glTextureImage1DEXT"));
  glTextureImage2DEXT = PFNGLTEXTUREIMAGE2DEXTPROC(glfwGetProcAddress("glTextureImage2DEXT"));
  glTextureImage3DEXT = PFNGLTEXTUREIMAGE3DEXTPROC(glfwGetProcAddress("glTextureImage3DEXT"));
  glTexturePageCommitmentEXT = PFNGLTEXTUREPAGECOMMITMENTEXTPROC(glfwGetProcAddress("glTexturePageCommitmentEXT"));
  glTextureParameterIiv = PFNGLTEXTUREPARAMETERIIVPROC(glfwGetProcAddress("glTextureParameterIiv"));
  glTextureParameterIivEXT = PFNGLTEXTUREPARAMETERIIVEXTPROC(glfwGetProcAddress("glTextureParameterIivEXT"));
  glTextureParameterIuiv = PFNGLTEXTUREPARAMETERIUIVPROC(glfwGetProcAddress("glTextureParameterIuiv"));
  glTextureParameterIuivEXT = PFNGLTEXTUREPARAMETERIUIVEXTPROC(glfwGetProcAddress("glTextureParameterIuivEXT"));
  glTextureParameterf = PFNGLTEXTUREPARAMETERFPROC(glfwGetProcAddress("glTextureParameterf"));
  glTextureParameterfEXT = PFNGLTEXTUREPARAMETERFEXTPROC(glfwGetProcAddress("glTextureParameterfEXT"));
  glTextureParameterfv = PFNGLTEXTUREPARAMETERFVPROC(glfwGetProcAddress("glTextureParameterfv"));
  glTextureParameterfvEXT = PFNGLTEXTUREPARAMETERFVEXTPROC(glfwGetProcAddress("glTextureParameterfvEXT"));
  glTextureParameteri = PFNGLTEXTUREPARAMETERIPROC(glfwGetProcAddress("glTextureParameteri"));
  glTextureParameteriEXT = PFNGLTEXTUREPARAMETERIEXTPROC(glfwGetProcAddress("glTextureParameteriEXT"));
  glTextureParameteriv = PFNGLTEXTUREPARAMETERIVPROC(glfwGetProcAddress("glTextureParameteriv"));
  glTextureParameterivEXT = PFNGLTEXTUREPARAMETERIVEXTPROC(glfwGetProcAddress("glTextureParameterivEXT"));
  glTextureRenderbufferEXT = PFNGLTEXTURERENDERBUFFEREXTPROC(glfwGetProcAddress("glTextureRenderbufferEXT"));
  glTextureStorage1D = PFNGLTEXTURESTORAGE1DPROC(glfwGetProcAddress("glTextureStorage1D"));
  glTextureStorage1DEXT = PFNGLTEXTURESTORAGE1DEXTPROC(glfwGetProcAddress("glTextureStorage1DEXT"));
  glTextureStorage2D = PFNGLTEXTURESTORAGE2DPROC(glfwGetProcAddress("glTextureStorage2D"));
  glTextureStorage2DEXT = PFNGLTEXTURESTORAGE2DEXTPROC(glfwGetProcAddress("glTextureStorage2DEXT"));
  glTextureStorage2DMultisample = PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC(glfwGetProcAddress("glTextureStorage2DMultisample"));
  glTextureStorage2DMultisampleEXT = PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC(glfwGetProcAddress("glTextureStorage2DMultisampleEXT"));
  glTextureStorage3D = PFNGLTEXTURESTORAGE3DPROC(glfwGetProcAddress("glTextureStorage3D"));
  glTextureStorage3DEXT = PFNGLTEXTURESTORAGE3DEXTPROC(glfwGetProcAddress("glTextureStorage3DEXT"));
  glTextureStorage3DMultisample = PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC(glfwGetProcAddress("glTextureStorage3DMultisample"));
  glTextureStorage3DMultisampleEXT = PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC(glfwGetProcAddress("glTextureStorage3DMultisampleEXT"));
  glTextureSubImage1D = PFNGLTEXTURESUBIMAGE1DPROC(glfwGetProcAddress("glTextureSubImage1D"));
  glTextureSubImage1DEXT = PFNGLTEXTURESUBIMAGE1DEXTPROC(glfwGetProcAddress("glTextureSubImage1DEXT"));
  glTextureSubImage2D = PFNGLTEXTURESUBIMAGE2DPROC(glfwGetProcAddress("glTextureSubImage2D"));
  glTextureSubImage2DEXT = PFNGLTEXTURESUBIMAGE2DEXTPROC(glfwGetProcAddress("glTextureSubImage2DEXT"));
  glTextureSubImage3D = PFNGLTEXTURESUBIMAGE3DPROC(glfwGetProcAddress("glTextureSubImage3D"));
  glTextureSubImage3DEXT = PFNGLTEXTURESUBIMAGE3DEXTPROC(glfwGetProcAddress("glTextureSubImage3DEXT"));
  glTextureView = PFNGLTEXTUREVIEWPROC(glfwGetProcAddress("glTextureView"));
  glTransformFeedbackBufferBase = PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC(glfwGetProcAddress("glTransformFeedbackBufferBase"));
  glTransformFeedbackBufferRange = PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC(glfwGetProcAddress("glTransformFeedbackBufferRange"));
  glTransformFeedbackVaryings = PFNGLTRANSFORMFEEDBACKVARYINGSPROC(glfwGetProcAddress("glTransformFeedbackVaryings"));
  glTransformPathNV = PFNGLTRANSFORMPATHNVPROC(glfwGetProcAddress("glTransformPathNV"));
  glUniform1d = PFNGLUNIFORM1DPROC(glfwGetProcAddress("glUniform1d"));
  glUniform1dv = PFNGLUNIFORM1DVPROC(glfwGetProcAddress("glUniform1dv"));
  glUniform1f = PFNGLUNIFORM1FPROC(glfwGetProcAddress("glUniform1f"));
  glUniform1fv = PFNGLUNIFORM1FVPROC(glfwGetProcAddress("glUniform1fv"));
  glUniform1i = PFNGLUNIFORM1IPROC(glfwGetProcAddress("glUniform1i"));
  glUniform1i64ARB = PFNGLUNIFORM1I64ARBPROC(glfwGetProcAddress("glUniform1i64ARB"));
  glUniform1i64NV = PFNGLUNIFORM1I64NVPROC(glfwGetProcAddress("glUniform1i64NV"));
  glUniform1i64vARB = PFNGLUNIFORM1I64VARBPROC(glfwGetProcAddress("glUniform1i64vARB"));
  glUniform1i64vNV = PFNGLUNIFORM1I64VNVPROC(glfwGetProcAddress("glUniform1i64vNV"));
  glUniform1iv = PFNGLUNIFORM1IVPROC(glfwGetProcAddress("glUniform1iv"));
  glUniform1ui = PFNGLUNIFORM1UIPROC(glfwGetProcAddress("glUniform1ui"));
  glUniform1ui64ARB = PFNGLUNIFORM1UI64ARBPROC(glfwGetProcAddress("glUniform1ui64ARB"));
  glUniform1ui64NV = PFNGLUNIFORM1UI64NVPROC(glfwGetProcAddress("glUniform1ui64NV"));
  glUniform1ui64vARB = PFNGLUNIFORM1UI64VARBPROC(glfwGetProcAddress("glUniform1ui64vARB"));
  glUniform1ui64vNV = PFNGLUNIFORM1UI64VNVPROC(glfwGetProcAddress("glUniform1ui64vNV"));
  glUniform1uiv = PFNGLUNIFORM1UIVPROC(glfwGetProcAddress("glUniform1uiv"));
  glUniform2d = PFNGLUNIFORM2DPROC(glfwGetProcAddress("glUniform2d"));
  glUniform2dv = PFNGLUNIFORM2DVPROC(glfwGetProcAddress("glUniform2dv"));
  glUniform2f = PFNGLUNIFORM2FPROC(glfwGetProcAddress("glUniform2f"));
  glUniform2fv = PFNGLUNIFORM2FVPROC(glfwGetProcAddress("glUniform2fv"));
  glUniform2i = PFNGLUNIFORM2IPROC(glfwGetProcAddress("glUniform2i"));
  glUniform2i64ARB = PFNGLUNIFORM2I64ARBPROC(glfwGetProcAddress("glUniform2i64ARB"));
  glUniform2i64NV = PFNGLUNIFORM2I64NVPROC(glfwGetProcAddress("glUniform2i64NV"));
  glUniform2i64vARB = PFNGLUNIFORM2I64VARBPROC(glfwGetProcAddress("glUniform2i64vARB"));
  glUniform2i64vNV = PFNGLUNIFORM2I64VNVPROC(glfwGetProcAddress("glUniform2i64vNV"));
  glUniform2iv = PFNGLUNIFORM2IVPROC(glfwGetProcAddress("glUniform2iv"));
  glUniform2ui = PFNGLUNIFORM2UIPROC(glfwGetProcAddress("glUniform2ui"));
  glUniform2ui64ARB = PFNGLUNIFORM2UI64ARBPROC(glfwGetProcAddress("glUniform2ui64ARB"));
  glUniform2ui64NV = PFNGLUNIFORM2UI64NVPROC(glfwGetProcAddress("glUniform2ui64NV"));
  glUniform2ui64vARB = PFNGLUNIFORM2UI64VARBPROC(glfwGetProcAddress("glUniform2ui64vARB"));
  glUniform2ui64vNV = PFNGLUNIFORM2UI64VNVPROC(glfwGetProcAddress("glUniform2ui64vNV"));
  glUniform2uiv = PFNGLUNIFORM2UIVPROC(glfwGetProcAddress("glUniform2uiv"));
  glUniform3d = PFNGLUNIFORM3DPROC(glfwGetProcAddress("glUniform3d"));
  glUniform3dv = PFNGLUNIFORM3DVPROC(glfwGetProcAddress("glUniform3dv"));
  glUniform3f = PFNGLUNIFORM3FPROC(glfwGetProcAddress("glUniform3f"));
  glUniform3fv = PFNGLUNIFORM3FVPROC(glfwGetProcAddress("glUniform3fv"));
  glUniform3i = PFNGLUNIFORM3IPROC(glfwGetProcAddress("glUniform3i"));
  glUniform3i64ARB = PFNGLUNIFORM3I64ARBPROC(glfwGetProcAddress("glUniform3i64ARB"));
  glUniform3i64NV = PFNGLUNIFORM3I64NVPROC(glfwGetProcAddress("glUniform3i64NV"));
  glUniform3i64vARB = PFNGLUNIFORM3I64VARBPROC(glfwGetProcAddress("glUniform3i64vARB"));
  glUniform3i64vNV = PFNGLUNIFORM3I64VNVPROC(glfwGetProcAddress("glUniform3i64vNV"));
  glUniform3iv = PFNGLUNIFORM3IVPROC(glfwGetProcAddress("glUniform3iv"));
  glUniform3ui = PFNGLUNIFORM3UIPROC(glfwGetProcAddress("glUniform3ui"));
  glUniform3ui64ARB = PFNGLUNIFORM3UI64ARBPROC(glfwGetProcAddress("glUniform3ui64ARB"));
  glUniform3ui64NV = PFNGLUNIFORM3UI64NVPROC(glfwGetProcAddress("glUniform3ui64NV"));
  glUniform3ui64vARB = PFNGLUNIFORM3UI64VARBPROC(glfwGetProcAddress("glUniform3ui64vARB"));
  glUniform3ui64vNV = PFNGLUNIFORM3UI64VNVPROC(glfwGetProcAddress("glUniform3ui64vNV"));
  glUniform3uiv = PFNGLUNIFORM3UIVPROC(glfwGetProcAddress("glUniform3uiv"));
  glUniform4d = PFNGLUNIFORM4DPROC(glfwGetProcAddress("glUniform4d"));
  glUniform4dv = PFNGLUNIFORM4DVPROC(glfwGetProcAddress("glUniform4dv"));
  glUniform4f = PFNGLUNIFORM4FPROC(glfwGetProcAddress("glUniform4f"));
  glUniform4fv = PFNGLUNIFORM4FVPROC(glfwGetProcAddress("glUniform4fv"));
  glUniform4i = PFNGLUNIFORM4IPROC(glfwGetProcAddress("glUniform4i"));
  glUniform4i64ARB = PFNGLUNIFORM4I64ARBPROC(glfwGetProcAddress("glUniform4i64ARB"));
  glUniform4i64NV = PFNGLUNIFORM4I64NVPROC(glfwGetProcAddress("glUniform4i64NV"));
  glUniform4i64vARB = PFNGLUNIFORM4I64VARBPROC(glfwGetProcAddress("glUniform4i64vARB"));
  glUniform4i64vNV = PFNGLUNIFORM4I64VNVPROC(glfwGetProcAddress("glUniform4i64vNV"));
  glUniform4iv = PFNGLUNIFORM4IVPROC(glfwGetProcAddress("glUniform4iv"));
  glUniform4ui = PFNGLUNIFORM4UIPROC(glfwGetProcAddress("glUniform4ui"));
  glUniform4ui64ARB = PFNGLUNIFORM4UI64ARBPROC(glfwGetProcAddress("glUniform4ui64ARB"));
  glUniform4ui64NV = PFNGLUNIFORM4UI64NVPROC(glfwGetProcAddress("glUniform4ui64NV"));
  glUniform4ui64vARB = PFNGLUNIFORM4UI64VARBPROC(glfwGetProcAddress("glUniform4ui64vARB"));
  glUniform4ui64vNV = PFNGLUNIFORM4UI64VNVPROC(glfwGetProcAddress("glUniform4ui64vNV"));
  glUniform4uiv = PFNGLUNIFORM4UIVPROC(glfwGetProcAddress("glUniform4uiv"));
  glUniformBlockBinding = PFNGLUNIFORMBLOCKBINDINGPROC(glfwGetProcAddress("glUniformBlockBinding"));
  glUniformHandleui64ARB = PFNGLUNIFORMHANDLEUI64ARBPROC(glfwGetProcAddress("glUniformHandleui64ARB"));
  glUniformHandleui64NV = PFNGLUNIFORMHANDLEUI64NVPROC(glfwGetProcAddress("glUniformHandleui64NV"));
  glUniformHandleui64vARB = PFNGLUNIFORMHANDLEUI64VARBPROC(glfwGetProcAddress("glUniformHandleui64vARB"));
  glUniformHandleui64vNV = PFNGLUNIFORMHANDLEUI64VNVPROC(glfwGetProcAddress("glUniformHandleui64vNV"));
  glUniformMatrix2dv = PFNGLUNIFORMMATRIX2DVPROC(glfwGetProcAddress("glUniformMatrix2dv"));
  glUniformMatrix2fv = PFNGLUNIFORMMATRIX2FVPROC(glfwGetProcAddress("glUniformMatrix2fv"));
  glUniformMatrix2x3dv = PFNGLUNIFORMMATRIX2X3DVPROC(glfwGetProcAddress("glUniformMatrix2x3dv"));
  glUniformMatrix2x3fv = PFNGLUNIFORMMATRIX2X3FVPROC(glfwGetProcAddress("glUniformMatrix2x3fv"));
  glUniformMatrix2x4dv = PFNGLUNIFORMMATRIX2X4DVPROC(glfwGetProcAddress("glUniformMatrix2x4dv"));
  glUniformMatrix2x4fv = PFNGLUNIFORMMATRIX2X4FVPROC(glfwGetProcAddress("glUniformMatrix2x4fv"));
  glUniformMatrix3dv = PFNGLUNIFORMMATRIX3DVPROC(glfwGetProcAddress("glUniformMatrix3dv"));
  glUniformMatrix3fv = PFNGLUNIFORMMATRIX3FVPROC(glfwGetProcAddress("glUniformMatrix3fv"));
  glUniformMatrix3x2dv = PFNGLUNIFORMMATRIX3X2DVPROC(glfwGetProcAddress("glUniformMatrix3x2dv"));
  glUniformMatrix3x2fv = PFNGLUNIFORMMATRIX3X2FVPROC(glfwGetProcAddress("glUniformMatrix3x2fv"));
  glUniformMatrix3x4dv = PFNGLUNIFORMMATRIX3X4DVPROC(glfwGetProcAddress("glUniformMatrix3x4dv"));
  glUniformMatrix3x4fv = PFNGLUNIFORMMATRIX3X4FVPROC(glfwGetProcAddress("glUniformMatrix3x4fv"));
  glUniformMatrix4dv = PFNGLUNIFORMMATRIX4DVPROC(glfwGetProcAddress("glUniformMatrix4dv"));
  glUniformMatrix4fv = PFNGLUNIFORMMATRIX4FVPROC(glfwGetProcAddress("glUniformMatrix4fv"));
  glUniformMatrix4x2dv = PFNGLUNIFORMMATRIX4X2DVPROC(glfwGetProcAddress("glUniformMatrix4x2dv"));
  glUniformMatrix4x2fv = PFNGLUNIFORMMATRIX4X2FVPROC(glfwGetProcAddress("glUniformMatrix4x2fv"));
  glUniformMatrix4x3dv = PFNGLUNIFORMMATRIX4X3DVPROC(glfwGetProcAddress("glUniformMatrix4x3dv"));
  glUniformMatrix4x3fv = PFNGLUNIFORMMATRIX4X3FVPROC(glfwGetProcAddress("glUniformMatrix4x3fv"));
  glUniformSubroutinesuiv = PFNGLUNIFORMSUBROUTINESUIVPROC(glfwGetProcAddress("glUniformSubroutinesuiv"));
  glUniformui64NV = PFNGLUNIFORMUI64NVPROC(glfwGetProcAddress("glUniformui64NV"));
  glUniformui64vNV = PFNGLUNIFORMUI64VNVPROC(glfwGetProcAddress("glUniformui64vNV"));
  glUnmapBuffer = PFNGLUNMAPBUFFERPROC(glfwGetProcAddress("glUnmapBuffer"));
  glUnmapNamedBuffer = PFNGLUNMAPNAMEDBUFFERPROC(glfwGetProcAddress("glUnmapNamedBuffer"));
  glUnmapNamedBufferEXT = PFNGLUNMAPNAMEDBUFFEREXTPROC(glfwGetProcAddress("glUnmapNamedBufferEXT"));
  glUseProgram = PFNGLUSEPROGRAMPROC(glfwGetProcAddress("glUseProgram"));
  glUseProgramStages = PFNGLUSEPROGRAMSTAGESPROC(glfwGetProcAddress("glUseProgramStages"));
  glUseShaderProgramEXT = PFNGLUSESHADERPROGRAMEXTPROC(glfwGetProcAddress("glUseShaderProgramEXT"));
  glValidateProgram = PFNGLVALIDATEPROGRAMPROC(glfwGetProcAddress("glValidateProgram"));
  glValidateProgramPipeline = PFNGLVALIDATEPROGRAMPIPELINEPROC(glfwGetProcAddress("glValidateProgramPipeline"));
  glVertexArrayAttribBinding = PFNGLVERTEXARRAYATTRIBBINDINGPROC(glfwGetProcAddress("glVertexArrayAttribBinding"));
  glVertexArrayAttribFormat = PFNGLVERTEXARRAYATTRIBFORMATPROC(glfwGetProcAddress("glVertexArrayAttribFormat"));
  glVertexArrayAttribIFormat = PFNGLVERTEXARRAYATTRIBIFORMATPROC(glfwGetProcAddress("glVertexArrayAttribIFormat"));
  glVertexArrayAttribLFormat = PFNGLVERTEXARRAYATTRIBLFORMATPROC(glfwGetProcAddress("glVertexArrayAttribLFormat"));
  glVertexArrayBindVertexBufferEXT = PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC(glfwGetProcAddress("glVertexArrayBindVertexBufferEXT"));
  glVertexArrayBindingDivisor = PFNGLVERTEXARRAYBINDINGDIVISORPROC(glfwGetProcAddress("glVertexArrayBindingDivisor"));
  glVertexArrayColorOffsetEXT = PFNGLVERTEXARRAYCOLOROFFSETEXTPROC(glfwGetProcAddress("glVertexArrayColorOffsetEXT"));
  glVertexArrayEdgeFlagOffsetEXT = PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayEdgeFlagOffsetEXT"));
  glVertexArrayElementBuffer = PFNGLVERTEXARRAYELEMENTBUFFERPROC(glfwGetProcAddress("glVertexArrayElementBuffer"));
  glVertexArrayFogCoordOffsetEXT = PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayFogCoordOffsetEXT"));
  glVertexArrayIndexOffsetEXT = PFNGLVERTEXARRAYINDEXOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayIndexOffsetEXT"));
  glVertexArrayMultiTexCoordOffsetEXT = PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayMultiTexCoordOffsetEXT"));
  glVertexArrayNormalOffsetEXT = PFNGLVERTEXARRAYNORMALOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayNormalOffsetEXT"));
  glVertexArraySecondaryColorOffsetEXT = PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC(glfwGetProcAddress("glVertexArraySecondaryColorOffsetEXT"));
  glVertexArrayTexCoordOffsetEXT = PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayTexCoordOffsetEXT"));
  glVertexArrayVertexAttribBindingEXT = PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC(glfwGetProcAddress("glVertexArrayVertexAttribBindingEXT"));
  glVertexArrayVertexAttribDivisorEXT = PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC(glfwGetProcAddress("glVertexArrayVertexAttribDivisorEXT"));
  glVertexArrayVertexAttribFormatEXT = PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC(glfwGetProcAddress("glVertexArrayVertexAttribFormatEXT"));
  glVertexArrayVertexAttribIFormatEXT = PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC(glfwGetProcAddress("glVertexArrayVertexAttribIFormatEXT"));
  glVertexArrayVertexAttribIOffsetEXT = PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayVertexAttribIOffsetEXT"));
  glVertexArrayVertexAttribLFormatEXT = PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC(glfwGetProcAddress("glVertexArrayVertexAttribLFormatEXT"));
  glVertexArrayVertexAttribLOffsetEXT = PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayVertexAttribLOffsetEXT"));
  glVertexArrayVertexAttribOffsetEXT = PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayVertexAttribOffsetEXT"));
  glVertexArrayVertexBindingDivisorEXT = PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC(glfwGetProcAddress("glVertexArrayVertexBindingDivisorEXT"));
  glVertexArrayVertexBuffer = PFNGLVERTEXARRAYVERTEXBUFFERPROC(glfwGetProcAddress("glVertexArrayVertexBuffer"));
  glVertexArrayVertexBuffers = PFNGLVERTEXARRAYVERTEXBUFFERSPROC(glfwGetProcAddress("glVertexArrayVertexBuffers"));
  glVertexArrayVertexOffsetEXT = PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC(glfwGetProcAddress("glVertexArrayVertexOffsetEXT"));
  glVertexAttrib1d = PFNGLVERTEXATTRIB1DPROC(glfwGetProcAddress("glVertexAttrib1d"));
  glVertexAttrib1dv = PFNGLVERTEXATTRIB1DVPROC(glfwGetProcAddress("glVertexAttrib1dv"));
  glVertexAttrib1f = PFNGLVERTEXATTRIB1FPROC(glfwGetProcAddress("glVertexAttrib1f"));
  glVertexAttrib1fv = PFNGLVERTEXATTRIB1FVPROC(glfwGetProcAddress("glVertexAttrib1fv"));
  glVertexAttrib1s = PFNGLVERTEXATTRIB1SPROC(glfwGetProcAddress("glVertexAttrib1s"));
  glVertexAttrib1sv = PFNGLVERTEXATTRIB1SVPROC(glfwGetProcAddress("glVertexAttrib1sv"));
  glVertexAttrib2d = PFNGLVERTEXATTRIB2DPROC(glfwGetProcAddress("glVertexAttrib2d"));
  glVertexAttrib2dv = PFNGLVERTEXATTRIB2DVPROC(glfwGetProcAddress("glVertexAttrib2dv"));
  glVertexAttrib2f = PFNGLVERTEXATTRIB2FPROC(glfwGetProcAddress("glVertexAttrib2f"));
  glVertexAttrib2fv = PFNGLVERTEXATTRIB2FVPROC(glfwGetProcAddress("glVertexAttrib2fv"));
  glVertexAttrib2s = PFNGLVERTEXATTRIB2SPROC(glfwGetProcAddress("glVertexAttrib2s"));
  glVertexAttrib2sv = PFNGLVERTEXATTRIB2SVPROC(glfwGetProcAddress("glVertexAttrib2sv"));
  glVertexAttrib3d = PFNGLVERTEXATTRIB3DPROC(glfwGetProcAddress("glVertexAttrib3d"));
  glVertexAttrib3dv = PFNGLVERTEXATTRIB3DVPROC(glfwGetProcAddress("glVertexAttrib3dv"));
  glVertexAttrib3f = PFNGLVERTEXATTRIB3FPROC(glfwGetProcAddress("glVertexAttrib3f"));
  glVertexAttrib3fv = PFNGLVERTEXATTRIB3FVPROC(glfwGetProcAddress("glVertexAttrib3fv"));
  glVertexAttrib3s = PFNGLVERTEXATTRIB3SPROC(glfwGetProcAddress("glVertexAttrib3s"));
  glVertexAttrib3sv = PFNGLVERTEXATTRIB3SVPROC(glfwGetProcAddress("glVertexAttrib3sv"));
  glVertexAttrib4Nbv = PFNGLVERTEXATTRIB4NBVPROC(glfwGetProcAddress("glVertexAttrib4Nbv"));
  glVertexAttrib4Niv = PFNGLVERTEXATTRIB4NIVPROC(glfwGetProcAddress("glVertexAttrib4Niv"));
  glVertexAttrib4Nsv = PFNGLVERTEXATTRIB4NSVPROC(glfwGetProcAddress("glVertexAttrib4Nsv"));
  glVertexAttrib4Nub = PFNGLVERTEXATTRIB4NUBPROC(glfwGetProcAddress("glVertexAttrib4Nub"));
  glVertexAttrib4Nubv = PFNGLVERTEXATTRIB4NUBVPROC(glfwGetProcAddress("glVertexAttrib4Nubv"));
  glVertexAttrib4Nuiv = PFNGLVERTEXATTRIB4NUIVPROC(glfwGetProcAddress("glVertexAttrib4Nuiv"));
  glVertexAttrib4Nusv = PFNGLVERTEXATTRIB4NUSVPROC(glfwGetProcAddress("glVertexAttrib4Nusv"));
  glVertexAttrib4bv = PFNGLVERTEXATTRIB4BVPROC(glfwGetProcAddress("glVertexAttrib4bv"));
  glVertexAttrib4d = PFNGLVERTEXATTRIB4DPROC(glfwGetProcAddress("glVertexAttrib4d"));
  glVertexAttrib4dv = PFNGLVERTEXATTRIB4DVPROC(glfwGetProcAddress("glVertexAttrib4dv"));
  glVertexAttrib4f = PFNGLVERTEXATTRIB4FPROC(glfwGetProcAddress("glVertexAttrib4f"));
  glVertexAttrib4fv = PFNGLVERTEXATTRIB4FVPROC(glfwGetProcAddress("glVertexAttrib4fv"));
  glVertexAttrib4iv = PFNGLVERTEXATTRIB4IVPROC(glfwGetProcAddress("glVertexAttrib4iv"));
  glVertexAttrib4s = PFNGLVERTEXATTRIB4SPROC(glfwGetProcAddress("glVertexAttrib4s"));
  glVertexAttrib4sv = PFNGLVERTEXATTRIB4SVPROC(glfwGetProcAddress("glVertexAttrib4sv"));
  glVertexAttrib4ubv = PFNGLVERTEXATTRIB4UBVPROC(glfwGetProcAddress("glVertexAttrib4ubv"));
  glVertexAttrib4uiv = PFNGLVERTEXATTRIB4UIVPROC(glfwGetProcAddress("glVertexAttrib4uiv"));
  glVertexAttrib4usv = PFNGLVERTEXATTRIB4USVPROC(glfwGetProcAddress("glVertexAttrib4usv"));
  glVertexAttribBinding = PFNGLVERTEXATTRIBBINDINGPROC(glfwGetProcAddress("glVertexAttribBinding"));
  glVertexAttribDivisor = PFNGLVERTEXATTRIBDIVISORPROC(glfwGetProcAddress("glVertexAttribDivisor"));
  glVertexAttribDivisorARB = PFNGLVERTEXATTRIBDIVISORARBPROC(glfwGetProcAddress("glVertexAttribDivisorARB"));
  glVertexAttribFormat = PFNGLVERTEXATTRIBFORMATPROC(glfwGetProcAddress("glVertexAttribFormat"));
  glVertexAttribFormatNV = PFNGLVERTEXATTRIBFORMATNVPROC(glfwGetProcAddress("glVertexAttribFormatNV"));
  glVertexAttribI1i = PFNGLVERTEXATTRIBI1IPROC(glfwGetProcAddress("glVertexAttribI1i"));
  glVertexAttribI1iv = PFNGLVERTEXATTRIBI1IVPROC(glfwGetProcAddress("glVertexAttribI1iv"));
  glVertexAttribI1ui = PFNGLVERTEXATTRIBI1UIPROC(glfwGetProcAddress("glVertexAttribI1ui"));
  glVertexAttribI1uiv = PFNGLVERTEXATTRIBI1UIVPROC(glfwGetProcAddress("glVertexAttribI1uiv"));
  glVertexAttribI2i = PFNGLVERTEXATTRIBI2IPROC(glfwGetProcAddress("glVertexAttribI2i"));
  glVertexAttribI2iv = PFNGLVERTEXATTRIBI2IVPROC(glfwGetProcAddress("glVertexAttribI2iv"));
  glVertexAttribI2ui = PFNGLVERTEXATTRIBI2UIPROC(glfwGetProcAddress("glVertexAttribI2ui"));
  glVertexAttribI2uiv = PFNGLVERTEXATTRIBI2UIVPROC(glfwGetProcAddress("glVertexAttribI2uiv"));
  glVertexAttribI3i = PFNGLVERTEXATTRIBI3IPROC(glfwGetProcAddress("glVertexAttribI3i"));
  glVertexAttribI3iv = PFNGLVERTEXATTRIBI3IVPROC(glfwGetProcAddress("glVertexAttribI3iv"));
  glVertexAttribI3ui = PFNGLVERTEXATTRIBI3UIPROC(glfwGetProcAddress("glVertexAttribI3ui"));
  glVertexAttribI3uiv = PFNGLVERTEXATTRIBI3UIVPROC(glfwGetProcAddress("glVertexAttribI3uiv"));
  glVertexAttribI4bv = PFNGLVERTEXATTRIBI4BVPROC(glfwGetProcAddress("glVertexAttribI4bv"));
  glVertexAttribI4i = PFNGLVERTEXATTRIBI4IPROC(glfwGetProcAddress("glVertexAttribI4i"));
  glVertexAttribI4iv = PFNGLVERTEXATTRIBI4IVPROC(glfwGetProcAddress("glVertexAttribI4iv"));
  glVertexAttribI4sv = PFNGLVERTEXATTRIBI4SVPROC(glfwGetProcAddress("glVertexAttribI4sv"));
  glVertexAttribI4ubv = PFNGLVERTEXATTRIBI4UBVPROC(glfwGetProcAddress("glVertexAttribI4ubv"));
  glVertexAttribI4ui = PFNGLVERTEXATTRIBI4UIPROC(glfwGetProcAddress("glVertexAttribI4ui"));
  glVertexAttribI4uiv = PFNGLVERTEXATTRIBI4UIVPROC(glfwGetProcAddress("glVertexAttribI4uiv"));
  glVertexAttribI4usv = PFNGLVERTEXATTRIBI4USVPROC(glfwGetProcAddress("glVertexAttribI4usv"));
  glVertexAttribIFormat = PFNGLVERTEXATTRIBIFORMATPROC(glfwGetProcAddress("glVertexAttribIFormat"));
  glVertexAttribIFormatNV = PFNGLVERTEXATTRIBIFORMATNVPROC(glfwGetProcAddress("glVertexAttribIFormatNV"));
  glVertexAttribIPointer = PFNGLVERTEXATTRIBIPOINTERPROC(glfwGetProcAddress("glVertexAttribIPointer"));
  glVertexAttribL1d = PFNGLVERTEXATTRIBL1DPROC(glfwGetProcAddress("glVertexAttribL1d"));
  glVertexAttribL1dv = PFNGLVERTEXATTRIBL1DVPROC(glfwGetProcAddress("glVertexAttribL1dv"));
  glVertexAttribL1i64NV = PFNGLVERTEXATTRIBL1I64NVPROC(glfwGetProcAddress("glVertexAttribL1i64NV"));
  glVertexAttribL1i64vNV = PFNGLVERTEXATTRIBL1I64VNVPROC(glfwGetProcAddress("glVertexAttribL1i64vNV"));
  glVertexAttribL1ui64ARB = PFNGLVERTEXATTRIBL1UI64ARBPROC(glfwGetProcAddress("glVertexAttribL1ui64ARB"));
  glVertexAttribL1ui64NV = PFNGLVERTEXATTRIBL1UI64NVPROC(glfwGetProcAddress("glVertexAttribL1ui64NV"));
  glVertexAttribL1ui64vARB = PFNGLVERTEXATTRIBL1UI64VARBPROC(glfwGetProcAddress("glVertexAttribL1ui64vARB"));
  glVertexAttribL1ui64vNV = PFNGLVERTEXATTRIBL1UI64VNVPROC(glfwGetProcAddress("glVertexAttribL1ui64vNV"));
  glVertexAttribL2d = PFNGLVERTEXATTRIBL2DPROC(glfwGetProcAddress("glVertexAttribL2d"));
  glVertexAttribL2dv = PFNGLVERTEXATTRIBL2DVPROC(glfwGetProcAddress("glVertexAttribL2dv"));
  glVertexAttribL2i64NV = PFNGLVERTEXATTRIBL2I64NVPROC(glfwGetProcAddress("glVertexAttribL2i64NV"));
  glVertexAttribL2i64vNV = PFNGLVERTEXATTRIBL2I64VNVPROC(glfwGetProcAddress("glVertexAttribL2i64vNV"));
  glVertexAttribL2ui64NV = PFNGLVERTEXATTRIBL2UI64NVPROC(glfwGetProcAddress("glVertexAttribL2ui64NV"));
  glVertexAttribL2ui64vNV = PFNGLVERTEXATTRIBL2UI64VNVPROC(glfwGetProcAddress("glVertexAttribL2ui64vNV"));
  glVertexAttribL3d = PFNGLVERTEXATTRIBL3DPROC(glfwGetProcAddress("glVertexAttribL3d"));
  glVertexAttribL3dv = PFNGLVERTEXATTRIBL3DVPROC(glfwGetProcAddress("glVertexAttribL3dv"));
  glVertexAttribL3i64NV = PFNGLVERTEXATTRIBL3I64NVPROC(glfwGetProcAddress("glVertexAttribL3i64NV"));
  glVertexAttribL3i64vNV = PFNGLVERTEXATTRIBL3I64VNVPROC(glfwGetProcAddress("glVertexAttribL3i64vNV"));
  glVertexAttribL3ui64NV = PFNGLVERTEXATTRIBL3UI64NVPROC(glfwGetProcAddress("glVertexAttribL3ui64NV"));
  glVertexAttribL3ui64vNV = PFNGLVERTEXATTRIBL3UI64VNVPROC(glfwGetProcAddress("glVertexAttribL3ui64vNV"));
  glVertexAttribL4d = PFNGLVERTEXATTRIBL4DPROC(glfwGetProcAddress("glVertexAttribL4d"));
  glVertexAttribL4dv = PFNGLVERTEXATTRIBL4DVPROC(glfwGetProcAddress("glVertexAttribL4dv"));
  glVertexAttribL4i64NV = PFNGLVERTEXATTRIBL4I64NVPROC(glfwGetProcAddress("glVertexAttribL4i64NV"));
  glVertexAttribL4i64vNV = PFNGLVERTEXATTRIBL4I64VNVPROC(glfwGetProcAddress("glVertexAttribL4i64vNV"));
  glVertexAttribL4ui64NV = PFNGLVERTEXATTRIBL4UI64NVPROC(glfwGetProcAddress("glVertexAttribL4ui64NV"));
  glVertexAttribL4ui64vNV = PFNGLVERTEXATTRIBL4UI64VNVPROC(glfwGetProcAddress("glVertexAttribL4ui64vNV"));
  glVertexAttribLFormat = PFNGLVERTEXATTRIBLFORMATPROC(glfwGetProcAddress("glVertexAttribLFormat"));
  glVertexAttribLFormatNV = PFNGLVERTEXATTRIBLFORMATNVPROC(glfwGetProcAddress("glVertexAttribLFormatNV"));
  glVertexAttribLPointer = PFNGLVERTEXATTRIBLPOINTERPROC(glfwGetProcAddress("glVertexAttribLPointer"));
  glVertexAttribP1ui = PFNGLVERTEXATTRIBP1UIPROC(glfwGetProcAddress("glVertexAttribP1ui"));
  glVertexAttribP1uiv = PFNGLVERTEXATTRIBP1UIVPROC(glfwGetProcAddress("glVertexAttribP1uiv"));
  glVertexAttribP2ui = PFNGLVERTEXATTRIBP2UIPROC(glfwGetProcAddress("glVertexAttribP2ui"));
  glVertexAttribP2uiv = PFNGLVERTEXATTRIBP2UIVPROC(glfwGetProcAddress("glVertexAttribP2uiv"));
  glVertexAttribP3ui = PFNGLVERTEXATTRIBP3UIPROC(glfwGetProcAddress("glVertexAttribP3ui"));
  glVertexAttribP3uiv = PFNGLVERTEXATTRIBP3UIVPROC(glfwGetProcAddress("glVertexAttribP3uiv"));
  glVertexAttribP4ui = PFNGLVERTEXATTRIBP4UIPROC(glfwGetProcAddress("glVertexAttribP4ui"));
  glVertexAttribP4uiv = PFNGLVERTEXATTRIBP4UIVPROC(glfwGetProcAddress("glVertexAttribP4uiv"));
  glVertexAttribPointer = PFNGLVERTEXATTRIBPOINTERPROC(glfwGetProcAddress("glVertexAttribPointer"));
  glVertexBindingDivisor = PFNGLVERTEXBINDINGDIVISORPROC(glfwGetProcAddress("glVertexBindingDivisor"));
  glVertexFormatNV = PFNGLVERTEXFORMATNVPROC(glfwGetProcAddress("glVertexFormatNV"));
  glViewport = PFNGLVIEWPORTPROC(glfwGetProcAddress("glViewport"));
  glViewportArrayv = PFNGLVIEWPORTARRAYVPROC(glfwGetProcAddress("glViewportArrayv"));
  glViewportIndexedf = PFNGLVIEWPORTINDEXEDFPROC(glfwGetProcAddress("glViewportIndexedf"));
  glViewportIndexedfv = PFNGLVIEWPORTINDEXEDFVPROC(glfwGetProcAddress("glViewportIndexedfv"));
  glViewportPositionWScaleNV = PFNGLVIEWPORTPOSITIONWSCALENVPROC(glfwGetProcAddress("glViewportPositionWScaleNV"));
  glViewportSwizzleNV = PFNGLVIEWPORTSWIZZLENVPROC(glfwGetProcAddress("glViewportSwizzleNV"));
  glWaitSync = PFNGLWAITSYNCPROC(glfwGetProcAddress("glWaitSync"));
  glWaitVkSemaphoreNV = PFNGLWAITVKSEMAPHORENVPROC(glfwGetProcAddress("glWaitVkSemaphoreNV"));
  glWeightPathsNV = PFNGLWEIGHTPATHSNVPROC(glfwGetProcAddress("glWeightPathsNV"));
  glWindowRectanglesEXT = PFNGLWINDOWRECTANGLESEXTPROC(glfwGetProcAddress("glWindowRectanglesEXT"));
#endif

  // 使用している GPU のバッファアライメントを調べる
  glGetIntegerv(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, &ggBufferAlignment);
}

/*
** OpenGL のエラーをチェックする
**
**   OpenGL の API を呼び出し直後に実行すればエラーのあるときにメッセージを表示する
**
**   msg エラー発生時に標準エラー出力に出力する文字列. nullptr なら何も出力しない
*/
void gg::ggError(const char *name, unsigned int line)
{
  const GLenum error(glGetError());

  if (error != GL_NO_ERROR)
  {
    if (name)
    {
      std::cerr << name;
      if (line > 0) std::cerr << " (" << line << ")";
      std::cerr << ": ";
    }

    switch (error)
    {
    case GL_INVALID_ENUM:
      std::cerr << "An unacceptable value is specified for an enumerated argument" << std::endl;
      break;
    case GL_INVALID_VALUE:
      std::cerr << "A numeric argument is out of range" << std::endl;
      break;
    case GL_INVALID_OPERATION:
      std::cerr << "The specified operation is not allowed in the current state" << std::endl;
      break;
    case GL_OUT_OF_MEMORY:
      std::cerr << "There is not enough memory left to execute the command" << std::endl;
      break;
    case GL_INVALID_FRAMEBUFFER_OPERATION:
      std::cerr << "The specified operation is not allowed current frame buffer" << std::endl;
      break;
    default:
      std::cerr << "An OpenGL error has occured: " << std::hex << std::showbase << error << std::endl;
      break;
    }
  }
}

/*
** FBO のエラーをチェックする
**
**   FBO の API を呼び出し直後に実行すればエラーのあるときにメッセージを表示する
**
**   msg エラー発生時に標準エラー出力に出力する文字列. nullptr なら何も出力しない
*/
void gg::ggFBOError(const char *name, unsigned int line)
{
  const GLenum status(glCheckFramebufferStatus(GL_FRAMEBUFFER));

  if (status != GL_FRAMEBUFFER_COMPLETE)
  {
    if (name)
    {
      std::cerr << name;
      if (line > 0) std::cerr << " (" << line << ")";
      std::cerr << ": ";
    }

    switch (status)
    {
    case GL_FRAMEBUFFER_UNSUPPORTED:
      std::cerr << "Unsupported framebuffer internal" << std::endl;
      break;
    case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      std::cerr << "Framebuffer incomplete, missing attachment" << std::endl;
      break;
    case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      std::cerr << "Framebuffer incomplete, duplicate attachment" << std::endl;
      break;
    case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER:
      std::cerr << "Framebuffer incomplete, missing draw buffer" << std::endl;
      break;
    case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER:
      std::cerr << "Framebuffer incomplete, missing read buffer" << std::endl;
      break;
    default:
      std::cerr << "Programming error; will fail on all hardware: " << std::hex << std::showbase << status << std::endl;
      break;
    }
  }
}

/*
** 配列に格納された画像の内容を TGA ファイルに保存する
**
**   name ファイル名
**   buffer 画像データ
**   sx 画像の幅
**   sy 画像の高さ
**   depth 画像の 1 画素のバイト数
**   戻り値 保存に成功したら true
*/
bool gg::ggSaveTga(const char *name, const void *buffer,
  unsigned int sx, unsigned int sy, unsigned int depth)
{
  // ファイルを開く
  std::ofstream file(name, std::ios::binary);

  // ファイルが開けなかったら戻る
  if (!file)
  {
    std::cerr << "Error: Can't open file: " << name << std::endl;
    return false;
  }

  // 画像のヘッダ
  const unsigned char type(depth == 0 ? 0 : depth < 3 ? 3 : 2);
  const unsigned char alpha(depth == 2 || depth == 4 ? 8 : 0);
  const unsigned char header[18] =
  {
    0,          // ID length
    0,          // Color map type (none)
    type,       // Image Type (2:RGB, 3:Grayscale)
    0, 0,       // Offset into the color map table
    0, 0,       // Number of color map entries
    0,          // Number of a color map entry bits per pixel
    0, 0,       // Horizontal image position
    0, 0,       // Vertical image position
    static_cast<unsigned char>(sx & 0xff),
    static_cast<unsigned char>(sx >> 8),
    static_cast<unsigned char>(sy & 0xff),
    static_cast<unsigned char>(sy >> 8),
    static_cast<unsigned char>(depth * 8),
    alpha       // Image descriptor
  };

  // ヘッダを書き込む
  file.write(reinterpret_cast<const char *>(header), sizeof header);

  // ヘッダの書き込みに失敗したら戻る
  if (file.bad())
  {
    std::cerr << "Error: Can't write file header: " << name << std::endl;
    file.close();
    return false;
  }

  // データを書き込む
  unsigned int size(sx * sy * depth);
  if (type == 2)
  {
    // フルカラー
    std::vector<char> temp(size);
    for (GLuint i = 0; i < size; i += depth)
    {
      temp[i + 2] = static_cast<const char *>(buffer)[i + 0];
      temp[i + 1] = static_cast<const char *>(buffer)[i + 1];
      temp[i + 0] = static_cast<const char *>(buffer)[i + 2];
      if (depth == 4) temp[i + 3] = static_cast<const char *>(buffer)[i + 3];
    }
    file.write(&temp[0], size);
  }
  else if (type == 3)
  {
    // グレースケール
    file.write(static_cast<const char *>(buffer), size);
  }

  // フッタを書き込む
  constexpr char footer[] = "\0\0\0\0\0\0\0\0TRUEVISION-XFILE.";
  file.write(footer, sizeof footer);

  // データの書き込みに失敗したら戻る
  if (file.bad())
  {
    std::cerr << "Error: Can't write image data: " << name << std::endl;
    file.close();
    return false;
  }

  // ファイルを閉じる
  file.close();
  return true;
}

/*
** カラーバッファの内容を TGA ファイルに保存する
**
**   name 保存するファイル名
**   戻り値 保存に成功したら true
*/
bool gg::ggSaveColor(const char *name)
{
  // 現在のビューポートのサイズを得る
  GLint viewport[4];
  glGetIntegerv(GL_VIEWPORT, viewport);

  // ビューポートのサイズ分のメモリを確保する
  std::vector<GLubyte> buffer(viewport[2] * viewport[3] * 3);

  // 画面表示の完了を待つ
  glFinish();

  // カラーバッファを読み込む
  glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3],
    GL_BGR, GL_UNSIGNED_BYTE, buffer.data());

  // 読み込んだデータをファイルに書き込む
  return ggSaveTga(name, buffer.data(), viewport[2], viewport[3], 3);
}

/*
** デプスバッファの内容を TGA ファイルに保存する
**
**   name 保存するファイル名
**   戻り値 保存に成功したら true
*/
bool gg::ggSaveDepth(const char *name)
{
  // 現在のビューポートのサイズを得る
  GLint viewport[4];
  glGetIntegerv(GL_VIEWPORT, viewport);

  // ビューポートのサイズ分のメモリを確保する
  std::vector<GLubyte> buffer(viewport[2] * viewport[3]);

  // 画面表示の完了を待つ
  glFinish();

  // デプスバッファを読み込む
  glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3],
    GL_DEPTH_COMPONENT, GL_UNSIGNED_BYTE, buffer.data());

  // 読み込んだデータをファイルに書き込む
  return ggSaveTga(name, buffer.data(), viewport[2], viewport[3], 1);
}

/*
** TGA ファイル (8/16/24/32bit) を読み込む
**
**   name 読み込むファイル名
**   width 読み込んだファイルの幅
**   height 読み込んだファイルの高さ
**   format 読み込んだファイルのフォーマット
**   戻り値 読み込んだ画像データのポインタ (要 delete, 読み込めなければ nullptr)
*/
GLubyte *gg::ggLoadTga(const char *name, GLsizei *width, GLsizei *height, GLenum *format)
{
  // ファイルを開く
  std::ifstream file(name, std::ios::binary);

  // ファイルが開けなかったら戻る
  if (!file)
  {
    std::cerr << "Error: Can't open file: " << name << std::endl;
    return nullptr;
  }

  // ヘッダを読み込む
  unsigned char header[18];
  file.read(reinterpret_cast<char *>(header), sizeof header);

  // ヘッダの読み込みに失敗したら戻る
  if (file.bad())
  {
    std::cerr << "Error: Can't read file header: " << name << std::endl;
    file.close();
    return nullptr;
  }

  // 深度
  const int depth(header[16] / 8);
  switch (depth)
  {
  case 1:
    *format = GL_RED;
    break;
  case 2:
    *format = GL_RG;
    break;
  case 3:
    *format = GL_BGR;
    break;
  case 4:
    *format = GL_BGRA;
    break;
  default:
    // 取り扱えないフォーマットだったら戻る
    std::cerr << "Error: Unusable format: " << depth << std::endl;
    file.close();
    return nullptr;
  }

  // 幅と高さ
  *width = header[13] << 8 | header[12];
  *height = header[15] << 8 | header[14];

  // データサイズ
  const int size(*width * *height * depth);
  if (size < 2) return nullptr;

  // 読み込みに使うメモリを確保する
  GLubyte *const buffer(new(std::nothrow) GLubyte[size]);

  // メモリが確保できなければ戻る
  if (buffer == nullptr)
  {
    std::cerr << "Error: Too large file: " << name << std::endl;
    file.close();
    return nullptr;
  }

  // データを読み込む
  if (header[2] & 8)
  {
    // RLE
    int p(0);
    char c;
    while (file.get(c))
    {
      if (c & 0x80)
      {
        // run-length packet
        const int count((c & 0x7f) + 1);
        if (p + depth * count > size) break;
        char temp[4];
        file.read(temp, depth);
        for (int i = 0; i < count; ++i)
        {
          for (int j = 0; j < depth;) buffer[p++] = temp[j++];
        }
      }
      else
      {
        // raw packet
        const int count((c + 1) * depth);
        if (p + count > size) break;
        file.read(reinterpret_cast<char *>(buffer + p), count);
        p += count;
      }
    }
  }
  else
  {
    // 非圧縮
    file.read(reinterpret_cast<char *>(buffer), size);
  }

  // 読み込みに失敗していたら警告を出す
  if (file.bad()) std::cerr << "Waring: Can't read image data: " << name << std::endl;

  // ファイルを閉じる
  file.close();

  // 画像を読み込んだメモリを返す
  return buffer;
}

/*
** テクスチャメモリを確保して画像を読み込む
**
**   width 画像の幅
**   height 画像の高さ
**   internal テクスチャの内部フォーマット
**   format 画像データのフォーマット
**   image 画像データ
**   戻り値 テクスチャオブジェクト名
*/
GLuint gg::ggLoadTexture(GLsizei width, GLsizei height, GLenum internal,
  GLenum format, const GLvoid *image)
{
  // テクスチャオブジェクト
  GLuint tex;
  glGenTextures(1, &tex);
  glBindTexture(GL_TEXTURE_2D, tex);

  // アルファチャンネルがついていれば 4 バイト境界に設定する
  glPixelStorei(GL_UNPACK_ALIGNMENT, (format == GL_BGRA || format == GL_RGBA) ? 4 : 1);

  // テクスチャを割り当てる
  glTexImage2D(GL_TEXTURE_2D, 0, internal, width, height, 0, format, GL_UNSIGNED_BYTE, image);

  // バイリニア（ミップマップなし），エッジでクランプ
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

  // テクスチャオブジェクト名を返す
  return tex;
}

/*
** TGA ファイルをテクスチャメモリに読み込む
**
**   name TGA ファイル名
**   internal テクスチャの内部フォーマット
**   戻り値 テクスチャオブジェクト名
*/
GLuint gg::ggLoadImage(const char *name, GLenum internal)
{
  // 画像サイズ
  GLsizei width, height;

  // 画像フォーマット
  GLenum format;

  // 画像を読み込む
  const std::unique_ptr<const GLubyte> image(ggLoadTga(name, &width, &height, &format));

  // 画像が読み込めなかったら戻る
  if (image == nullptr) return 0;

  // internal == 0 なら内部フォーマットを読み込んだファイルに合わせる
  if (internal == 0)
  {
    switch (format)
    {
    case GL_BGR:
      internal = GL_RGB;
      break;
    case GL_BGRA:
      internal = GL_RGBA;
      break;
    default:
      internal = format;
      break;
    }
  }

  // テクスチャメモリに読み込む
  const GLuint tex(ggLoadTexture(width, height, internal, format, image.get()));

  // テクスチャオブジェクト名を返す
  return tex;
}

/*
** TGA 画像ファイルの高さマップ読み込んでテクスチャメモリに法線マップを作成する
**
**   name TGA ファイル名
**   nz 作成した法線の z 成分の割合
**   internal テクスチャの内部フォーマット
**   戻り値 テクスチャオブジェクト名
*/
GLuint gg::ggLoadHeight(const char *name, float nz, GLenum internal)
{
  // 画像サイズ
  GLsizei width, height;

  // 画像フォーマット
  GLenum format;

  // 高さマップの画像を読み込む
  const GLubyte *const hmap(ggLoadTga(name, &width, &height, &format));

  // 画像が読み込めなかったら戻る
  if (hmap == nullptr) return 0;

  // 画素のバイト数
  int bytes;
  switch (format)
  {
  case GL_RED:
    bytes = 1;
    break;
  case GL_RG:
    bytes = 2;
    break;
  case GL_BGR:
    bytes = 3;
    break;
  case GL_BGRA:
    bytes = 4;
    break;
  default:
    bytes = 1;
    break;
  }

  // メモリサイズ
  const GLsizei maxsize(width * height);

  // 法線マップのメモリを確保する
  std::vector<GgVector> nmap(maxsize);

  // 法線マップの作成
  for (GLsizei i = 0; i < maxsize; ++i)
  {
    const int x(i % width);
    const int y(i - x);
    const int o(i * bytes);
    const int u((y + (x + 1) % width) * bytes);
    const int v(((y + width) % maxsize + x) * bytes);

    // 隣接する画素との値の差を法線の成分に用いる
    nmap[i][0] = static_cast<GLfloat>(hmap[u] - hmap[o]);
    nmap[i][1] = static_cast<GLfloat>(hmap[v] - hmap[o]);
    nmap[i][2] = nz;
    nmap[i][3] = hmap[o];

    // 法線ベクトルを正規化する
    ggNormalize3(nmap[i].data());
  }

  // 内部フォーマットが浮動小数点テクスチャでなければ [0,1] に変換する
  if (
    internal != GL_RGB16F  &&
    internal != GL_RGBA16F &&
    internal != GL_RGB32F  &&
    internal != GL_RGBA32F
    )
  {
    for (GLsizei i = 0; i < maxsize; ++i)
    {
      nmap[i][0] = nmap[i][0] * 0.5f + 0.5f;
      nmap[i][1] = nmap[i][1] * 0.5f + 0.5f;
      nmap[i][2] = nmap[i][2] * 0.5f + 0.5f;
      nmap[i][3] *= 0.0039215686f; // == 1/255
    }
  }

  // テクスチャオブジェクト
  GLuint tex;
  glGenTextures(1, &tex);
  glBindTexture(GL_TEXTURE_2D, tex);

  // nmap が GLfloat なので 4 バイト境界に設定する
  glPixelStorei(GL_UNPACK_ALIGNMENT, 4);

  // テクスチャを割り当てる
  glTexImage2D(GL_TEXTURE_2D, 0, internal, width, height, 0, GL_RGBA, GL_FLOAT, nmap.data());

  // バイリニア（ミップマップなし），エッジでクランプ
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  // テクスチャオブジェクト名を返す
  return tex;
}

// \cond
/*
** OBJ ファイルの読み込みに使うデータ型と関数
*/
namespace gg
{
  // GLfloat 型の 2 要素のベクトル
  typedef std::array<GLfloat, 2> vec2;

  // GLfloat 型の 3 要素のベクトル
  typedef std::array<GLfloat, 3> vec3;

  // 三角形データ
  struct fidx
  {
    GLuint p[3];        // 頂点座標番号
    GLuint n[3];        // 頂点法線番号
    GLuint t[3];        // テクスチャ座標番号
    bool smooth;        // スムーズシェーディングの有無
  };

  // ポリゴングループ
  struct fgrp
  {
    GLuint nextgroup;   // 次のポリゴングループの最初の三角形番号
    GLuint mtlno;       // このポリゴングループの材質番号

    // コンストラクタ
    fgrp(GLuint nextgroup, GLuint mtlno)
      : nextgroup(nextgroup), mtlno(mtlno) {}
  };

  // デフォルトの材質
  constexpr GgSimpleMaterial defaultMaterial =
  {
    { 0.1f, 0.1f, 0.1f, 1.0f },
    { 0.6f, 0.6f, 0.6f, 0.0f },
    { 0.3f, 0.3f, 0.3f, 0.0f },
    60.0f
  };

  // デフォルトの材質名
  constexpr char defaultMaterialName[] = "_default_";

  /*
  ** Alias OBJ 形式の MTL ファイルを読み込む
  **
  **   mtlpath MTL ファイルのパス名
  **   mtl 読み込んだ材質名をキー，材質番号を値にした map
  **   material 材質データ
  */
  static bool ggLoadMtl(const std::string &mtlpath,
    std::map<std::string, GLuint> &mtl,
    std::vector<GgSimpleMaterial> &material)
  {
    // MTL ファイルが無ければ戻る
    std::ifstream mtlfile(mtlpath.c_str(), std::ios::binary);
    if (!mtlfile)
    {
      std::cerr << "Warning: Can't open MTL file: " << mtlpath << std::endl;
      return false;
    }

    // 一行読み込み用のバッファ
    std::string mtlline;

    // 材質名（ループの外に置く）
    std::string mtlname(defaultMaterialName);

    // 現在の材質番号を登録する
    mtl[mtlname] = static_cast<GLuint>(material.size());

    // 現在の材質にデフォルトの材質を設定する
    material.emplace_back(defaultMaterial);

    // 材質データを読み込む
    while (std::getline(mtlfile, mtlline))
    {
      // 空行は読み飛ばす
      if (mtlline == "" || mtlline == "\r") continue;

      // 読み込んだ行を文字列ストリームにする
      std::istringstream mtlstr(mtlline);

      // オペレータ
      std::string mtlop;

      // 文字列ストリームから材質パラメータの種類を取り出す
      mtlstr >> mtlop;

      // '#' で始まる場合はコメントとして行末まで読み飛ばす
      if (mtlop[0] == '#') continue;

      if (mtlop == "newmtl")
      {
        // 新規作成する材質名を取り出す
        mtlstr >> mtlname;

        // 材質名が既に存在するかどうか調べる
        const auto m(mtl.find(mtlname));
        if (m == mtl.end())
        {
          // 存在しないので新規作成する材質の番号をその材質名に割り当てる
          mtl[mtlname] = static_cast<GLuint>(material.size());

          // 新規作成する材質にデフォルトの材質を設定しておく
          material.emplace_back(defaultMaterial);
        }

#if defined(_DEBUG)
        std::cerr << "newmtl: " << mtlname << std::endl;
#endif
      }
      else if (mtlop == "Ka")
      {
        // 環境光の反射係数を登録する
        mtlstr
          >> material.back().ambient[0]
          >> material.back().ambient[1]
          >> material.back().ambient[2];
      }
      else if (mtlop == "Kd")
      {
        // 拡散反射係数を登録する
        mtlstr
          >> material.back().diffuse[0]
          >> material.back().diffuse[1]
          >> material.back().diffuse[2];
      }
      else if (mtlop == "Ks")
      {
        // 鏡面反射係数を登録する
        mtlstr
          >> material.back().specular[0]
          >> material.back().specular[1]
          >> material.back().specular[2];
      }
      else if (mtlop == "Ns")
      {
        // 輝き係数を登録する
        float shininess;
        mtlstr >> shininess;
        material.back().shininess = shininess * 0.1f;
      }
      else if (mtlop == "d")
      {
        // 不透明度を登録する
        mtlstr >> material.back().ambient[3];
      }
    }

    // MTL ファイルの読み込みに失敗したら戻る
    if (mtlfile.bad())
    {
      std::cerr << "Warning: Can't read MTL file: " << mtlpath << std::endl;
      mtlfile.close();
      return false;
    }

    // MTL ファイルを閉じて戻る
    mtlfile.close();
    return true;
  }

  /*
  ** Alias OBJ 形式のファイルを解析する
  **
  **   name Alias OBJ 形式のファイルのファイル名
  **   group 同じ材質を割り当てるポリゴングループ
  **   mtl 読み込んだ材質名をキーにした map
  **   pos 頂点の位置
  **   norm 頂点の法線
  **   tex 頂点のテクスチャ座標
  **   face 三角形のデータ
  */
  static bool ggParseObj(const char *name, std::vector<fgrp> &group,
    std::vector<GgSimpleMaterial> &material,
    std::vector<vec3> &pos, std::vector<vec3> &norm, std::vector<vec2> &tex,
    std::vector<fidx> &face,
    bool normalize)
  {
    // ファイルパスからディレクトリ名を取り出す
    const std::string path(name);
    const size_t base(path.find_last_of("/\\"));
    const std::string dirname((base == std::string::npos) ? "" : path.substr(base + 1));

    // OBJ ファイルを読み込む
    std::ifstream file(path.c_str());

    // 読み込みに失敗したら戻る
    if (!file)
    {
      std::cerr << "Error: Can't open OBJ file: " << path << std::endl;
      return false;
    }

    // ポリゴングループの最初の三角形番号
    GLuint startgroup(static_cast<GLuint>(group.size()));

    // スムーズシェーディングのスイッチ
    bool smooth(false);

    // 材質のテーブル
    std::map<std::string, GLuint> mtl;

    // 現在の材質名（ループの外で宣言する）
    std::string mtlname;

    // 座標値の最小値・最大値
    vec3 bmin{ FLT_MAX }, bmax{ -FLT_MAX };

    // 一行読み込み用のバッファ
    std::string line;

    // データの読み込み
    while (std::getline(file, line))
    {
      // 最後の文字が \r なら削除する
      if (*(line.end() - 1) == '\r') line.erase(--line.end());

      // 空行は読み飛ばす
      if (line == "") continue;

      // 一行を文字列ストリームに入れる
      std::istringstream str(line);

      // 最初のトークンを命令 (op) とみなす
      std::string op;
      str >> op;

      if (op[0] == '#') continue;

      if (op == "v")
      {
        // 頂点位置
        vec3 v;

        // 頂点位置はスペースで区切られている
        str >> v[0] >> v[1] >> v[2];

        // 頂点位置を記録する
        pos.emplace_back(v);

        // 頂点位置の最小値と最大値を求める (AABB)
        for (int i = 0; i < 3; ++i)
        {
          bmin[i] = std::min(bmin[i], v[i]);
          bmax[i] = std::max(bmax[i], v[i]);
        }
      }
      else if (op == "vt")
      {
        // テクスチャ座標
        vec2 t;

        // 頂点位置はスペースで区切られている
        str >> t[0] >> t[1];

        // テクスチャ座標を記録する
        tex.emplace_back(t);
      }
      else if (op == "vn")
      {
        // 頂点法線
        vec3 n;

        // 頂点法線はスペースで区切られている
        str >> n[0] >> n[1] >> n[2];

        // 頂点法線を記録する
        norm.emplace_back(n);
      }
      else if (op == "f")
      {
        // 三角形データ
        fidx f;

        // スムースシェーディング
        f.smooth = smooth;

        // 三頂点のそれぞれについて
        for (int i = 0; i < 3; ++i)
        {
          // １項目取り出す
          std::string s;
          str >> s;

          // 項目の最初の要素は頂点座標番号
          f.p[i] = atoi(s.c_str());

          // テクスチャ座標と法線の番号は未定義を表す 0 にしておく
          f.t[i] = f.n[i] = 0;

          // 残りの項目を取り出す
          size_t l(s.find('/', 0));
          if (l != std::string::npos)
          {
            // 二つ目の項目の先頭の位置
            ++l;

            // 二つ目の項目はテクスチャ座標
            f.t[i] = atoi(s.c_str() + l);

            // 三つ目の項目
            l = s.find('/', l);
            if (l != std::string::npos)
            {
              // 三つ目の項目の先頭の位置
              ++l;

              // 三つ目の項目は法線番号
              f.n[i] = atoi(s.c_str() + l);
            }
          }
        }

        // 三角形データを登録する
        face.emplace_back(f);
      }
      else if (op == "s")
      {
        // '1' だったらスムースシェーディング有効
        std::string s;
        str >> s;
        smooth = s == "1";
      }
      else if (op == "usemtl")
      {
        // 次のポリゴングループの最初の三角形番号
        const GLuint nextgroup(static_cast<GLuint>(face.size()));

        // ポリゴングループに三角形が存在すれば
        if (nextgroup > startgroup)
        {
          // ポリゴングループの三角形数と材質番号を記録する
          group.emplace_back(nextgroup, mtl[mtlname]);

          // 次のポリゴングループの開始番号を保存しておく
          startgroup = nextgroup;
        }

        // 次に usemtl が来るまで材質名を保持する
        str >> mtlname;

        // 材質の存在チェック
        if (mtl.find(mtlname) == mtl.end())
        {
          std::cerr << "Warning: Undefined material: " << mtlname << std::endl;

          // デフォルトの材質を割り当てておく
          mtlname = defaultMaterialName;
        }
#if defined(_DEBUG)
        else std::cerr << "usemtl: " << mtlname << std::endl;
#endif
      }
      else if (op == "mtllib")
      {
        // MTL ファイルのパス名を作る
        str >> std::ws;
        std::string mtlpath;
        std::getline(str, mtlpath);

        // MTL ファイルを読み込む
        ggLoadMtl(dirname + mtlpath, mtl, material);
      }
    }

    // OBJ ファイルの読み込みに失敗したら戻る
    if (file.bad())
    {
      std::cerr << "Error: Can't read OBJ file: " << path << std::endl;
      file.close();
      return false;
    }

    // ファイルを閉じる
    file.close();

    // 最後のポリゴングループの次の三角形番号
    const GLuint nextgroup(static_cast<GLuint>(face.size()));
    if (nextgroup > startgroup)
    {
      // 最後のポリゴングループの三角形数と材質を記録する
      group.emplace_back(nextgroup, mtl[mtlname]);
    }

    // スムーズシェーディングしない三角形の頂点を追加する
    for (auto &f : face)
    {
      if (!f.smooth)
      {
        // 三頂点のそれぞれについて
        for (int i = 0; i < 3; ++i)
        {
          // 新しい頂点座標を生成する (std::array の要素は emplace_back できない)
          pos.push_back(pos[f.p[i] - 1]);
          f.p[i] = static_cast<int>(pos.size());

          if (f.t[i] > 0)
          {
            // 新しいテクスチャ座標を生成する
            tex.push_back(tex[f.t[i] - 1]);
            f.t[i] = static_cast<int>(tex.size());
          }

          if (f.n[i] > 0)
          {
            // 新しい法線を生成する
            norm.push_back(norm[f.n[i] - 1]);
            f.n[i] = static_cast<int>(norm.size());
          }
        }
      }
    }

    // 法線データがなければ算出しておく
    if (norm.empty())
    {
      // 法線データ数の初期値は頂点数と同じでスムーズシェーディングのために初期値は 0
      norm.resize(pos.size(), { 0.0f, 0.0f, 0.0f });

      // 面の法線の算出と頂点法線の算出
      for (auto &f : face)
      {
        // 頂点座標番号
        const int v0(f.p[0] - 1);
        const int v1(f.p[1] - 1);
        const int v2(f.p[2] - 1);

        // v1 - v0, v2 - v0 を求める
        const GLfloat d1[] = { pos[v1][0] - pos[v0][0], pos[v1][1] - pos[v0][1], pos[v1][2] - pos[v0][2] };
        const GLfloat d2[] = { pos[v2][0] - pos[v0][0], pos[v2][1] - pos[v0][1], pos[v2][2] - pos[v0][2] };

        // 外積により面法線を求める
        vec3 n;
        ggCross(n.data(), d1, d2);

        if (f.smooth)
        {
          // スムースシェーディングを行うときは
          for (int i = 0; i < 3; ++i)
          {
            // 面法線を頂点法線に積算する
            norm[v0][i] += n[i];
            norm[v1][i] += n[i];
            norm[v2][i] += n[i];

            // 面の各頂点の法線番号は頂点番号と同じにする
            f.n[i] = f.p[i];
          }
        }
        else
        {
          // 面法線を最初の頂点に保存する
          norm[v0] = n;
          f.n[0] = f.p[0];

          // 2 頂点追加
          for (int i = 1; i < 3; ++i)
          {
            norm.emplace_back(n);
            f.n[i] = static_cast<GLuint>(norm.size());
          }
        }
      }

      // 頂点の法線ベクトルを正規化する
      for (auto &n : norm) ggNormalize3(n.data());
    }

    // 図形の正規化
    if (normalize)
    {
      // 図形の大きさ
      const GLfloat sx(bmax[0] - bmin[0]);
      const GLfloat sy(bmax[1] - bmin[1]);
      const GLfloat sz(bmax[2] - bmin[2]);

      // 図形のスケール
      GLfloat s(sx);
      if (sy > s) s = sy;
      if (sz > s) s = sz;
      const GLfloat scale((s != 0.0f) ? 2.0f / s : 1.0f);

      // 図形の中心位置
      const GLfloat cx((bmax[0] + bmin[0]) * 0.5f);
      const GLfloat cy((bmax[1] + bmin[1]) * 0.5f);
      const GLfloat cz((bmax[2] + bmin[2]) * 0.5f);

      // 図形の大きさと位置を正規化する
      for (auto &p : pos)
      {
        p[0] = (p[0] - cx) * scale;
        p[1] = (p[1] - cy) * scale;
        p[2] = (p[2] - cz) * scale;
      }
    }

#if defined(_DEBUG)
    std::cerr
      << "[" << name << "]\n(Parsed) Group: " << group.size() << ", Material: " << mtl.size()
      << ", Pos: " << pos.size() << ", Norm: " << norm.size() << ", Tex: " << tex.size()
      << ", Face: " << face.size() << "\n";
#endif

    // OBJ ファイルの読み込み成功
    return true;
  }
}
// \endcond

/*
** 三角形分割された Alias OBJ 形式のファイルと MTL ファイルを読み込む (Arrays 形式)
**
**   name 読み込むOBJ ファイル名
**   group 読み込んだデータの各ポリゴングループの最初の三角形番号と三角形数
**   material 読み込んだデータのポリゴングループごとの材質
**   vert 読み込んだデータの頂点属性
**   normalize true ならサイズを正規化する
**   戻り値 読み込みに成功したら true
*/
bool gg::ggLoadObj(const char *name,
  std::vector< std::array<GLuint, 3> > &group,
  std::vector<GgSimpleMaterial> &material,
  std::vector<GgVertex> &vert,
  bool normalize)
{
  // 読み込み用の一時記憶領域
  std::vector<fgrp> tgroup;
  std::vector<vec3> tpos;
  std::vector<vec3> tnorm;
  std::vector<vec2> ttex;
  std::vector<fidx> tface;

  // OBJ ファイルを解析する
  if (!ggParseObj(name, tgroup, material, tpos, tnorm, ttex, tface, normalize)) return false;

  // 頂点属性データのメモリを確保する
  vert.reserve(vert.size() + tface.size() * 3);

  // ポリゴングループデータのメモリを確保する
  group.reserve(group.size() + tgroup.size());
  material.reserve(material.size() + tgroup.size());

  // ポリゴングループの最初の三角形番号
  GLuint startgroup(0);

  // ポリゴングループデータの作成
  for (auto &g : tgroup)
  {
    // このポリゴングループの最初の頂点番号と頂点数・材質番号
    std::array<GLuint, 3> v;

    // このポリゴングループの最初の頂点番号を保存する
    v[0] = static_cast<GLuint>(vert.size());

    // 三角形ごとの頂点データの作成
    for (GLuint j = startgroup; j < g.nextgroup; ++j)
    {
      // 処理対象の三角形
      auto &f = tface[j];

      // 三頂点のそれぞれについて
      for (int i = 0; i < 3; ++i)
      {
        // テクスチャ座標
        vec2 tex = { 0.0f };
        if (f.t[i] > 0) tex = ttex[f.t[i] - 1];

        // 頂点法線
        vec3 norm = { 0.0f };
        if (f.n[i] > 0) norm = tnorm[f.n[i] - 1];

        // 頂点属性の追加
        vert.emplace_back(tpos[f.p[i] - 1].data(), norm.data());
      }
    }

    // このポリゴングループの頂点数を保存する
    v[1] = static_cast<GLuint>(vert.size()) - v[0];
    v[2] = g.mtlno;

    // このポリゴングループの最初の頂点番号と頂点数・材質番号を登録する
    group.emplace_back(v);

    // 次のポリゴングループの最初の三角形番号を求める
    startgroup = g.nextgroup;
  }

#if defined(_DEBUG)
  std::cerr
    << "(Stored) Group: " << group.size() << ", Material: " << material.size()
    << ", Vertex: " << vert.size() << "\n";
#endif

  // OBJ ファイルの読み込み成功
  return true;
}

/*
** 三角形分割された Alias OBJ 形式のファイルと MTL ファイルを読み込む (Elements 形式)
**
**   name 読み込むOBJ ファイル名
**   group 読み込んだデータの各ポリゴングループの最初の三角形番号と三角形数
**   material 読み込んだデータのポリゴングループごとの材質
**   vert 読み込んだデータの頂点属性
**   face 読み込んだデータの三角形の頂点インデックス
**   normalize true ならサイズを正規化する
**   戻り値 読み込みに成功したら true
*/
bool gg::ggLoadObj(const char *name,
  std::vector< std::array<GLuint, 3> > &group,
  std::vector<GgSimpleMaterial> &material,
  std::vector<GgVertex> &vert,
  std::vector<GLuint> &face,
  bool normalize)
{
  // 読み込み用の一時記憶領域
  std::vector<fgrp> tgroup;
  std::vector<vec3> tpos;
  std::vector<vec3> tnorm;
  std::vector<vec2> ttex;
  std::vector<fidx> tface;

  // OBJ ファイルを解析する
  if (!ggParseObj(name, tgroup, material, tpos, tnorm, ttex, tface, normalize)) return false;

  // 頂点属性データの最初の頂点番号
  const int vertbase(static_cast<int>(vert.size()));

  // 頂点属性データのメモリを確保する
  vert.resize(vertbase + tpos.size());

  // 三角形データのメモリを確保する
  face.reserve(face.size() + tface.size());

  // ポリゴングループデータのメモリを確保する
  group.reserve(group.size() + tgroup.size());
  material.reserve(material.size() + tgroup.size());

  // ポリゴングループの最初の三角形番号
  GLuint startgroup(0);

  // ポリゴングループデータの作成
  for (auto &g : tgroup)
  {
    // このポリゴングループの最初の頂点番号と頂点数・材質番号
    std::array<GLuint, 3> v;

    // このポリゴングループの最初の三角形番号を保存する
    v[0] = static_cast<GLuint>(face.size());

    // 三角形ごとの頂点データの作成
    for (GLuint j = startgroup; j < g.nextgroup; ++j)
    {
      // 処理対象の三角形
      auto &f = tface[j];

      // 三頂点のそれぞれについて
      for (int i = 0; i < 3; ++i)
      {
        // 追加する三角形データの頂点番号
        const int q(f.p[i] - 1 + vertbase);

        // 三角形データの追加
        face.emplace_back(q);

        // テクスチャ座標番号
        vec2 tex = { 0.0f };
        if (f.t[i] > 0) tex = ttex[f.t[i] - 1];

        // 頂点法線番号
        vec3 norm = { 0.0f };
        if (f.n[i] > 0) norm = tnorm[f.n[i] - 1];

        // 頂点の格納
        vert[q] = GgVertex(tpos[f.p[i] - 1].data(), norm.data());
      }
    }

    // このポリゴングループの三角形数を保存する
    v[1] = static_cast<GLuint>(face.size()) - v[0];
    v[2] = g.mtlno;

    // このポリゴングループの最初の三角形番号と三角形数・材質番号を登録する
    group.emplace_back(v);

    // 次のポリゴングループの最初の三角形番号を求める
    startgroup = g.nextgroup;
  }

#if defined(_DEBUG)
  std::cerr
    << "(Stored) Group: " << group.size() << ", Material: " << material.size()
    << ", Vertex: " << vert.size() << ", Face: " << face.size() << "\n";
#endif

  // OBJ ファイルの読み込み成功
  return true;
}

/*
** シェーダオブジェクトのコンパイル結果を表示する
*/
static GLboolean printShaderInfoLog(GLuint shader, const char *str)
{
  // コンパイル結果を取得する
  GLint status;
  glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
  if (status == GL_FALSE) std::cerr << "Compile Error in " << str << std::endl;

  // シェーダのコンパイル時のログの長さを取得する
  GLsizei bufSize;
  glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &bufSize);

  if (bufSize > 1)
  {
    // シェーダのコンパイル時のログの内容を取得する
    std::vector<GLchar> infoLog(bufSize);
    GLsizei length;
    glGetShaderInfoLog(shader, bufSize, &length, &infoLog[0]);
    std::cerr << &infoLog[0] << std::endl;
  }

  // コンパイル結果を返す
  return static_cast<GLboolean>(status);
}

/*
** プログラムオブジェクトのリンク結果を表示する
*/
static GLboolean printProgramInfoLog(GLuint program)
{
  // リンク結果を取得する
  GLint status;
  glGetProgramiv(program, GL_LINK_STATUS, &status);
  if (status == GL_FALSE) std::cerr << "Link Error." << std::endl;

  // シェーダのリンク時のログの長さを取得する
  GLsizei bufSize;
  glGetProgramiv(program, GL_INFO_LOG_LENGTH, &bufSize);

  // シェーダのリンク時のログの内容を取得する
  if (bufSize > 1)
  {
    std::vector<GLchar> infoLog(bufSize);
    GLsizei length;
    glGetProgramInfoLog(program, bufSize, &length, &infoLog[0]);
    std::cerr << &infoLog[0] << std::endl;
  }

  // リンク結果を返す
  return static_cast<GLboolean>(status);
}

/*
** シェーダのソースプログラムの文字列を読み込んでプログラムオブジェクトを作成する
**
**   vsrc バーテックスシェーダのソースプログラムの文字列
**   fsrc フラグメントシェーダのソースプログラムの文字列 (nullptr なら不使用)
**   gsrc ジオメトリシェーダのソースプログラムの文字列 (nullptr なら不使用)
**   nvarying フィードバックする varying 変数の数 (0 なら不使用)
**   varyings フィードバックする varying 変数のリスト (nullptr なら不使用)
**   vtext バーテックスシェーダのコンパイル時のメッセージに追加する文字列
**   ftext フラグメントシェーダのコンパイル時のメッセージに追加する文字列
**   gtext ジオメトリシェーダのコンパイル時のメッセージに追加する文字列
**   戻り値 シェーダプログラムのプログラム名 (作成できなければ 0)
*/
GLuint gg::ggCreateShader(const char *vsrc, const char *fsrc, const char *gsrc,
  GLint nvarying, const char *const varyings[],
  const char *vtext, const char *ftext, const char *gtext)
{
  // シェーダプログラムの作成
  const GLuint program(glCreateProgram());

  if (program > 0)
  {
    if (vsrc)
    {
      // バーテックスシェーダのシェーダオブジェクトを作成する
      const GLuint vertShader(glCreateShader(GL_VERTEX_SHADER));
      glShaderSource(vertShader, 1, &vsrc, nullptr);
      glCompileShader(vertShader);

      // バーテックスシェーダのシェーダオブジェクトをプログラムオブジェクトに組み込む
      if (printShaderInfoLog(vertShader, vtext))
        glAttachShader(program, vertShader);
      glDeleteShader(vertShader);
    }

    if (fsrc)
    {
      // フラグメントシェーダのシェーダオブジェクトを作成する
      const GLuint fragShader(glCreateShader(GL_FRAGMENT_SHADER));
      glShaderSource(fragShader, 1, &fsrc, nullptr);
      glCompileShader(fragShader);

      // フラグメントシェーダのシェーダオブジェクトをプログラムオブジェクトに組み込む
      if (printShaderInfoLog(fragShader, ftext))
        glAttachShader(program, fragShader);
      glDeleteShader(fragShader);
    }

    if (gsrc)
    {
      // ジオメトリシェーダのシェーダオブジェクトを作成する
      const GLuint geomShader(glCreateShader(GL_GEOMETRY_SHADER));
      glShaderSource(geomShader, 1, &gsrc, nullptr);
      glCompileShader(geomShader);

      // ジオメトリシェーダのシェーダオブジェクトをプログラムオブジェクトに組み込む
      if (printShaderInfoLog(geomShader, gtext))
        glAttachShader(program, geomShader);
      glDeleteShader(geomShader);
    }

    // feedback に使う varying 変数を指定する
    if (nvarying > 0)
      glTransformFeedbackVaryings(program, nvarying, varyings, GL_SEPARATE_ATTRIBS);

    // シェーダプログラムをリンクする
    glLinkProgram(program);

    // プログラムオブジェクトが作成できなければ 0 を返す
    if (printProgramInfoLog(program) == GL_FALSE)
    {
      glDeleteProgram(program);
      return 0;
    }
  }

  // プログラムオブジェクトを返す
  return program;
}

/*
** シェーダのソースファイルを読み込んだメモリを返す
*/
static bool readShaderSource(const char *name, std::vector<GLchar> &src)
{
  // ファイル名が nullptr ならそのまま戻る
  if (name == nullptr) return true;

  // ソースファイルを開く
  std::ifstream file(name, std::ios::binary);
  if (!file)
  {
    // ファイルが開けなければエラーで戻る
    std::cerr << "Error: Can't open source file: " << name << std::endl;
    return false;
  }

  // ファイルの末尾に移動する
  file.seekg(0L, std::ios::end);

  // ファイルサイズ (= ファイルの末尾の位置) + 1 文字のメモリを確保する
  src.resize(static_cast<GLsizei>(file.tellg()) + 1);

  // ファイルを先頭から読み込む
  file.seekg(0L, std::ios::beg);
  file.read(src.data(), src.size());
  src.push_back('\0');

  // ファイルがうまく読み込めなければ戻る
  if (file.bad())
  {
    std::cerr << "Error: Could not read souce file: " << name << std::endl;
    file.close();
    return false;
  }

  // ファイルを閉じて戻る
  file.close();
  return true;
}

/*
** シェーダのソースファイルを読み込んでプログラムオブジェクトを作成する
**
**    vert バーテックスシェーダのソースファイル名
**    frag フラグメントシェーダのソースファイル名 (nullptr なら不使用)
**    geom ジオメトリシェーダのソースファイル名 (nullptr なら不使用)
**    nvarying フィードバックする varying 変数の数 (0 なら不使用)
**    varyings フィードバックする varying 変数のリスト (nullptr なら不使用)
**   戻り値 シェーダプログラムのプログラム名 (作成できなければ 0)
*/
GLuint gg::ggLoadShader(const char *vert, const char *frag, const char *geom,
  GLint nvarying, const char *const varyings[])
{
  // シェーダのソースファイルを読み込む
  std::vector<GLchar> vsrc, fsrc, gsrc;
  if (readShaderSource(vert, vsrc) && readShaderSource(frag, fsrc) && readShaderSource(geom, gsrc))
  {
    // プログラムオブジェクトを作成する
    return ggCreateShader(vsrc.data(), fsrc.data(), gsrc.data(), nvarying, varyings, vert, frag, geom);
  }

  // プログラムオブジェクト作成失敗
  return 0;
}

/*
** 3 要素の長さ
**
**   a GLfloat 型の 3 要素の配列
*/
GLfloat gg::ggLength3(const GLfloat *a)
{
  return sqrt(ggDot3(a, a));
}

/*
** 4 要素の長さ
**
**   a GLfloat 型の 4 要素の配列
*/
GLfloat gg::ggLength4(const GLfloat *a)
{
  return sqrt(ggDot4(a, a));
}

/*
** 変換行列：行列とベクトルの積 c ← a × b
*/
void gg::GgMatrix::projection(GLfloat *c, const GLfloat *a, const GLfloat *b) const
{
  for (int i = 0; i < 4; ++i)
  {
    c[i] = a[0 + i] * b[0] + a[4 + i] * b[1] + a[8 + i] * b[2] + a[12 + i] * b[3];
  }
}

/*
** 変換行列：行列と行列の積 c ← a × b
*/
void gg::GgMatrix::multiply(GLfloat *c, const GLfloat *a, const GLfloat *b) const
{
  for (int i = 0; i < 16; ++i)
  {
    int j = i & 3, k = i & ~3;

    c[i] = a[0 + j] * b[k + 0] + a[4 + j] * b[k + 1] + a[8 + j] * b[k + 2] + a[12 + j] * b[k + 3];
  }
}

/*
** 変換行列：単位行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadIdentity()
{
  array[ 1] = array[ 2] = array[ 3] = array[ 4] =
  array[ 6] = array[ 7] = array[ 8] = array[ 9] =
  array[11] = array[12] = array[13] = array[14] = 0.0f;
  array[ 0] = array[ 5] = array[10] = array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：平行移動変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadTranslate(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  array[12] = x;
  array[13] = y;
  array[14] = z;
  array[ 0] = array[ 5] = array[10] = array[15] = w;
  array[ 1] = array[ 2] = array[ 3] = array[ 4] =
  array[ 6] = array[ 7] = array[ 8] = array[ 9] =
  array[11] = 0.0f;

  return *this;
}

/*
** 変換行列：拡大縮小変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadScale(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  array[ 0] = x;
  array[ 5] = y;
  array[10] = z;
  array[15] = w;
  array[ 1] = array[ 2] = array[ 3] = array[ 4] =
  array[ 6] = array[ 7] = array[ 8] = array[ 9] =
  array[11] = array[12] = array[13] = array[14] = 0.0f;

  return *this;
}

/*
** 変換行列：x 軸中心の回転変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadRotateX(GLfloat a)
{
  const GLfloat c(cos(a));
  const GLfloat s(sin(a));

  array[ 0] = 1.0f; array[ 1] = 0.0f; array[ 2] = 0.0f; array[ 3] = 0.0f;
  array[ 4] = 0.0f; array[ 5] = c;    array[ 6] = s;    array[ 7] = 0.0f;
  array[ 8] = 0.0f; array[ 9] = -s;   array[10] = c;    array[11] = 0.0f;
  array[12] = 0.0f; array[13] = 0.0f; array[14] = 0.0f; array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：y 軸中心の回転変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadRotateY(GLfloat a)
{
  const GLfloat c(cos(a));
  const GLfloat s(sin(a));

  array[ 0] = c;    array[ 1] = 0.0f; array[ 2] = -s;   array[ 3] = 0.0f;
  array[ 4] = 0.0f; array[ 5] = 1.0f; array[ 6] = 0.0f; array[ 7] = 0.0f;
  array[ 8] = s;    array[ 9] = 0.0f; array[10] = c;    array[11] = 0.0f;
  array[12] = 0.0f; array[13] = 0.0f; array[14] = 0.0f; array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：z 軸中心の回転変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadRotateZ(GLfloat a)
{
  const GLfloat c(cos(a));
  const GLfloat s(sin(a));

  array[ 0] = c;    array[ 1] = s;    array[ 2] = 0.0f; array[ 3] = 0.0f;
  array[ 4] = -s;   array[ 5] = c;    array[ 6] = 0.0f; array[ 7] = 0.0f;
  array[ 8] = 0.0f; array[ 9] = 0.0f; array[10] = 1.0f; array[11] = 0.0f;
  array[12] = 0.0f; array[13] = 0.0f; array[14] = 0.0f; array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：任意軸中心の回転変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a)
{
  const GLfloat d(sqrt(x * x + y * y + z * z));

  if (d > 0.0f)
  {
    const GLfloat l(x / d),  m(y / d),  n(z / d);
    const GLfloat l2(l * l), m2(m * m), n2(n * n);
    const GLfloat lm(l * m), mn(m * n), nl(n * l);
    const GLfloat c(cos(a)), c1(1.0f - c);
    const GLfloat s(sin(a));

    array[ 0] = (1.0f - l2) * c + l2;
    array[ 1] = lm * c1 + n * s;
    array[ 2] = nl * c1 - m * s;
    array[ 3] = 0.0f;

    array[ 4] = lm * c1 - n * s;
    array[ 5] = (1.0f - m2) * c + m2;
    array[ 6] = mn * c1 + l * s;
    array[ 7] = 0.0f;

    array[ 8] = nl * c1 + m * s;
    array[ 9] = mn * c1 - l * s;
    array[10] = (1.0f - n2) * c + n2;
    array[11] = 0.0f;

    array[12] = 0.0f;
    array[13] = 0.0f;
    array[14] = 0.0f;
    array[15] = 1.0f;
  }

  return *this;
}

/*
** 変換行列：転置行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadTranspose(const GLfloat *marray)
{
  array[ 0] = marray[ 0];
  array[ 1] = marray[ 4];
  array[ 2] = marray[ 8];
  array[ 3] = marray[12];
  array[ 4] = marray[ 1];
  array[ 5] = marray[ 5];
  array[ 6] = marray[ 9];
  array[ 7] = marray[13];
  array[ 8] = marray[ 2];
  array[ 9] = marray[ 6];
  array[10] = marray[10];
  array[11] = marray[14];
  array[12] = marray[ 3];
  array[13] = marray[ 7];
  array[14] = marray[11];
  array[15] = marray[15];

  return *this;
}

/*
** 変換行列：逆行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadInvert(const GLfloat *marray)
{
  GLfloat lu[20], *plu[4];

  // j 行の要素の値の絶対値の最大値を plu[j][4] に求める
  for (int j = 0; j < 4; ++j)
  {
    GLfloat max(fabs(*(plu[j] = lu + 5 * j) = *(marray++)));

    for (int i = 0; ++i < 4;)
    {
      GLfloat a(fabs(plu[j][i] = *(marray++)));
      if (a > max) max = a;
    }
    if (max == 0.0f) return *this;
    plu[j][4] = 1.0f / max;
  }

  // ピボットを考慮した LU 分解
  for (int j = 0; j < 4; ++j)
  {
    GLfloat max(fabs(plu[j][j] * plu[j][4]));
    int i = j;

    for (int k = j; ++k < 4;)
    {
      GLfloat a(fabs(plu[k][j] * plu[k][4]));
      if (a > max)
      {
        max = a;
        i = k;
      }
    }
    if (i > j)
    {
      GLfloat *t(plu[j]);
      plu[j] = plu[i];
      plu[i] = t;
    }
    if (plu[j][j] == 0.0f) return *this;
    for (int k = j; ++k < 4;)
    {
      plu[k][j] /= plu[j][j];
      for (int i = j; ++i < 4;)
      {
        plu[k][i] -= plu[j][i] * plu[k][j];
      }
    }
  }

  // LU 分解から逆行列を求める
  for (int k = 0; k < 4; ++k)
  {
    // array に単位行列を設定する
    for (int i = 0; i < 4; ++i)
    {
      array[i * 4 + k] = (plu[i] == lu + k * 5) ? 1.0f : 0.0f;
    }
    // lu から逆行列を求める
    for (int i = 0; i < 4; ++i)
    {
      for (int j = i; ++j < 4;)
      {
        array[j * 4 + k] -= array[i * 4 + k] * plu[j][i];
      }
    }
    for (int i = 4; --i >= 0;)
    {
      for (int j = i; ++j < 4;)
      {
        array[i * 4 + k] -= plu[i][j] * array[j * 4 + k];
      }
      array[i * 4 + k] /= plu[i][i];
    }
  }

  return *this;
}

/*
** 変換行列：法線変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadNormal(const GLfloat *marray)
{
  array[ 0] = marray[ 5] * marray[10] - marray[ 6] * marray[ 9];
  array[ 1] = marray[ 6] * marray[ 8] - marray[ 4] * marray[10];
  array[ 2] = marray[ 4] * marray[ 9] - marray[ 5] * marray[ 8];
  array[ 4] = marray[ 9] * marray[ 2] - marray[10] * marray[ 1];
  array[ 5] = marray[10] * marray[ 0] - marray[ 8] * marray[ 2];
  array[ 6] = marray[ 8] * marray[ 1] - marray[ 9] * marray[ 0];
  array[ 8] = marray[ 1] * marray[ 6] - marray[ 2] * marray[ 5];
  array[ 9] = marray[ 2] * marray[ 4] - marray[ 0] * marray[ 6];
  array[10] = marray[ 0] * marray[ 5] - marray[ 1] * marray[ 4];
  array[ 3] = array[ 7] = array[11] = array[12] = array[13] = array[14] = 0.0f;
  array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：ビュー変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadLookat(GLfloat ex, GLfloat ey, GLfloat ez,
  GLfloat tx, GLfloat ty, GLfloat tz,
  GLfloat ux, GLfloat uy, GLfloat uz)
{
  // z 軸 = e - t
  const GLfloat zx(ex - tx);
  const GLfloat zy(ey - ty);
  const GLfloat zz(ez - tz);

  // x 軸 = u x z 軸
  const GLfloat xx(uy * zz - uz * zy);
  const GLfloat xy(uz * zx - ux * zz);
  const GLfloat xz(ux * zy - uy * zx);

  // y 軸 = z 軸 x x 軸
  const GLfloat yx(zy * xz - zz * xy);
  const GLfloat yy(zz * xx - zx * xz);
  const GLfloat yz(zx * xy - zy * xx);

  // y 軸の長さをチェック
  GLfloat y(yx * yx + yy * yy + yz * yz);
  if (y == 0.0f) return *this;

  // x 軸の正規化
  const GLfloat x(sqrt(xx * xx + xy * xy + xz * xz));
  array[ 0] = xx / x;
  array[ 4] = xy / x;
  array[ 8] = xz / x;

  // y 軸の正規化
  y = sqrt(y);
  array[ 1] = yx / y;
  array[ 5] = yy / y;
  array[ 9] = yz / y;

  // z 軸の正規化
  const GLfloat z(sqrt(zx * zx + zy * zy + zz * zz));
  array[ 2] = zx / z;
  array[ 6] = zy / z;
  array[10] = zz / z;

  // 平行移動
  array[12] = -(ex * array[ 0] + ey * array[ 4] + ez * array[ 8]);
  array[13] = -(ex * array[ 1] + ey * array[ 5] + ez * array[ 9]);
  array[14] = -(ex * array[ 2] + ey * array[ 6] + ez * array[10]);

  // 残り
  array[ 3] = array[ 7] = array[11] = 0.0f;
  array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：平行投影変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadOrthogonal(GLfloat left, GLfloat right,
  GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  const GLfloat dx(right - left);
  const GLfloat dy(top - bottom);
  const GLfloat dz(zFar - zNear);

  if (dx != 0.0f && dy != 0.0f && dz != 0.0f)
  {
    array[ 0] = 2.0f / dx;
    array[ 5] = 2.0f / dy;
    array[10] = -2.0f / dz;
    array[12] = -(right + left) / dx;
    array[13] = -(top + bottom) / dy;
    array[14] = -(zFar + zNear) / dz;
    array[15] = 1.0f;
    array[ 1] = array[ 2] = array[ 3] = array[ 4] =
    array[ 6] = array[ 7] = array[ 8] = array[ 9] =
    array[11] = 0.0f;
  }

  return *this;
}

/*
** 変換行列：透視投影変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadFrustum(GLfloat left, GLfloat right,
  GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  const GLfloat dx(right - left);
  const GLfloat dy(top - bottom);
  const GLfloat dz(zFar - zNear);

  if (dx != 0.0f && dy != 0.0f && dz != 0.0f)
  {
    array[ 0] = 2.0f * zNear / dx;
    array[ 5] = 2.0f * zNear / dy;
    array[ 8] = (right + left) / dx;
    array[ 9] = (top + bottom) / dy;
    array[10] = -(zFar + zNear) / dz;
    array[11] = -1.0f;
    array[14] = -2.0f * zFar * zNear / dz;
    array[ 1] = array[ 2] = array[ 3] = array[ 4] =
    array[ 6] = array[ 7] = array[12] = array[13] =
    array[15] = 0.0f;
  }

  return *this;
}

/*
** 変換行列：画角から透視投影変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadPerspective(GLfloat fovy, GLfloat aspect,
  GLfloat zNear, GLfloat zFar)
{
  const GLfloat dz(zFar - zNear);

  if (dz != 0.0f)
  {
    array[ 5] = 1.0f / tan(fovy * 0.5f);
    array[ 0] = array[ 5] / aspect;
    array[10] = -(zFar + zNear) / dz;
    array[11] = -1.0f;
    array[14] = -2.0f * zFar * zNear / dz;
    array[ 1] = array[ 2] = array[ 3] = array[ 4] =
    array[ 6] = array[ 7] = array[ 8] = array[ 9] =
    array[12] = array[13] = array[15] = 0.0f;
  }

  return *this;
}

/*
** 四元数：GgQuaternion 型の四元数 p, q の積を r に求める
*/
void gg::GgQuaternion::multiply(GLfloat *r, const GLfloat *p, const GLfloat *q) const
{
  r[0] = p[1] * q[2] - p[2] * q[1] + p[0] * q[3] + p[3] * q[0];
  r[1] = p[2] * q[0] - p[0] * q[2] + p[1] * q[3] + p[3] * q[1];
  r[2] = p[0] * q[1] - p[1] * q[0] + p[2] * q[3] + p[3] * q[2];
  r[3] = p[3] * q[3] - p[0] * q[0] - p[1] * q[1] - p[2] * q[2];
}

/*
** 四元数：GgQuaternion 型の四元数 q が表す変換行列を m に求める
*/
void gg::GgQuaternion::toMatrix(GLfloat *m, const GLfloat *q) const
{
  const GLfloat xx(q[0] * q[0] * 2.0f);
  const GLfloat yy(q[1] * q[1] * 2.0f);
  const GLfloat zz(q[2] * q[2] * 2.0f);
  const GLfloat xy(q[0] * q[1] * 2.0f);
  const GLfloat yz(q[1] * q[2] * 2.0f);
  const GLfloat zx(q[2] * q[0] * 2.0f);
  const GLfloat xw(q[0] * q[3] * 2.0f);
  const GLfloat yw(q[1] * q[3] * 2.0f);
  const GLfloat zw(q[2] * q[3] * 2.0f);

  m[ 0] = 1.0f - yy - zz;
  m[ 1] = xy + zw;
  m[ 2] = zx - yw;
  m[ 4] = xy - zw;
  m[ 5] = 1.0f - zz - xx;
  m[ 6] = yz + xw;
  m[ 8] = zx + yw;
  m[ 9] = yz - xw;
  m[10] = 1.0f - xx - yy;
  m[ 3] = m[ 7] = m[11] = m[12] = m[13] = m[14] = 0.0f;
  m[15] = 1.0f;
}

/*
** 四元数：回転変換行列 a が表す四元数を q に求める
*/
void gg::GgQuaternion::toQuaternion(GLfloat *q, const GLfloat *a) const
{
  const GLfloat tr(a[0] + a[5] + a[10] + a[15]);

  if (tr > 0.0f)
  {
    q[3] = sqrt(tr) * 0.5f;
    q[0] = (a[6] - a[9]) * 0.25f / q[3];
    q[1] = (a[8] - a[2]) * 0.25f / q[3];
    q[2] = (a[1] - a[4]) * 0.25f / q[3];
  }
}

/*
** 四元数：球面線形補間 p に q と r を t で補間した四元数を求める
*/
void gg::GgQuaternion::slerp(GLfloat *p, const GLfloat *q, const GLfloat *r, GLfloat t) const
{
  const GLfloat qr(ggDot3(q, r));
  const GLfloat ss(1.0f - qr * qr);

  if (ss == 0.0f)
  {
    if (p != q)
    {
      p[0] = q[0];
      p[1] = q[1];
      p[2] = q[2];
      p[3] = q[3];
    }
  }
  else
  {
    const GLfloat sp(sqrt(ss));
    const GLfloat ph(acos(qr));
    const GLfloat pt(ph * t);
    const GLfloat t1(sin(pt) / sp);
    const GLfloat t0(sin(ph - pt) / sp);

    p[0] = q[0] * t0 + r[0] * t1;
    p[1] = q[1] * t0 + r[1] * t1;
    p[2] = q[2] * t0 + r[2] * t1;
    p[3] = q[3] * t0 + r[3] * t1;
  }
}

/*
** 四元数：(x, y, z) を軸とし角度 a 回転する四元数を求める
*/
gg::GgQuaternion &gg::GgQuaternion::loadRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a)
{
  const GLfloat l(x * x + y * y + z * z);

  if (l != 0.0)
  {
    GLfloat s(sin(a *= 0.5f) / sqrt(l));

    quaternion[0] = x * s;
    quaternion[1] = y * s;
    quaternion[2] = z * s;
  }
  else
  {
    quaternion[0] = quaternion[1] = quaternion[2] = 0.0f;
  }
  quaternion[3] = cos(a);

  return *this;
}

/*
** x 軸中心に角度 a 回転する四元数を格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadRotateX(GLfloat a)
{
  const GLfloat t(a * 0.5f);

  quaternion[0] = sin(t);
  quaternion[3] = cos(t);
  quaternion[1] = quaternion[2] = 0.0f;

  return *this;
}

/*
** y 軸中心に角度 a 回転する四元数を格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadRotateY(GLfloat a)
{
  const GLfloat t(a * 0.5f);

  quaternion[1] = sin(t);
  quaternion[3] = cos(t);
  quaternion[0] = quaternion[2] = 0.0f;

  return *this;
}

/*
** z 軸中心に角度 a 回転する四元数を格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadRotateZ(GLfloat a)
{
  const GLfloat t(a * 0.5f);

  quaternion[2] = sin(t);
  quaternion[3] = cos(t);
  quaternion[0] = quaternion[1] = 0.0f;

  return *this;
}

/*
** 四元数：オイラー角 (heading, pitch, roll) にもとづいて四元数を求める
*/
gg::GgQuaternion &gg::GgQuaternion::loadEuler(GLfloat heading, GLfloat pitch, GLfloat roll)
{
  GgQuaternion h, p, r;

  h.loadRotateY(heading);
  p.loadRotateX(pitch);
  r.loadRotateZ(roll);

  *this = h * p * r;

  return *this;
}

/*
** 四元数：正規化して格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadNormalize(const GLfloat *a)
{
  quaternion[0] = a[0];
  quaternion[1] = a[1];
  quaternion[2] = a[2];
  quaternion[3] = a[3];

  ggNormalize4(quaternion.data());

  return *this;
}

/*
** 四元数：共役四元数を格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadConjugate(const GLfloat *a)
{
  // w 要素を反転する
  quaternion[0] =  a[0];
  quaternion[1] =  a[1];
  quaternion[2] =  a[2];
  quaternion[3] = -a[3];

  return *this;
}

/*
** 四元数：逆元を格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadInvert(const GLfloat *a)
{
  // ノルムの二乗を求める
  const GLfloat l(ggDot4(a, a));

  if (l > 0.0f)
  {
    // 共役四元数を求める
    GgQuaternion r;
    r.loadConjugate(a);

    // ノルムの二乗で割る
    quaternion[0] = r.quaternion[0] / l;
    quaternion[1] = r.quaternion[1] / l;
    quaternion[2] = r.quaternion[2] / l;
    quaternion[3] = r.quaternion[3] / l;
  }

  return *this;
}

/*
** 簡易トラックボール処理：リセット
*/
void gg::GgTrackball::reset()
{
  // ドラッグ中ではない
  drag = false;

  // 単位クォーターニオンで初期化する
  tq = cq.loadIdentity();

  // 回転行列を初期化する
  tq.getMatrix(rt);
}

/*
** 簡易トラックボール処理：トラックボールする領域の設定
**
**   Reshape コールバック (resize) の中で実行する
**   (w, h) ウィンドウサイズ
*/
void gg::GgTrackball::region(float w, float h)
{
  // マウスポインタ位置のウィンドウ内の相対的位置への換算用
  sx = 1.0f / w;
  sy = 1.0f / h;
}

/*
** 簡易トラックボール処理：ドラッグ開始時の処理
**
**   マウスボタンを押したときに実行する
**   (x, y) 現在のマウス位置
*/
void gg::GgTrackball::start(float x, float y)
{
  // ドラッグ開始
  drag = true;

  // ドラッグ開始点を記録する
  cx = x;
  cy = y;
}

/*
** 簡易トラックボール処理：ドラッグ中の処理
**
**   マウスのドラッグ中に実行する
**   (x, y) 現在のマウス位置
*/
void gg::GgTrackball::motion(float x, float y)
{
  if (drag)
  {
    // マウスポインタの位置のドラッグ開始位置からの変位
    const float dx((x - cx) * sx);
    const float dy((y - cy) * sy);

    // マウスポインタの位置のドラッグ開始位置からの距離
    const float a(sqrt(dx * dx + dy * dy));

    if (a != 0.0)
    {
      // 現在の回転の四元数に作った四元数を掛けて合成する
      tq = ggRotateQuaternion(dy, dx, 0.0f, a * 6.283185f) * cq;

      // 合成した四元数から回転の変換行列を求める
      tq.getMatrix(rt);
    }
  }
}

/*
** 簡易トラックボール処理：回転角の修正
**
**   現在の回転角を修正する
**   q 修正分の回転角を表す四元数
*/
void gg::GgTrackball::rotate(const GgQuaternion &q)
{
  if (!drag)
  {
    // 保存されている四元数に修正分の四元数を掛けて合成する
    tq = q * cq;

    // 合成した四元数から回転の変換行列を求める
    tq.getMatrix(rt);

    // 誤差を吸収するために正規化して保存する
    cq = tq.normalize();
  }
}

/*
** 簡易トラックボール処理：停止時の処理
**
**   マウスボタンを離したときに実行する
**   (x, y) 現在のマウス位置
*/
void gg::GgTrackball::stop(float x, float y)
{
  // ドラッグ終了点における回転を求める
  motion(x, y);

  // 誤差を吸収するために正規化して保存する
  cq = tq.normalize();

  // ドラッグ終了
  drag = false;
}

/*
** 点：描画
*/
void gg::GgPoints::draw(GLint first, GLsizei count) const
{
  // 頂点配列オブジェクトを指定する
  GgShape::draw(first, count);

  // 図形を描画する
  glDrawArrays(getMode(), first, count > 0 ? count : getCount() - first);
}

/*
** 三角形：描画
*/
void gg::GgTriangles::draw(GLint first, GLsizei count) const
{
  // 頂点配列オブジェクトを指定する
  GgShape::draw(first, count);

  // 図形を描画する
  glDrawArrays(getMode(), first, count > 0 ? count : getCount() - first);
}

/*
** オブジェクト：描画
*/
void gg::GgElements::draw(GLint first, GLsizei count) const
{
  // 頂点配列オブジェクトを指定する
  GgShape::draw(first, count);

  // 図形を描画する
  glDrawElements(getMode(), count > 0 ? count : getIndexCount() - first,
    GL_UNSIGNED_INT, static_cast<GLuint *>(0) + first);
}

/*
** 点群を立方体状に生成する
*/
gg::GgPoints *gg::ggPointsCube(GLuint nv, GLfloat length, GLfloat cx, GLfloat cy, GLfloat cz)
{
  // メモリを確保する
  std::vector<GgVector> pos;
  pos.reserve(nv);

  // 点を生成する
  for (GLuint v = 0; v < nv; ++v)
  {
    const GgVector p =
    {
      (static_cast<GLfloat>(rand()) / static_cast<float>(RAND_MAX) - 0.5f) * length + cx,
      (static_cast<GLfloat>(rand()) / static_cast<float>(RAND_MAX) - 0.5f) * length + cy,
      (static_cast<GLfloat>(rand()) / static_cast<float>(RAND_MAX) - 0.5f) * length + cz,
      1.0f
    };

    pos.emplace_back(p);
  }

  // 点データの GgPoints オブジェクトを作成する
  GgPoints *const points(new GgPoints(pos.data(), static_cast<GLuint>(pos.size()), GL_POINTS));

  // GgPoints オブジェクトを返す
  return points;
}

/*
** 点群を球状に生成する
*/
gg::GgPoints *gg::ggPointsSphere(GLuint nv, GLfloat radius,
  GLfloat cx, GLfloat cy, GLfloat cz)
{
  // メモリを確保する
  std::vector<GgVector> pos;
  pos.reserve(nv);

  // 点を生成する
  for (GLuint v = 0; v < nv; ++v)
  {
    const float r(radius * static_cast<float>(rand()) / static_cast<float>(RAND_MAX));
    const float t(6.2831853f * static_cast<float>(rand()) / (static_cast<float>(RAND_MAX) + 1.0f));
    const float cp(2.0f * static_cast<float>(rand()) / static_cast<float>(RAND_MAX) - 1.0f);
    const float sp(sqrt(1.0f - cp * cp));
    const float ct(cos(t));
    const float st(sin(t));

    const GgVector p = { r * sp * ct + cx, r * sp * st + cy, r * cp + cz };

    pos.emplace_back(p);
  }

  // 点データの GgPoints オブジェクトを作成する
  GgPoints *const points(new GgPoints(pos.data(), static_cast<GLuint>(pos.size()), GL_POINTS));

  // GgPoints オブジェクトを返す
  return points;
}

/*
** 矩形状に 2 枚の三角形を生成する
*/
gg::GgTriangles *gg::ggRectangle(GLfloat width, GLfloat height)
{
  // 頂点属性
  std::array<GgVertex, 4> vert;

  // 頂点位置と法線を求める
  for (int v = 0; v < 4; ++v)
  {
    const GLfloat x(((v & 1) * 2 - 1) * width);
    const GLfloat y(((v & 2) - 1) * height);

    vert[v] = GgVertex(x, y, 0.0f, 0.0f, 0.0f, 1.0f);
  }

  // 矩形の GgTrianges オブジェクトを作成する
  return new GgTriangles(vert.data(), static_cast<GLint>(vert.size()), GL_TRIANGLE_STRIP);
}

/*
** 楕円状に三角形を生成する
*/
gg::GgTriangles *gg::ggEllipse(GLfloat width, GLfloat height, GLuint slices)
{
  // 楕円のスケール
  constexpr GLfloat scale(0.5f);

  // 作業用のメモリ
  std::vector<GgVertex> vert;
  vert.reserve(slices);

  // 頂点位置と法線を求める
  for (GLuint v = 0; v < slices; ++v)
  {
    const GLfloat t(6.2831853f * static_cast<float>(v) / static_cast<float>(slices));
    const GLfloat x(cos(t) * width * scale);
    const GLfloat y(sin(t) * height * scale);

    vert.emplace_back(x, y, 0.0f, 0.0f, 0.0f, 1.0f);
  }

  // GgTriangles オブジェクトを作成する
  return new GgTriangles(vert.data(), static_cast<GLuint>(vert.size()), GL_TRIANGLE_FAN);
}

/*
** Wavefront OBJ ファイルを読み込む (Arrays 形式)
*/
gg::GgTriangles *gg::ggArraysObj(const char *name, bool normalize)
{
  std::vector< std::array<GLuint, 3> > group;
  std::vector<GgSimpleMaterial> material;
  std::vector<GgVertex> vert;

  // ファイルを読み込む
  if (!ggLoadObj(name, group, material, vert, normalize)) return 0;

  // GgTriangles オブジェクトを作成する
  return new GgTriangles(vert.data(), static_cast<GLuint>(vert.size()), GL_TRIANGLES);
}

/*
** Wavefront OBJ ファイル を読み込む (Elements 形式)
*/
gg::GgElements *gg::ggElementsObj(const char *name, bool normalize)
{
  std::vector< std::array<GLuint, 3> > group;
  std::vector<GgSimpleMaterial> material;
  std::vector<GgVertex> vert;
  std::vector<GLuint> face;

  // ファイルを読み込む
  if (!ggLoadObj(name, group, material, vert, face, normalize)) return 0;

  // GgElements オブジェクトを作成する
  return new GgElements(vert.data(), static_cast<GLuint>(vert.size()),
    face.data(), static_cast<GLuint>(face.size()), GL_TRIANGLES);
}

/*
** メッシュ形状を作成する (Elements 形式)
*/
gg::GgElements *gg::ggElementsMesh(GLuint slices, GLuint stacks, const GLfloat (*pos)[3], const GLfloat (*norm)[3])
{
  // 頂点属性
  std::vector<GgVertex> vert;
  vert.reserve((slices + 1) * (stacks + 1));

  // 頂点の法線を求める
  for (GLuint j = 0; j <= stacks; ++j)
  {
    for (GLuint i = 0; i <= slices; ++i)
    {
      // 処理対象の頂点番号
      const GLuint k(j * (slices + 1) + i);

      // 頂点の法線
      GgVector tnorm;
      tnorm[3] = 0.0f;

      if (norm)
      {
        tnorm[0] = norm[k][0];
        tnorm[1] = norm[k][1];
        tnorm[2] = norm[k][2];
      }
      else
      {
        // 処理対象の頂点の周囲の頂点番号
        const GLuint kim(i > 0 ? k - 1 : k);
        const GLuint kip(i < slices ? k + 1 : k);
        const GLuint kjm(j > 0 ? k - slices - 1 : k);
        const GLuint kjp(j < stacks ? k + slices + 1 : k);

        // 接線ベクトル
        const std::array<GLfloat, 3> t =
        {
          pos[kip][0] - pos[kim][0],
          pos[kip][1] - pos[kim][1],
          pos[kip][2] - pos[kim][2]
        };

        // 従接線ベクトル
        const std::array<GLfloat, 3> b =
        {
          pos[kjp][0] - pos[kjm][0],
          pos[kjp][1] - pos[kjm][1],
          pos[kjp][2] - pos[kjm][2]
        };

        // 法線
        tnorm[0] = t[1] * b[2] - t[2] * b[1];
        tnorm[1] = t[2] * b[0] - t[0] * b[2];
        tnorm[2] = t[0] * b[1] - t[1] * b[0];

        // 法線の正規化
        ggNormalize3(tnorm.data());
      }

      // 頂点の位置
      const GgVector tpos = { pos[k][0], pos[k][1], pos[k][2], 1.0f };

      // 頂点属性の保存
      vert.emplace_back(tpos, tnorm);
    }
  }

  // 頂点のインデックス (三角形データ)
  std::vector<GLuint> face;

  // 頂点のインデックスを求める
  for (GLuint j = 0; j < stacks; ++j)
  {
    for (GLuint i = 0; i < slices; ++i)
    {
      // 処理対象のマス
      const GLuint k((slices + 1) * j + i);

      // マスの上半分の三角形
      face.emplace_back(k);
      face.emplace_back(k + slices + 2);
      face.emplace_back(k + 1);

      // マスのお下半分の三角形
      face.emplace_back(k);
      face.emplace_back(k + slices + 1);
      face.emplace_back(k + slices + 2);
    }
  }

  // GgElements オブジェクトを作成する
  return new GgElements(vert.data(), static_cast<GLuint>(vert.size()),
    face.data(), static_cast<GLuint>(face.size()), GL_TRIANGLES);
}

/*
** 球状に三角形データを生成する (Elements 形式)
*/
gg::GgElements *gg::ggElementsSphere(GLfloat radius, int slices, int stacks)
{
  // 頂点の位置と法線
  std::vector<GLfloat> p, n;

  // 頂点の位置と法線を求める
  for (int j = 0; j <= stacks; ++j)
  {
    const float t(static_cast<float>(j) / static_cast<float>(stacks));
    const float ph(3.141593f * t);
    const float y(cosf(ph));
    const float r(sinf(ph));

    for (int i = 0; i <= slices; ++i)
    {
      const float s(static_cast<float>(i) / static_cast<float>(slices));
      const float th(-2.0f * 3.141593f * s);
      const float x(r * cosf(th));
      const float z(r * sinf(th));

      // 頂点の座標値
      p.push_back(x * radius);
      p.push_back(y * radius);
      p.push_back(z * radius);

      // 頂点の法線
      n.push_back(x);
      n.push_back(y);
      n.push_back(z);
    }
  }

  // GgElements オブジェクトを作成する
  return ggElementsMesh(slices, stacks, reinterpret_cast<GLfloat (*)[3]>(&p[0]),
    reinterpret_cast<GLfloat (*)[3]>(&n[0]));
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：環境光に対する反射係数を設定する
**
**   r 環境光に対する反射係数の赤成分
**   g 環境光に対する反射係数の緑成分
**   b 環境光に対する反射係数の青成分
**   a 環境光に対する反射係数の不透明度, デフォルトは 1
**   first 値を設定する材質データの最初の番号, デフォルトは 0
**   count 値を設定する材質データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterialAmbient(GLfloat r, GLfloat g, GLfloat b, GLfloat a,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleMaterial *material(reinterpret_cast<GgSimpleMaterial *>(start + getSize(i)));
    material->ambient[0] = r;
    material->ambient[1] = g;
    material->ambient[2] = b;
    material->ambient[3] = a;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：環境光に対する反射係数を設定する
**
**   ambient 環境光に対する反射係数を格納した GLfloat 型の 4 要素の配列
**   first 値を設定する材質データの最初の番号, デフォルトは 0
**   count 値を設定する材質データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterialAmbient(const GLfloat *ambient,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleMaterial *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleMaterial *const pointer(static_cast<GgSimpleMaterial *>(0));

  // バッファオブジェクト上の first 番目の要素の ambient 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer[first].ambient.data()));

  // ambient 要素の要素数
  const size_t size(pointer->ambient.size());

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックの ambient 要素に値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof pointer->ambient, ambient + i * size);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：拡散反射係数を設定する
**
**   r 拡散反射係数の赤成分
**   g 拡散反射係数の緑成分
**   b 拡散反射係数の青成分
**   a 拡散反射係数の不透明度, デフォルトは 1
**   first 値を設定する材質データの最初の番号, デフォルトは 0
**   count 値を設定する材質データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterialDiffuse(GLfloat r, GLfloat g, GLfloat b, GLfloat a,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleMaterial *material(reinterpret_cast<GgSimpleMaterial *>(start + getSize(i)));
    material->diffuse[0] = r;
    material->diffuse[1] = g;
    material->diffuse[2] = b;
    material->diffuse[3] = a;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：拡散反射係数を設定する
**
**   diffuse 拡散反射係数を格納した GLfloat 型の 4 要素の配列
**   first 値を設定する材質データの最初の番号, デフォルトは 0
**   count 値を設定する材質データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterialDiffuse(const GLfloat *diffuse,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleMaterial *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleMaterial *const pointer(static_cast<GgSimpleMaterial *>(0));

  // バッファオブジェクト上の first 番目の要素の diffuse 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer[first].diffuse.data()));

  // diffuse 要素の要素数
  const size_t size(pointer->diffuse.size());

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックの diffuse 要素に値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof pointer->diffuse, diffuse + i * size);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：鏡面反射係数を設定する
**
**   r 鏡面反射係数の赤成分
**   g 鏡面反射係数の緑成分
**   b 鏡面反射係数の青成分
**   a 鏡面反射係数の不透明度, デフォルトは 1
**   first 値を設定する材質データの最初の番号, デフォルトは 0
**   count 値を設定する材質データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterialSpecular(GLfloat r, GLfloat g, GLfloat b, GLfloat a,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleMaterial *material(reinterpret_cast<GgSimpleMaterial *>(start + getSize(i)));
    material->specular[0] = r;
    material->specular[1] = g;
    material->specular[2] = b;
    material->specular[3] = a;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：鏡面反射係数を設定する
**
**   specular 鏡面反射係数を格納した GLfloat 型の 4 要素の配列
**   first 値を設定する材質データの最初の番号, デフォルトは 0
**   count 値を設定する材質データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterialSpecular(const GLfloat *specular,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleMaterial *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleMaterial *const pointer(static_cast<GgSimpleMaterial *>(0));

  // バッファオブジェクト上の first 番目の要素の specular 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer[first].specular.data()));

  // specular 要素の要素数
  const size_t size(pointer->specular.size());

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックの specular 要素に値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof pointer->specular, specular + i * size);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：輝き係数を設定する
**
**   shininess 輝き係数
**   first 値を設定する材質データの最初の番号, デフォルトは 0
**   count 値を設定する材質データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterialShininess(GLfloat shininess,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleMaterial *material(reinterpret_cast<GgSimpleMaterial *>(start + getSize(i)));
    material->shininess = shininess;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：輝き係数を設定する
**
**   shininess 輝き係数
**   first 値を設定する材質データの最初の番号, デフォルトは 0
**   count 値を設定する材質データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterialShininess(const GLfloat *shininess,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleMaterial *material(reinterpret_cast<GgSimpleMaterial *>(start + getSize(i)));
    material->shininess = shininess[i];
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する材質データ：材質を設定する
**
**   material 光源の特性の gg::GgSimpleShader::GgSimpleMaterial 構造体のポインタ
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleMaterialBuffer::loadMaterial(const GgSimpleMaterial *material,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleMaterial *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleMaterial *const pointer(static_cast<GgSimpleMaterial *>(0));

  // バッファオブジェクト上の first 番目の要素の specular 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer + first));

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックに値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof *material, material + i);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の強度の環境光成分を設定する
**
**   r 光源の強度の環境光成分の赤成分
**   g 光源の強度の環境光成分の緑成分
**   b 光源の強度の環境光成分の青成分
**   a 光源の強度の環境光成分の不透明度, デフォルトは 1
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightAmbient(GLfloat r, GLfloat g, GLfloat b, GLfloat a,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleLight *light(reinterpret_cast<GgSimpleLight *>(start + getSize(i)));
    light->ambient[0] = r;
    light->ambient[1] = g;
    light->ambient[2] = b;
    light->ambient[3] = a;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の強度の環境光成分を設定する
**
**   ambient 光源の強度の環境光成分を格納した GLfloat 型の 4 要素の配列
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightAmbient(const GLfloat *ambient,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleLight *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleLight *const pointer(static_cast<GgSimpleLight *>(0));

  // バッファオブジェクト上の first 番目の要素の ambient 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer[first].ambient.data()));

  // ambient 要素の要素数
  const size_t size(pointer->ambient.size());

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックの ambient 要素に値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof pointer->ambient, ambient + i * size);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の強度の拡散反射光成分を設定する
**
**   r 光源の強度の拡散反射光成分の赤成分
**   g 光源の強度の拡散反射光成分の緑成分
**   b 光源の強度の拡散反射光成分の青成分
**   a 光源の強度の拡散反射光成分の不透明度, デフォルトは 1
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightDiffuse(GLfloat r, GLfloat g, GLfloat b, GLfloat a,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleLight *light(reinterpret_cast<GgSimpleLight *>(start + getSize(i)));
    light->diffuse[0] = r;
    light->diffuse[1] = g;
    light->diffuse[2] = b;
    light->diffuse[3] = a;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の強度の拡散反射光成分を設定する
**
**   diffuse 光源の強度の拡散反射光成分を格納した GLfloat 型の 4 要素の配列
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightDiffuse(const GLfloat *diffuse,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleLight *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleLight *const pointer(static_cast<GgSimpleLight *>(0));

  // バッファオブジェクト上の first 番目の要素の diffuse 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer[first].diffuse.data()));

  // diffuse 要素の要素数
  const size_t size(pointer->diffuse.size());

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックの ambient 要素に値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof pointer->diffuse, diffuse + i * size);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の強度の鏡面反射光成分を設定する
**
**   r 光源の強度の鏡面反射光成分の赤成分
**   g 光源の強度の鏡面反射光成分の緑成分
**   b 光源の強度の鏡面反射光成分の青成分
**   a 光源の強度の鏡面反射光成分の不透明度, デフォルトは 1
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightSpecular(GLfloat r, GLfloat g, GLfloat b, GLfloat a,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleLight *light(reinterpret_cast<GgSimpleLight *>(start + getSize(i)));
    light->specular[0] = r;
    light->specular[1] = g;
    light->specular[2] = b;
    light->specular[3] = a;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の強度の鏡面反射光成分を設定する
**
**   specular 光源の強度の鏡面反射光成分を格納した GLfloat 型の 4 要素の配列
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightSpecular(const GLfloat *specular,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleLight *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleLight *const pointer(static_cast<GgSimpleLight *>(0));

  // バッファオブジェクト上の first 番目の要素の specular 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer[first].specular.data()));

  // specular 要素の要素数
  const size_t size(pointer->specular.size());

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックの ambient 要素に値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof pointer->specular, specular + i * size);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の色を設定するが位置は変更しない
**
**   material 光源の特性の gg::GgSimpleShader::GgSimpleLight 構造体
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightMaterial(const GgSimpleLight &material,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleLight *light(reinterpret_cast<GgSimpleLight *>(start + getSize(i)));
    light->ambient = material.ambient;
    light->diffuse = material.diffuse;
    light->specular = material.specular;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の位置を設定する
**
**   x 光源の位置の x 座標
**   y 光源の位置の y 座標
**   z 光源の位置の z 座標
**   w 光源の位置の w 座標, デフォルトは 1
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightPosition(GLfloat x, GLfloat y, GLfloat z, GLfloat w,
  GLuint first, GLuint count) const
{
  // データを格納するバッファオブジェクトの先頭のポインタ
  char *const start(static_cast<char *>(map(first, count)));
  for (GLuint i = 0; i < count; ++i)
  {
    // バッファオブジェクトの i 番目のブロックのポインタ
    GgSimpleLight *light(reinterpret_cast<GgSimpleLight *>(start + getSize(i)));
    light->position[0] = x;
    light->position[1] = y;
    light->position[2] = z;
    light->position[3] = w;
  }
  unmap();
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の位置を設定する
**
**   position 光源の位置の同次座標を格納した GLfloat 型の 4 要素の配列
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLightPosition(const GLfloat *position,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleLight *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleLight *const pointer(static_cast<GgSimpleLight *>(0));

  // バッファオブジェクト上の first 番目の要素の position 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer[first].position.data()));

  // position 要素の要素数
  const size_t size(pointer->position.size());

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックの ambient 要素に値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof pointer->position, position + i * size);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダが参照する光源データ：光源の色と位置を設定する
**
**   light 光源の特性の gg::GgSimpleShader::GgSimpleLight 構造体のポインタ
**   first 値を設定する光源データの最初の番号, デフォルトは 0
**   count 値を設定する光源データの数, デフォルトは 1
*/
void gg::GgSimpleLightBuffer::loadLight(const GgSimpleLight *light,
  GLuint first, GLuint count) const
{
  // 0 を (GgSimpleLight *) にキャストして得たバッファオブジェクト上のポインタ
  const GgSimpleLight *const pointer(static_cast<GgSimpleLight *>(0));

  // バッファオブジェクト上の first 番目の要素の position 要素のバイトオフセット
  const GLsizeiptr offset(reinterpret_cast<GLintptr>(pointer + first));

  bind();
  for (GLuint i = 0; i < count; ++i)
  {
    // i 番目のブロックに値を設定する
    glBufferSubData(getTarget(), offset + getSize(i), sizeof *light, light + i);
  }
}

/*
** 三角形に単純な陰影付けを行うシェーダ：コンストラクタ
*/
gg::GgSimpleShader::GgSimpleShader(const char *vert, const char *frag,
  const char *geom, GLint nvarying, const char **varyings)
  : GgPointShader(vert, frag, geom, nvarying, varyings)
  , materialIndex(glGetUniformBlockIndex(get(), "Material"))
  , lightIndex(glGetUniformBlockIndex(get(), "Light"))
  , mnLoc(glGetUniformLocation(get(), "mn"))
{
  glUniformBlockBinding(get(), materialIndex, 1);
  glUniformBlockBinding(get(), lightIndex, 0);
}

/*
** Wavefront OBJ 形式のデータ：コンストラクタ
*/
gg::GgObj::GgObj(const char *name, const GgSimpleShader *shader, bool normalize)
{
  // メンバの初期値
  this->data = nullptr;
  this->material = nullptr;
  this->shader = shader;

  // 作業用のメモリ
  std::vector<GgSimpleMaterial> mat;
  std::vector<GgVertex> vert;
  std::vector<GLuint> face;

  // ファイルを読み込む
  if (ggLoadObj(name, group, mat, vert, face, normalize))
  {
    // 頂点バッファオブジェクトを作成する
    data = new GgElements(vert.data(), static_cast<GLuint>(vert.size()),
      face.data(), static_cast<GLuint>(face.size()), GL_TRIANGLES);

    // 材質データを設定する
    material = new GgSimpleMaterialBuffer(mat.data(), static_cast<GLuint>(mat.size()));
  }
}

/*
** Wavefront OBJ 形式のデータ：図形の描画
*/
void gg::GgObj::draw(GLuint first, GLsizei count) const
{
  // 保持しているグループの数
  const GLuint ng(static_cast<GLuint>(group.size()));

  // 描画する最後のグループの次
  GLuint last(count <= 0 ? ng : first + count);
  if (last > ng) last = ng;

  for (GLuint g = first; g < last; ++g)
  {
    // 材質を設定する
    if (shader) shader->selectMaterial(material, group[g][2]);

    // 図形を描画する
    data->draw(group[g][0], group[g][1]);
  }
}
